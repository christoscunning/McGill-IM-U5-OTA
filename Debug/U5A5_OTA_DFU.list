
U5A5_OTA_DFU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000250  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ae10  08000250  08000250  00010250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000013f3  0800b060  0800b060  0001b060  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800c454  0800c454  0001c454  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800c45c  0800c45c  0001c45c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800c460  0800c460  0001c460  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000084  20000000  0800c464  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00006b4a  20000084  0800c4e8  00020084  2**2
                  ALLOC
  8 ._user_heap_stack 00000602  20006bce  0800c4e8  00026bce  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  000200ba  2**0
                  CONTENTS, READONLY
 11 .debug_info   00023ffc  00000000  00000000  000200fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00003bef  00000000  00000000  000440f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001430  00000000  00000000  00047ce8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00000f65  00000000  00000000  00049118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000386f2  00000000  00000000  0004a07d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00019fbf  00000000  00000000  0008276f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00170098  00000000  00000000  0009c72e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00005b70  00000000  00000000  0020c7c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000059  00000000  00000000  00212338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000250 <__do_global_dtors_aux>:
 8000250:	b510      	push	{r4, lr}
 8000252:	4c05      	ldr	r4, [pc, #20]	; (8000268 <__do_global_dtors_aux+0x18>)
 8000254:	7823      	ldrb	r3, [r4, #0]
 8000256:	b933      	cbnz	r3, 8000266 <__do_global_dtors_aux+0x16>
 8000258:	4b04      	ldr	r3, [pc, #16]	; (800026c <__do_global_dtors_aux+0x1c>)
 800025a:	b113      	cbz	r3, 8000262 <__do_global_dtors_aux+0x12>
 800025c:	4804      	ldr	r0, [pc, #16]	; (8000270 <__do_global_dtors_aux+0x20>)
 800025e:	f3af 8000 	nop.w
 8000262:	2301      	movs	r3, #1
 8000264:	7023      	strb	r3, [r4, #0]
 8000266:	bd10      	pop	{r4, pc}
 8000268:	20000084 	.word	0x20000084
 800026c:	00000000 	.word	0x00000000
 8000270:	0800b048 	.word	0x0800b048

08000274 <frame_dummy>:
 8000274:	b508      	push	{r3, lr}
 8000276:	4b03      	ldr	r3, [pc, #12]	; (8000284 <frame_dummy+0x10>)
 8000278:	b11b      	cbz	r3, 8000282 <frame_dummy+0xe>
 800027a:	4903      	ldr	r1, [pc, #12]	; (8000288 <frame_dummy+0x14>)
 800027c:	4803      	ldr	r0, [pc, #12]	; (800028c <frame_dummy+0x18>)
 800027e:	f3af 8000 	nop.w
 8000282:	bd08      	pop	{r3, pc}
 8000284:	00000000 	.word	0x00000000
 8000288:	20000088 	.word	0x20000088
 800028c:	0800b048 	.word	0x0800b048

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b982 	b.w	80005ac <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002c4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d146      	bne.n	800035e <__udivmoddi4+0x9e>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d95e      	bls.n	8000394 <__udivmoddi4+0xd4>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	409c      	lsls	r4, r3
 80002e8:	fa20 f202 	lsr.w	r2, r0, r2
 80002ec:	4317      	orrs	r7, r2
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	0c22      	lsrs	r2, r4, #16
 80002f8:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	fb01 f005 	mul.w	r0, r1, r5
 8000304:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000308:	4290      	cmp	r0, r2
 800030a:	d908      	bls.n	800031e <__udivmoddi4+0x5e>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	d202      	bcs.n	800031c <__udivmoddi4+0x5c>
 8000316:	4290      	cmp	r0, r2
 8000318:	f200 8134 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 800031c:	4639      	mov	r1, r7
 800031e:	1a12      	subs	r2, r2, r0
 8000320:	b2a4      	uxth	r4, r4
 8000322:	fbb2 f0fe 	udiv	r0, r2, lr
 8000326:	fb0e 2210 	mls	r2, lr, r0, r2
 800032a:	fb00 f505 	mul.w	r5, r0, r5
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	42a5      	cmp	r5, r4
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x88>
 8000336:	eb1c 0404 	adds.w	r4, ip, r4
 800033a:	f100 32ff 	add.w	r2, r0, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x86>
 8000340:	42a5      	cmp	r5, r4
 8000342:	f200 8119 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 8000346:	4610      	mov	r0, r2
 8000348:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800034c:	1b64      	subs	r4, r4, r5
 800034e:	2100      	movs	r1, #0
 8000350:	b11e      	cbz	r6, 800035a <__udivmoddi4+0x9a>
 8000352:	40dc      	lsrs	r4, r3
 8000354:	2300      	movs	r3, #0
 8000356:	e9c6 4300 	strd	r4, r3, [r6]
 800035a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800035e:	428b      	cmp	r3, r1
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0xb4>
 8000362:	2e00      	cmp	r6, #0
 8000364:	f000 80fc 	beq.w	8000560 <__udivmoddi4+0x2a0>
 8000368:	2100      	movs	r1, #0
 800036a:	e9c6 0500 	strd	r0, r5, [r6]
 800036e:	4608      	mov	r0, r1
 8000370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000374:	fab3 f183 	clz	r1, r3
 8000378:	2900      	cmp	r1, #0
 800037a:	d14c      	bne.n	8000416 <__udivmoddi4+0x156>
 800037c:	42ab      	cmp	r3, r5
 800037e:	f0c0 80f2 	bcc.w	8000566 <__udivmoddi4+0x2a6>
 8000382:	4282      	cmp	r2, r0
 8000384:	f240 80ef 	bls.w	8000566 <__udivmoddi4+0x2a6>
 8000388:	4608      	mov	r0, r1
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e5      	beq.n	800035a <__udivmoddi4+0x9a>
 800038e:	e9c6 4700 	strd	r4, r7, [r6]
 8000392:	e7e2      	b.n	800035a <__udivmoddi4+0x9a>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xd8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f382 	clz	r3, r2
 800039c:	2b00      	cmp	r3, #0
 800039e:	f040 809f 	bne.w	80004e0 <__udivmoddi4+0x220>
 80003a2:	1a8a      	subs	r2, r1, r2
 80003a4:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003a8:	fa1f f78c 	uxth.w	r7, ip
 80003ac:	2101      	movs	r1, #1
 80003ae:	fbb2 f5fe 	udiv	r5, r2, lr
 80003b2:	fb0e 2015 	mls	r0, lr, r5, r2
 80003b6:	0c22      	lsrs	r2, r4, #16
 80003b8:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003bc:	fb07 f005 	mul.w	r0, r7, r5
 80003c0:	4290      	cmp	r0, r2
 80003c2:	d90f      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003c4:	eb1c 0202 	adds.w	r2, ip, r2
 80003c8:	f105 38ff 	add.w	r8, r5, #4294967295
 80003cc:	bf2c      	ite	cs
 80003ce:	f04f 0901 	movcs.w	r9, #1
 80003d2:	f04f 0900 	movcc.w	r9, #0
 80003d6:	4290      	cmp	r0, r2
 80003d8:	d903      	bls.n	80003e2 <__udivmoddi4+0x122>
 80003da:	f1b9 0f00 	cmp.w	r9, #0
 80003de:	f000 80ce 	beq.w	800057e <__udivmoddi4+0x2be>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0fe 	udiv	r0, r2, lr
 80003ec:	fb0e 2210 	mls	r2, lr, r0, r2
 80003f0:	fb00 f707 	mul.w	r7, r0, r7
 80003f4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f8:	42a7      	cmp	r7, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	42a7      	cmp	r7, r4
 8000408:	f200 80b3 	bhi.w	8000572 <__udivmoddi4+0x2b2>
 800040c:	4610      	mov	r0, r2
 800040e:	1be4      	subs	r4, r4, r7
 8000410:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000414:	e79c      	b.n	8000350 <__udivmoddi4+0x90>
 8000416:	f1c1 0420 	rsb	r4, r1, #32
 800041a:	408b      	lsls	r3, r1
 800041c:	fa05 fc01 	lsl.w	ip, r5, r1
 8000420:	fa22 f704 	lsr.w	r7, r2, r4
 8000424:	40e5      	lsrs	r5, r4
 8000426:	408a      	lsls	r2, r1
 8000428:	431f      	orrs	r7, r3
 800042a:	fa20 f304 	lsr.w	r3, r0, r4
 800042e:	4088      	lsls	r0, r1
 8000430:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000440:	fbb5 fef8 	udiv	lr, r5, r8
 8000444:	fb08 551e 	mls	r5, r8, lr, r5
 8000448:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 800044c:	fb0e f90c 	mul.w	r9, lr, ip
 8000450:	45a9      	cmp	r9, r5
 8000452:	d90e      	bls.n	8000472 <__udivmoddi4+0x1b2>
 8000454:	197d      	adds	r5, r7, r5
 8000456:	f10e 3aff 	add.w	sl, lr, #4294967295
 800045a:	bf2c      	ite	cs
 800045c:	f04f 0b01 	movcs.w	fp, #1
 8000460:	f04f 0b00 	movcc.w	fp, #0
 8000464:	45a9      	cmp	r9, r5
 8000466:	d903      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000468:	f1bb 0f00 	cmp.w	fp, #0
 800046c:	f000 808d 	beq.w	800058a <__udivmoddi4+0x2ca>
 8000470:	46d6      	mov	lr, sl
 8000472:	eba5 0509 	sub.w	r5, r5, r9
 8000476:	fa1f f983 	uxth.w	r9, r3
 800047a:	fbb5 f3f8 	udiv	r3, r5, r8
 800047e:	fb08 5513 	mls	r5, r8, r3, r5
 8000482:	fb03 fc0c 	mul.w	ip, r3, ip
 8000486:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 800048a:	45ac      	cmp	ip, r5
 800048c:	d906      	bls.n	800049c <__udivmoddi4+0x1dc>
 800048e:	197d      	adds	r5, r7, r5
 8000490:	f103 38ff 	add.w	r8, r3, #4294967295
 8000494:	d201      	bcs.n	800049a <__udivmoddi4+0x1da>
 8000496:	45ac      	cmp	ip, r5
 8000498:	d87e      	bhi.n	8000598 <__udivmoddi4+0x2d8>
 800049a:	4643      	mov	r3, r8
 800049c:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 80004a0:	eba5 050c 	sub.w	r5, r5, ip
 80004a4:	fba3 9802 	umull	r9, r8, r3, r2
 80004a8:	4545      	cmp	r5, r8
 80004aa:	46ce      	mov	lr, r9
 80004ac:	46c4      	mov	ip, r8
 80004ae:	d302      	bcc.n	80004b6 <__udivmoddi4+0x1f6>
 80004b0:	d106      	bne.n	80004c0 <__udivmoddi4+0x200>
 80004b2:	4548      	cmp	r0, r9
 80004b4:	d204      	bcs.n	80004c0 <__udivmoddi4+0x200>
 80004b6:	3b01      	subs	r3, #1
 80004b8:	ebb9 0e02 	subs.w	lr, r9, r2
 80004bc:	eb68 0c07 	sbc.w	ip, r8, r7
 80004c0:	2e00      	cmp	r6, #0
 80004c2:	d06f      	beq.n	80005a4 <__udivmoddi4+0x2e4>
 80004c4:	ebb0 020e 	subs.w	r2, r0, lr
 80004c8:	eb65 050c 	sbc.w	r5, r5, ip
 80004cc:	40ca      	lsrs	r2, r1
 80004ce:	fa05 f404 	lsl.w	r4, r5, r4
 80004d2:	40cd      	lsrs	r5, r1
 80004d4:	4618      	mov	r0, r3
 80004d6:	4314      	orrs	r4, r2
 80004d8:	2100      	movs	r1, #0
 80004da:	e9c6 4500 	strd	r4, r5, [r6]
 80004de:	e73c      	b.n	800035a <__udivmoddi4+0x9a>
 80004e0:	fa02 fc03 	lsl.w	ip, r2, r3
 80004e4:	f1c3 0220 	rsb	r2, r3, #32
 80004e8:	4099      	lsls	r1, r3
 80004ea:	409c      	lsls	r4, r3
 80004ec:	40d5      	lsrs	r5, r2
 80004ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80004f2:	fa20 f202 	lsr.w	r2, r0, r2
 80004f6:	fa1f f78c 	uxth.w	r7, ip
 80004fa:	fbb5 f0fe 	udiv	r0, r5, lr
 80004fe:	430a      	orrs	r2, r1
 8000500:	fb0e 5510 	mls	r5, lr, r0, r5
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800050a:	fb00 f507 	mul.w	r5, r0, r7
 800050e:	428d      	cmp	r5, r1
 8000510:	d90e      	bls.n	8000530 <__udivmoddi4+0x270>
 8000512:	eb1c 0101 	adds.w	r1, ip, r1
 8000516:	f100 38ff 	add.w	r8, r0, #4294967295
 800051a:	bf2c      	ite	cs
 800051c:	f04f 0901 	movcs.w	r9, #1
 8000520:	f04f 0900 	movcc.w	r9, #0
 8000524:	428d      	cmp	r5, r1
 8000526:	d902      	bls.n	800052e <__udivmoddi4+0x26e>
 8000528:	f1b9 0f00 	cmp.w	r9, #0
 800052c:	d031      	beq.n	8000592 <__udivmoddi4+0x2d2>
 800052e:	4640      	mov	r0, r8
 8000530:	1b49      	subs	r1, r1, r5
 8000532:	b292      	uxth	r2, r2
 8000534:	fbb1 f5fe 	udiv	r5, r1, lr
 8000538:	fb0e 1115 	mls	r1, lr, r5, r1
 800053c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000540:	fb05 f107 	mul.w	r1, r5, r7
 8000544:	4291      	cmp	r1, r2
 8000546:	d907      	bls.n	8000558 <__udivmoddi4+0x298>
 8000548:	eb1c 0202 	adds.w	r2, ip, r2
 800054c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x296>
 8000552:	4291      	cmp	r1, r2
 8000554:	d823      	bhi.n	800059e <__udivmoddi4+0x2de>
 8000556:	4645      	mov	r5, r8
 8000558:	1a52      	subs	r2, r2, r1
 800055a:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800055e:	e726      	b.n	80003ae <__udivmoddi4+0xee>
 8000560:	4631      	mov	r1, r6
 8000562:	4630      	mov	r0, r6
 8000564:	e6f9      	b.n	800035a <__udivmoddi4+0x9a>
 8000566:	1a84      	subs	r4, r0, r2
 8000568:	eb65 0203 	sbc.w	r2, r5, r3
 800056c:	2001      	movs	r0, #1
 800056e:	4617      	mov	r7, r2
 8000570:	e70b      	b.n	800038a <__udivmoddi4+0xca>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e74a      	b.n	800040e <__udivmoddi4+0x14e>
 8000578:	4464      	add	r4, ip
 800057a:	3802      	subs	r0, #2
 800057c:	e6e4      	b.n	8000348 <__udivmoddi4+0x88>
 800057e:	3d02      	subs	r5, #2
 8000580:	4462      	add	r2, ip
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	3902      	subs	r1, #2
 8000586:	4462      	add	r2, ip
 8000588:	e6c9      	b.n	800031e <__udivmoddi4+0x5e>
 800058a:	f1ae 0e02 	sub.w	lr, lr, #2
 800058e:	443d      	add	r5, r7
 8000590:	e76f      	b.n	8000472 <__udivmoddi4+0x1b2>
 8000592:	3802      	subs	r0, #2
 8000594:	4461      	add	r1, ip
 8000596:	e7cb      	b.n	8000530 <__udivmoddi4+0x270>
 8000598:	3b02      	subs	r3, #2
 800059a:	443d      	add	r5, r7
 800059c:	e77e      	b.n	800049c <__udivmoddi4+0x1dc>
 800059e:	3d02      	subs	r5, #2
 80005a0:	4462      	add	r2, ip
 80005a2:	e7d9      	b.n	8000558 <__udivmoddi4+0x298>
 80005a4:	4618      	mov	r0, r3
 80005a6:	4631      	mov	r1, r6
 80005a8:	e6d7      	b.n	800035a <__udivmoddi4+0x9a>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005b4:	4b11      	ldr	r3, [pc, #68]	; (80005fc <HAL_Init+0x4c>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	4a10      	ldr	r2, [pc, #64]	; (80005fc <HAL_Init+0x4c>)
 80005ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005c0:	2003      	movs	r0, #3
 80005c2:	f000 f983 	bl	80008cc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80005c6:	f002 fd8f 	bl	80030e8 <HAL_RCC_GetSysClockFreq>
 80005ca:	4602      	mov	r2, r0
 80005cc:	4b0c      	ldr	r3, [pc, #48]	; (8000600 <HAL_Init+0x50>)
 80005ce:	6a1b      	ldr	r3, [r3, #32]
 80005d0:	f003 030f 	and.w	r3, r3, #15
 80005d4:	490b      	ldr	r1, [pc, #44]	; (8000604 <HAL_Init+0x54>)
 80005d6:	5ccb      	ldrb	r3, [r1, r3]
 80005d8:	fa22 f303 	lsr.w	r3, r2, r3
 80005dc:	4a0a      	ldr	r2, [pc, #40]	; (8000608 <HAL_Init+0x58>)
 80005de:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80005e0:	200f      	movs	r0, #15
 80005e2:	f000 f813 	bl	800060c <HAL_InitTick>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <HAL_Init+0x40>
  {
    return HAL_ERROR;
 80005ec:	2301      	movs	r3, #1
 80005ee:	e002      	b.n	80005f6 <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80005f0:	f008 ff88 	bl	8009504 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005f4:	2300      	movs	r3, #0
}
 80005f6:	4618      	mov	r0, r3
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	40022000 	.word	0x40022000
 8000600:	46020c00 	.word	0x46020c00
 8000604:	0800c3c8 	.word	0x0800c3c8
 8000608:	20000024 	.word	0x20000024

0800060c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8000614:	4b15      	ldr	r3, [pc, #84]	; (800066c <HAL_InitTick+0x60>)
 8000616:	781b      	ldrb	r3, [r3, #0]
 8000618:	2b00      	cmp	r3, #0
 800061a:	d101      	bne.n	8000620 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800061c:	2301      	movs	r3, #1
 800061e:	e021      	b.n	8000664 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000620:	4b13      	ldr	r3, [pc, #76]	; (8000670 <HAL_InitTick+0x64>)
 8000622:	681a      	ldr	r2, [r3, #0]
 8000624:	4b11      	ldr	r3, [pc, #68]	; (800066c <HAL_InitTick+0x60>)
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	4619      	mov	r1, r3
 800062a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800062e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000632:	fbb2 f3f3 	udiv	r3, r2, r3
 8000636:	4618      	mov	r0, r3
 8000638:	f000 f97f 	bl	800093a <HAL_SYSTICK_Config>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8000642:	2301      	movs	r3, #1
 8000644:	e00e      	b.n	8000664 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	2b0f      	cmp	r3, #15
 800064a:	d80a      	bhi.n	8000662 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800064c:	2200      	movs	r2, #0
 800064e:	6879      	ldr	r1, [r7, #4]
 8000650:	f04f 30ff 	mov.w	r0, #4294967295
 8000654:	f000 f945 	bl	80008e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000658:	4a06      	ldr	r2, [pc, #24]	; (8000674 <HAL_InitTick+0x68>)
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800065e:	2300      	movs	r3, #0
 8000660:	e000      	b.n	8000664 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000662:	2301      	movs	r3, #1
}
 8000664:	4618      	mov	r0, r3
 8000666:	3708      	adds	r7, #8
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}
 800066c:	20000004 	.word	0x20000004
 8000670:	20000024 	.word	0x20000024
 8000674:	20000000 	.word	0x20000000

08000678 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800067c:	4b06      	ldr	r3, [pc, #24]	; (8000698 <HAL_IncTick+0x20>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	461a      	mov	r2, r3
 8000682:	4b06      	ldr	r3, [pc, #24]	; (800069c <HAL_IncTick+0x24>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	4413      	add	r3, r2
 8000688:	4a04      	ldr	r2, [pc, #16]	; (800069c <HAL_IncTick+0x24>)
 800068a:	6013      	str	r3, [r2, #0]
}
 800068c:	bf00      	nop
 800068e:	46bd      	mov	sp, r7
 8000690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000694:	4770      	bx	lr
 8000696:	bf00      	nop
 8000698:	20000004 	.word	0x20000004
 800069c:	200000a0 	.word	0x200000a0

080006a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
  return uwTick;
 80006a4:	4b03      	ldr	r3, [pc, #12]	; (80006b4 <HAL_GetTick+0x14>)
 80006a6:	681b      	ldr	r3, [r3, #0]
}
 80006a8:	4618      	mov	r0, r3
 80006aa:	46bd      	mov	sp, r7
 80006ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop
 80006b4:	200000a0 	.word	0x200000a0

080006b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b084      	sub	sp, #16
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80006c0:	f7ff ffee 	bl	80006a0 <HAL_GetTick>
 80006c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006ca:	68fb      	ldr	r3, [r7, #12]
 80006cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006d0:	d005      	beq.n	80006de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80006d2:	4b0a      	ldr	r3, [pc, #40]	; (80006fc <HAL_Delay+0x44>)
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	461a      	mov	r2, r3
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	4413      	add	r3, r2
 80006dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80006de:	bf00      	nop
 80006e0:	f7ff ffde 	bl	80006a0 <HAL_GetTick>
 80006e4:	4602      	mov	r2, r0
 80006e6:	68bb      	ldr	r3, [r7, #8]
 80006e8:	1ad3      	subs	r3, r2, r3
 80006ea:	68fa      	ldr	r2, [r7, #12]
 80006ec:	429a      	cmp	r2, r3
 80006ee:	d8f7      	bhi.n	80006e0 <HAL_Delay+0x28>
  {
  }
}
 80006f0:	bf00      	nop
 80006f2:	bf00      	nop
 80006f4:	3710      	adds	r7, #16
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	20000004 	.word	0x20000004

08000700 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000700:	b480      	push	{r7}
 8000702:	b085      	sub	sp, #20
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	f003 0307 	and.w	r3, r3, #7
 800070e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000710:	4b0c      	ldr	r3, [pc, #48]	; (8000744 <__NVIC_SetPriorityGrouping+0x44>)
 8000712:	68db      	ldr	r3, [r3, #12]
 8000714:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000716:	68ba      	ldr	r2, [r7, #8]
 8000718:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800071c:	4013      	ands	r3, r2
 800071e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000724:	68bb      	ldr	r3, [r7, #8]
 8000726:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000728:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800072c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000730:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000732:	4a04      	ldr	r2, [pc, #16]	; (8000744 <__NVIC_SetPriorityGrouping+0x44>)
 8000734:	68bb      	ldr	r3, [r7, #8]
 8000736:	60d3      	str	r3, [r2, #12]
}
 8000738:	bf00      	nop
 800073a:	3714      	adds	r7, #20
 800073c:	46bd      	mov	sp, r7
 800073e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000742:	4770      	bx	lr
 8000744:	e000ed00 	.word	0xe000ed00

08000748 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800074c:	4b04      	ldr	r3, [pc, #16]	; (8000760 <__NVIC_GetPriorityGrouping+0x18>)
 800074e:	68db      	ldr	r3, [r3, #12]
 8000750:	0a1b      	lsrs	r3, r3, #8
 8000752:	f003 0307 	and.w	r3, r3, #7
}
 8000756:	4618      	mov	r0, r3
 8000758:	46bd      	mov	sp, r7
 800075a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075e:	4770      	bx	lr
 8000760:	e000ed00 	.word	0xe000ed00

08000764 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000764:	b480      	push	{r7}
 8000766:	b083      	sub	sp, #12
 8000768:	af00      	add	r7, sp, #0
 800076a:	4603      	mov	r3, r0
 800076c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800076e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000772:	2b00      	cmp	r3, #0
 8000774:	db0b      	blt.n	800078e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000776:	88fb      	ldrh	r3, [r7, #6]
 8000778:	f003 021f 	and.w	r2, r3, #31
 800077c:	4907      	ldr	r1, [pc, #28]	; (800079c <__NVIC_EnableIRQ+0x38>)
 800077e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000782:	095b      	lsrs	r3, r3, #5
 8000784:	2001      	movs	r0, #1
 8000786:	fa00 f202 	lsl.w	r2, r0, r2
 800078a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800078e:	bf00      	nop
 8000790:	370c      	adds	r7, #12
 8000792:	46bd      	mov	sp, r7
 8000794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000798:	4770      	bx	lr
 800079a:	bf00      	nop
 800079c:	e000e100 	.word	0xe000e100

080007a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007a0:	b480      	push	{r7}
 80007a2:	b083      	sub	sp, #12
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	4603      	mov	r3, r0
 80007a8:	6039      	str	r1, [r7, #0]
 80007aa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80007ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	db0a      	blt.n	80007ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007b4:	683b      	ldr	r3, [r7, #0]
 80007b6:	b2da      	uxtb	r2, r3
 80007b8:	490c      	ldr	r1, [pc, #48]	; (80007ec <__NVIC_SetPriority+0x4c>)
 80007ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80007be:	0112      	lsls	r2, r2, #4
 80007c0:	b2d2      	uxtb	r2, r2
 80007c2:	440b      	add	r3, r1
 80007c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007c8:	e00a      	b.n	80007e0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007ca:	683b      	ldr	r3, [r7, #0]
 80007cc:	b2da      	uxtb	r2, r3
 80007ce:	4908      	ldr	r1, [pc, #32]	; (80007f0 <__NVIC_SetPriority+0x50>)
 80007d0:	88fb      	ldrh	r3, [r7, #6]
 80007d2:	f003 030f 	and.w	r3, r3, #15
 80007d6:	3b04      	subs	r3, #4
 80007d8:	0112      	lsls	r2, r2, #4
 80007da:	b2d2      	uxtb	r2, r2
 80007dc:	440b      	add	r3, r1
 80007de:	761a      	strb	r2, [r3, #24]
}
 80007e0:	bf00      	nop
 80007e2:	370c      	adds	r7, #12
 80007e4:	46bd      	mov	sp, r7
 80007e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ea:	4770      	bx	lr
 80007ec:	e000e100 	.word	0xe000e100
 80007f0:	e000ed00 	.word	0xe000ed00

080007f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007f4:	b480      	push	{r7}
 80007f6:	b089      	sub	sp, #36	; 0x24
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	60f8      	str	r0, [r7, #12]
 80007fc:	60b9      	str	r1, [r7, #8]
 80007fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	f003 0307 	and.w	r3, r3, #7
 8000806:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000808:	69fb      	ldr	r3, [r7, #28]
 800080a:	f1c3 0307 	rsb	r3, r3, #7
 800080e:	2b04      	cmp	r3, #4
 8000810:	bf28      	it	cs
 8000812:	2304      	movcs	r3, #4
 8000814:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000816:	69fb      	ldr	r3, [r7, #28]
 8000818:	3304      	adds	r3, #4
 800081a:	2b06      	cmp	r3, #6
 800081c:	d902      	bls.n	8000824 <NVIC_EncodePriority+0x30>
 800081e:	69fb      	ldr	r3, [r7, #28]
 8000820:	3b03      	subs	r3, #3
 8000822:	e000      	b.n	8000826 <NVIC_EncodePriority+0x32>
 8000824:	2300      	movs	r3, #0
 8000826:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000828:	f04f 32ff 	mov.w	r2, #4294967295
 800082c:	69bb      	ldr	r3, [r7, #24]
 800082e:	fa02 f303 	lsl.w	r3, r2, r3
 8000832:	43da      	mvns	r2, r3
 8000834:	68bb      	ldr	r3, [r7, #8]
 8000836:	401a      	ands	r2, r3
 8000838:	697b      	ldr	r3, [r7, #20]
 800083a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800083c:	f04f 31ff 	mov.w	r1, #4294967295
 8000840:	697b      	ldr	r3, [r7, #20]
 8000842:	fa01 f303 	lsl.w	r3, r1, r3
 8000846:	43d9      	mvns	r1, r3
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800084c:	4313      	orrs	r3, r2
         );
}
 800084e:	4618      	mov	r0, r3
 8000850:	3724      	adds	r7, #36	; 0x24
 8000852:	46bd      	mov	sp, r7
 8000854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000858:	4770      	bx	lr
	...

0800085c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000860:	f3bf 8f4f 	dsb	sy
}
 8000864:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000866:	4b06      	ldr	r3, [pc, #24]	; (8000880 <__NVIC_SystemReset+0x24>)
 8000868:	68db      	ldr	r3, [r3, #12]
 800086a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800086e:	4904      	ldr	r1, [pc, #16]	; (8000880 <__NVIC_SystemReset+0x24>)
 8000870:	4b04      	ldr	r3, [pc, #16]	; (8000884 <__NVIC_SystemReset+0x28>)
 8000872:	4313      	orrs	r3, r2
 8000874:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000876:	f3bf 8f4f 	dsb	sy
}
 800087a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800087c:	bf00      	nop
 800087e:	e7fd      	b.n	800087c <__NVIC_SystemReset+0x20>
 8000880:	e000ed00 	.word	0xe000ed00
 8000884:	05fa0004 	.word	0x05fa0004

08000888 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	3b01      	subs	r3, #1
 8000894:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000898:	d301      	bcc.n	800089e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800089a:	2301      	movs	r3, #1
 800089c:	e00f      	b.n	80008be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800089e:	4a0a      	ldr	r2, [pc, #40]	; (80008c8 <SysTick_Config+0x40>)
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	3b01      	subs	r3, #1
 80008a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008a6:	210f      	movs	r1, #15
 80008a8:	f04f 30ff 	mov.w	r0, #4294967295
 80008ac:	f7ff ff78 	bl	80007a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008b0:	4b05      	ldr	r3, [pc, #20]	; (80008c8 <SysTick_Config+0x40>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008b6:	4b04      	ldr	r3, [pc, #16]	; (80008c8 <SysTick_Config+0x40>)
 80008b8:	2207      	movs	r2, #7
 80008ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008bc:	2300      	movs	r3, #0
}
 80008be:	4618      	mov	r0, r3
 80008c0:	3708      	adds	r7, #8
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	e000e010 	.word	0xe000e010

080008cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008d4:	6878      	ldr	r0, [r7, #4]
 80008d6:	f7ff ff13 	bl	8000700 <__NVIC_SetPriorityGrouping>
}
 80008da:	bf00      	nop
 80008dc:	3708      	adds	r7, #8
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}

080008e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008e2:	b580      	push	{r7, lr}
 80008e4:	b086      	sub	sp, #24
 80008e6:	af00      	add	r7, sp, #0
 80008e8:	4603      	mov	r3, r0
 80008ea:	60b9      	str	r1, [r7, #8]
 80008ec:	607a      	str	r2, [r7, #4]
 80008ee:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80008f0:	f7ff ff2a 	bl	8000748 <__NVIC_GetPriorityGrouping>
 80008f4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008f6:	687a      	ldr	r2, [r7, #4]
 80008f8:	68b9      	ldr	r1, [r7, #8]
 80008fa:	6978      	ldr	r0, [r7, #20]
 80008fc:	f7ff ff7a 	bl	80007f4 <NVIC_EncodePriority>
 8000900:	4602      	mov	r2, r0
 8000902:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000906:	4611      	mov	r1, r2
 8000908:	4618      	mov	r0, r3
 800090a:	f7ff ff49 	bl	80007a0 <__NVIC_SetPriority>
}
 800090e:	bf00      	nop
 8000910:	3718      	adds	r7, #24
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}

08000916 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000916:	b580      	push	{r7, lr}
 8000918:	b082      	sub	sp, #8
 800091a:	af00      	add	r7, sp, #0
 800091c:	4603      	mov	r3, r0
 800091e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000920:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000924:	4618      	mov	r0, r3
 8000926:	f7ff ff1d 	bl	8000764 <__NVIC_EnableIRQ>
}
 800092a:	bf00      	nop
 800092c:	3708      	adds	r7, #8
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}

08000932 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8000932:	b580      	push	{r7, lr}
 8000934:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8000936:	f7ff ff91 	bl	800085c <__NVIC_SystemReset>

0800093a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800093a:	b580      	push	{r7, lr}
 800093c:	b082      	sub	sp, #8
 800093e:	af00      	add	r7, sp, #0
 8000940:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000942:	6878      	ldr	r0, [r7, #4]
 8000944:	f7ff ffa0 	bl	8000888 <SysTick_Config>
 8000948:	4603      	mov	r3, r0
}
 800094a:	4618      	mov	r0, r3
 800094c:	3708      	adds	r7, #8
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}

08000952 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 8000952:	b580      	push	{r7, lr}
 8000954:	b084      	sub	sp, #16
 8000956:	af00      	add	r7, sp, #0
 8000958:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 800095a:	f7ff fea1 	bl	80006a0 <HAL_GetTick>
 800095e:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	2b00      	cmp	r3, #0
 8000964:	d101      	bne.n	800096a <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8000966:	2301      	movs	r3, #1
 8000968:	e06b      	b.n	8000a42 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8000970:	b2db      	uxtb	r3, r3
 8000972:	2b02      	cmp	r3, #2
 8000974:	d008      	beq.n	8000988 <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	2220      	movs	r2, #32
 800097a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	2200      	movs	r2, #0
 8000980:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    return HAL_ERROR;
 8000984:	2301      	movs	r3, #1
 8000986:	e05c      	b.n	8000a42 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	695a      	ldr	r2, [r3, #20]
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	f042 0204 	orr.w	r2, r2, #4
 8000996:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	2205      	movs	r2, #5
 800099c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 80009a0:	e020      	b.n	80009e4 <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 80009a2:	f7ff fe7d 	bl	80006a0 <HAL_GetTick>
 80009a6:	4602      	mov	r2, r0
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	1ad3      	subs	r3, r2, r3
 80009ac:	2b05      	cmp	r3, #5
 80009ae:	d919      	bls.n	80009e4 <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009b4:	f043 0210 	orr.w	r2, r3, #16
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	659a      	str	r2, [r3, #88]	; 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	2203      	movs	r2, #3
 80009c0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80009c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d003      	beq.n	80009d8 <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80009d4:	2201      	movs	r2, #1
 80009d6:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	2200      	movs	r2, #0
 80009dc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        return HAL_ERROR;
 80009e0:	2301      	movs	r3, #1
 80009e2:	e02e      	b.n	8000a42 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	691b      	ldr	r3, [r3, #16]
 80009ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d0d7      	beq.n	80009a2 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	695a      	ldr	r2, [r3, #20]
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	f042 0202 	orr.w	r2, r2, #2
 8000a00:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	2204      	movs	r2, #4
 8000a06:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 8000a12:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	2201      	movs	r2, #1
 8000a18:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000a20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d007      	beq.n	8000a38 <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	2200      	movs	r2, #0
 8000a36:	649a      	str	r2, [r3, #72]	; 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8000a40:	2300      	movs	r3, #0
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	3710      	adds	r7, #16
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}

08000a4a <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 8000a4a:	b480      	push	{r7}
 8000a4c:	b083      	sub	sp, #12
 8000a4e:	af00      	add	r7, sp, #0
 8000a50:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d101      	bne.n	8000a5c <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	e019      	b.n	8000a90 <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8000a62:	b2db      	uxtb	r3, r3
 8000a64:	2b02      	cmp	r3, #2
 8000a66:	d004      	beq.n	8000a72 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	2220      	movs	r2, #32
 8000a6c:	659a      	str	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8000a6e:	2301      	movs	r3, #1
 8000a70:	e00e      	b.n	8000a90 <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	2204      	movs	r2, #4
 8000a76:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	695b      	ldr	r3, [r3, #20]
 8000a80:	687a      	ldr	r2, [r7, #4]
 8000a82:	6812      	ldr	r2, [r2, #0]
 8000a84:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000a88:	f043 0304 	orr.w	r3, r3, #4
 8000a8c:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 8000a8e:	2300      	movs	r3, #0
}
 8000a90:	4618      	mov	r0, r3
 8000a92:	370c      	adds	r7, #12
 8000a94:	46bd      	mov	sp, r7
 8000a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9a:	4770      	bx	lr

08000a9c <HAL_FLASH_Program>:
  *         This parameter shall be 32-bit aligned
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint32_t DataAddress)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b086      	sub	sp, #24
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	60f8      	str	r0, [r7, #12]
 8000aa4:	60b9      	str	r1, [r7, #8]
 8000aa6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000aa8:	4b1f      	ldr	r3, [pc, #124]	; (8000b28 <HAL_FLASH_Program+0x8c>)
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	2b01      	cmp	r3, #1
 8000aae:	d101      	bne.n	8000ab4 <HAL_FLASH_Program+0x18>
 8000ab0:	2302      	movs	r3, #2
 8000ab2:	e034      	b.n	8000b1e <HAL_FLASH_Program+0x82>
 8000ab4:	4b1c      	ldr	r3, [pc, #112]	; (8000b28 <HAL_FLASH_Program+0x8c>)
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000aba:	4b1b      	ldr	r3, [pc, #108]	; (8000b28 <HAL_FLASH_Program+0x8c>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000ac0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ac4:	f000 f870 	bl	8000ba8 <FLASH_WaitForLastOperation>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8000acc:	7dfb      	ldrb	r3, [r7, #23]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d121      	bne.n	8000b16 <HAL_FLASH_Program+0x7a>
  {
    /* Set current operation type */
    pFlash.ProcedureOnGoing = TypeProgram;
 8000ad2:	4a15      	ldr	r2, [pc, #84]	; (8000b28 <HAL_FLASH_Program+0x8c>)
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	6093      	str	r3, [r2, #8]

    /* Access to SECCR or NSCR depends on operation type */
    reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 8000ad8:	4b14      	ldr	r3, [pc, #80]	; (8000b2c <HAL_FLASH_Program+0x90>)
 8000ada:	613b      	str	r3, [r7, #16]

    if ((TypeProgram & (~FLASH_NON_SECURE_MASK)) == FLASH_TYPEPROGRAM_QUADWORD)
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000ae2:	2b01      	cmp	r3, #1
 8000ae4:	d104      	bne.n	8000af0 <HAL_FLASH_Program+0x54>
    {
      /* Program a quad-word (128-bit) at a specified address */
      FLASH_Program_QuadWord(Address, DataAddress);
 8000ae6:	6879      	ldr	r1, [r7, #4]
 8000ae8:	68b8      	ldr	r0, [r7, #8]
 8000aea:	f000 f8a3 	bl	8000c34 <FLASH_Program_QuadWord>
 8000aee:	e003      	b.n	8000af8 <HAL_FLASH_Program+0x5c>
    }
    else
    {
      /* Program a burst of 8 quad-words at a specified address */
      FLASH_Program_Burst(Address, DataAddress);
 8000af0:	6879      	ldr	r1, [r7, #4]
 8000af2:	68b8      	ldr	r0, [r7, #8]
 8000af4:	f000 f8da 	bl	8000cac <FLASH_Program_Burst>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000af8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000afc:	f000 f854 	bl	8000ba8 <FLASH_WaitForLastOperation>
 8000b00:	4603      	mov	r3, r0
 8000b02:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG (and BWR Bit in Burst programming mode) */
    CLEAR_BIT((*reg_cr), (TypeProgram & ~(FLASH_NON_SECURE_MASK)));
 8000b04:	693b      	ldr	r3, [r7, #16]
 8000b06:	681a      	ldr	r2, [r3, #0]
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000b0e:	43db      	mvns	r3, r3
 8000b10:	401a      	ands	r2, r3
 8000b12:	693b      	ldr	r3, [r7, #16]
 8000b14:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000b16:	4b04      	ldr	r3, [pc, #16]	; (8000b28 <HAL_FLASH_Program+0x8c>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8000b1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	3718      	adds	r7, #24
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	20000008 	.word	0x20000008
 8000b2c:	40022028 	.word	0x40022028

08000b30 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b083      	sub	sp, #12
 8000b34:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8000b36:	2300      	movs	r3, #0
 8000b38:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->NSCR, FLASH_NSCR_LOCK) != 0U)
 8000b3a:	4b0b      	ldr	r3, [pc, #44]	; (8000b68 <HAL_FLASH_Unlock+0x38>)
 8000b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	da0b      	bge.n	8000b5a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->NSKEYR, FLASH_KEY1);
 8000b42:	4b09      	ldr	r3, [pc, #36]	; (8000b68 <HAL_FLASH_Unlock+0x38>)
 8000b44:	4a09      	ldr	r2, [pc, #36]	; (8000b6c <HAL_FLASH_Unlock+0x3c>)
 8000b46:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->NSKEYR, FLASH_KEY2);
 8000b48:	4b07      	ldr	r3, [pc, #28]	; (8000b68 <HAL_FLASH_Unlock+0x38>)
 8000b4a:	4a09      	ldr	r2, [pc, #36]	; (8000b70 <HAL_FLASH_Unlock+0x40>)
 8000b4c:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlocked */
    if (READ_BIT(FLASH->NSCR, FLASH_NSCR_LOCK) != 0U)
 8000b4e:	4b06      	ldr	r3, [pc, #24]	; (8000b68 <HAL_FLASH_Unlock+0x38>)
 8000b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	da01      	bge.n	8000b5a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8000b56:	2301      	movs	r3, #1
 8000b58:	71fb      	strb	r3, [r7, #7]
      }
    }
  }
#endif /* __ARM_FEATURE_CMSE */

  return status;
 8000b5a:	79fb      	ldrb	r3, [r7, #7]
}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	370c      	adds	r7, #12
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	4770      	bx	lr
 8000b68:	40022000 	.word	0x40022000
 8000b6c:	45670123 	.word	0x45670123
 8000b70:	cdef89ab 	.word	0xcdef89ab

08000b74 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b083      	sub	sp, #12
 8000b78:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->NSCR, FLASH_NSCR_LOCK);
 8000b7e:	4b09      	ldr	r3, [pc, #36]	; (8000ba4 <HAL_FLASH_Lock+0x30>)
 8000b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b82:	4a08      	ldr	r2, [pc, #32]	; (8000ba4 <HAL_FLASH_Lock+0x30>)
 8000b84:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b88:	6293      	str	r3, [r2, #40]	; 0x28

  /* verify Flash is locked */
  if (READ_BIT(FLASH->NSCR, FLASH_NSCR_LOCK) != 0U)
 8000b8a:	4b06      	ldr	r3, [pc, #24]	; (8000ba4 <HAL_FLASH_Lock+0x30>)
 8000b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	da01      	bge.n	8000b96 <HAL_FLASH_Lock+0x22>
  {
    status = HAL_OK;
 8000b92:	2300      	movs	r3, #0
 8000b94:	71fb      	strb	r3, [r7, #7]
      status = HAL_OK;
    }
  }
#endif /* __ARM_FEATURE_CMSE */

  return status;
 8000b96:	79fb      	ldrb	r3, [r7, #7]
}
 8000b98:	4618      	mov	r0, r3
 8000b9a:	370c      	adds	r7, #12
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba2:	4770      	bx	lr
 8000ba4:	40022000 	.word	0x40022000

08000ba8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b086      	sub	sp, #24
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY and WDW flags to be reset.
     Even if the FLASH operation fails, the BUSY & WDW flags will be reset, and an error flag will be set */

  uint32_t timeout = HAL_GetTick() + Timeout;
 8000bb0:	f7ff fd76 	bl	80006a0 <HAL_GetTick>
 8000bb4:	4602      	mov	r2, r0
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	4413      	add	r3, r2
 8000bba:	617b      	str	r3, [r7, #20]
  uint32_t error;
  __IO uint32_t *reg_sr;

  /* Access to SECSR or NSSR registers depends on operation type */
  reg_sr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECSR) : &(FLASH_NS->NSSR);
 8000bbc:	4b1b      	ldr	r3, [pc, #108]	; (8000c2c <FLASH_WaitForLastOperation+0x84>)
 8000bbe:	613b      	str	r3, [r7, #16]

  while (((*reg_sr) & (FLASH_FLAG_BSY | FLASH_FLAG_WDW)) != 0U)
 8000bc0:	e00b      	b.n	8000bda <FLASH_WaitForLastOperation+0x32>
  {
    if (Timeout != HAL_MAX_DELAY)
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bc8:	d007      	beq.n	8000bda <FLASH_WaitForLastOperation+0x32>
    {
      if (HAL_GetTick() >= timeout)
 8000bca:	f7ff fd69 	bl	80006a0 <HAL_GetTick>
 8000bce:	4602      	mov	r2, r0
 8000bd0:	697b      	ldr	r3, [r7, #20]
 8000bd2:	4293      	cmp	r3, r2
 8000bd4:	d801      	bhi.n	8000bda <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8000bd6:	2303      	movs	r3, #3
 8000bd8:	e023      	b.n	8000c22 <FLASH_WaitForLastOperation+0x7a>
  while (((*reg_sr) & (FLASH_FLAG_BSY | FLASH_FLAG_WDW)) != 0U)
 8000bda:	693b      	ldr	r3, [r7, #16]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d1ed      	bne.n	8000bc2 <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Check FLASH operation error flags */
  error = ((*reg_sr) & FLASH_FLAG_SR_ERRORS);
 8000be6:	693b      	ldr	r3, [r7, #16]
 8000be8:	681a      	ldr	r2, [r3, #0]
 8000bea:	f242 03fa 	movw	r3, #8442	; 0x20fa
 8000bee:	4013      	ands	r3, r2
 8000bf0:	60fb      	str	r3, [r7, #12]
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  error |= (FLASH->NSSR & FLASH_FLAG_OPTWERR);
#endif /* __ARM_FEATURE_CMSE */

  if (error != 0U)
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d00a      	beq.n	8000c0e <FLASH_WaitForLastOperation+0x66>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 8000bf8:	4b0d      	ldr	r3, [pc, #52]	; (8000c30 <FLASH_WaitForLastOperation+0x88>)
 8000bfa:	685a      	ldr	r2, [r3, #4]
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	4313      	orrs	r3, r2
 8000c00:	4a0b      	ldr	r2, [pc, #44]	; (8000c30 <FLASH_WaitForLastOperation+0x88>)
 8000c02:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    (*reg_sr) = error;
 8000c04:	693b      	ldr	r3, [r7, #16]
 8000c06:	68fa      	ldr	r2, [r7, #12]
 8000c08:	601a      	str	r2, [r3, #0]
    {
      FLASH->NSSR = FLASH_FLAG_OPTWERR;
    }
#endif /* __ARM_FEATURE_CMSE */

    return HAL_ERROR;
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	e009      	b.n	8000c22 <FLASH_WaitForLastOperation+0x7a>
  }

  /* Check FLASH End of Operation flag  */
  if (((*reg_sr) & FLASH_FLAG_EOP) != 0U)
 8000c0e:	693b      	ldr	r3, [r7, #16]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	f003 0301 	and.w	r3, r3, #1
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d002      	beq.n	8000c20 <FLASH_WaitForLastOperation+0x78>
  {
    /* Clear FLASH End of Operation pending bit */
    (*reg_sr) = FLASH_FLAG_EOP;
 8000c1a:	693b      	ldr	r3, [r7, #16]
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	601a      	str	r2, [r3, #0]
  }

  /* If there is no error flag set */
  return HAL_OK;
 8000c20:	2300      	movs	r3, #0
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	3718      	adds	r7, #24
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	40022020 	.word	0x40022020
 8000c30:	20000008 	.word	0x20000008

08000c34 <FLASH_Program_QuadWord>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address of data to be programmed.
  * @retval None
  */
static void FLASH_Program_QuadWord(uint32_t Address, uint32_t DataAddress)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b08b      	sub	sp, #44	; 0x2c
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
 8000c3c:	6039      	str	r1, [r7, #0]
  uint8_t index = 4;
 8000c3e:	2304      	movs	r3, #4
 8000c40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t *dest_addr = (uint32_t *)Address;
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	623b      	str	r3, [r7, #32]
  uint32_t *src_addr  = (uint32_t *)DataAddress;
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Access to SECCR or NSCR registers depends on operation type */
  reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 8000c4c:	4b16      	ldr	r3, [pc, #88]	; (8000ca8 <FLASH_Program_QuadWord+0x74>)
 8000c4e:	61bb      	str	r3, [r7, #24]

  /* Set PG bit */
  SET_BIT((*reg_cr), FLASH_NSCR_PG);
 8000c50:	69bb      	ldr	r3, [r7, #24]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	f043 0201 	orr.w	r2, r3, #1
 8000c58:	69bb      	ldr	r3, [r7, #24]
 8000c5a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000c5c:	f3ef 8310 	mrs	r3, PRIMASK
 8000c60:	613b      	str	r3, [r7, #16]
  return(result);
 8000c62:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 8000c64:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8000c66:	b672      	cpsid	i
}
 8000c68:	bf00      	nop
  __disable_irq();

  /* Program the quad-word */
  do
  {
    *dest_addr = *src_addr;
 8000c6a:	69fb      	ldr	r3, [r7, #28]
 8000c6c:	681a      	ldr	r2, [r3, #0]
 8000c6e:	6a3b      	ldr	r3, [r7, #32]
 8000c70:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8000c72:	6a3b      	ldr	r3, [r7, #32]
 8000c74:	3304      	adds	r3, #4
 8000c76:	623b      	str	r3, [r7, #32]
    src_addr++;
 8000c78:	69fb      	ldr	r3, [r7, #28]
 8000c7a:	3304      	adds	r3, #4
 8000c7c:	61fb      	str	r3, [r7, #28]
    index--;
 8000c7e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000c82:	3b01      	subs	r3, #1
 8000c84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  } while (index != 0U);
 8000c88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d1ec      	bne.n	8000c6a <FLASH_Program_QuadWord+0x36>
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	f383 8810 	msr	PRIMASK, r3
}
 8000c9a:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8000c9c:	bf00      	nop
 8000c9e:	372c      	adds	r7, #44	; 0x2c
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr
 8000ca8:	40022028 	.word	0x40022028

08000cac <FLASH_Program_Burst>:
  * @param  Address: specifies the address to be programmed.
  * @param  DataAddress: specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Burst(uint32_t Address, uint32_t DataAddress)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b08b      	sub	sp, #44	; 0x2c
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
 8000cb4:	6039      	str	r1, [r7, #0]
  uint8_t burst_index = FLASH_NB_WORDS_IN_BURST;
 8000cb6:	2320      	movs	r3, #32
 8000cb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t *dest_addr = (uint32_t *)Address;
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	623b      	str	r3, [r7, #32]
  uint32_t *src_addr = (uint32_t *)DataAddress;
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Access to SECCR or NSCR registers depends on operation type */
  reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 8000cc4:	4b17      	ldr	r3, [pc, #92]	; (8000d24 <FLASH_Program_Burst+0x78>)
 8000cc6:	61bb      	str	r3, [r7, #24]

  /* Set PG and BWR bits */
  SET_BIT((*reg_cr), (FLASH_NSCR_PG | FLASH_NSCR_BWR));
 8000cc8:	69bb      	ldr	r3, [r7, #24]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cd0:	f043 0301 	orr.w	r3, r3, #1
 8000cd4:	69ba      	ldr	r2, [r7, #24]
 8000cd6:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000cd8:	f3ef 8310 	mrs	r3, PRIMASK
 8000cdc:	613b      	str	r3, [r7, #16]
  return(result);
 8000cde:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 8000ce0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8000ce2:	b672      	cpsid	i
}
 8000ce4:	bf00      	nop
  __disable_irq();

  /* Program the burst */
  do
  {
    *dest_addr = *src_addr;
 8000ce6:	69fb      	ldr	r3, [r7, #28]
 8000ce8:	681a      	ldr	r2, [r3, #0]
 8000cea:	6a3b      	ldr	r3, [r7, #32]
 8000cec:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8000cee:	6a3b      	ldr	r3, [r7, #32]
 8000cf0:	3304      	adds	r3, #4
 8000cf2:	623b      	str	r3, [r7, #32]
    src_addr++;
 8000cf4:	69fb      	ldr	r3, [r7, #28]
 8000cf6:	3304      	adds	r3, #4
 8000cf8:	61fb      	str	r3, [r7, #28]
    burst_index--;
 8000cfa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000cfe:	3b01      	subs	r3, #1
 8000d00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  } while (burst_index != 0U);
 8000d04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d1ec      	bne.n	8000ce6 <FLASH_Program_Burst+0x3a>
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	f383 8810 	msr	PRIMASK, r3
}
 8000d16:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8000d18:	bf00      	nop
 8000d1a:	372c      	adds	r7, #44	; 0x2c
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr
 8000d24:	40022028 	.word	0x40022028

08000d28 <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased).
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b086      	sub	sp, #24
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
 8000d30:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000d32:	4b33      	ldr	r3, [pc, #204]	; (8000e00 <HAL_FLASHEx_Erase+0xd8>)
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	2b01      	cmp	r3, #1
 8000d38:	d101      	bne.n	8000d3e <HAL_FLASHEx_Erase+0x16>
 8000d3a:	2302      	movs	r3, #2
 8000d3c:	e05c      	b.n	8000df8 <HAL_FLASHEx_Erase+0xd0>
 8000d3e:	4b30      	ldr	r3, [pc, #192]	; (8000e00 <HAL_FLASHEx_Erase+0xd8>)
 8000d40:	2201      	movs	r2, #1
 8000d42:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000d44:	4b2e      	ldr	r3, [pc, #184]	; (8000e00 <HAL_FLASHEx_Erase+0xd8>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000d4a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d4e:	f7ff ff2b 	bl	8000ba8 <FLASH_WaitForLastOperation>
 8000d52:	4603      	mov	r3, r0
 8000d54:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8000d56:	7dfb      	ldrb	r3, [r7, #23]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d149      	bne.n	8000df0 <HAL_FLASHEx_Erase+0xc8>
  {
    /* Current operation type */
    pFlash.ProcedureOnGoing = pEraseInit->TypeErase;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a27      	ldr	r2, [pc, #156]	; (8000e00 <HAL_FLASHEx_Erase+0xd8>)
 8000d62:	6093      	str	r3, [r2, #8]

    /* Access to SECCR or NSCR depends on operation type */
    reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH->NSCR);
 8000d64:	4b27      	ldr	r3, [pc, #156]	; (8000e04 <HAL_FLASHEx_Erase+0xdc>)
 8000d66:	60fb      	str	r3, [r7, #12]

    if ((pEraseInit->TypeErase & (~FLASH_NON_SECURE_MASK)) == FLASH_TYPEERASE_MASSERASE)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000d70:	f248 0204 	movw	r2, #32772	; 0x8004
 8000d74:	4293      	cmp	r3, r2
 8000d76:	d10b      	bne.n	8000d90 <HAL_FLASHEx_Erase+0x68>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	685b      	ldr	r3, [r3, #4]
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f000 f891 	bl	8000ea4 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000d82:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d86:	f7ff ff0f 	bl	8000ba8 <FLASH_WaitForLastOperation>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	75fb      	strb	r3, [r7, #23]
 8000d8e:	e025      	b.n	8000ddc <HAL_FLASHEx_Erase+0xb4>
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	f04f 32ff 	mov.w	r2, #4294967295
 8000d96:	601a      	str	r2, [r3, #0]

      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	689b      	ldr	r3, [r3, #8]
 8000d9c:	613b      	str	r3, [r7, #16]
 8000d9e:	e015      	b.n	8000dcc <HAL_FLASHEx_Erase+0xa4>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	4619      	mov	r1, r3
 8000da6:	6938      	ldr	r0, [r7, #16]
 8000da8:	f000 f8a2 	bl	8000ef0 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000dac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000db0:	f7ff fefa 	bl	8000ba8 <FLASH_WaitForLastOperation>
 8000db4:	4603      	mov	r3, r0
 8000db6:	75fb      	strb	r3, [r7, #23]

        if (status != HAL_OK)
 8000db8:	7dfb      	ldrb	r3, [r7, #23]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d003      	beq.n	8000dc6 <HAL_FLASHEx_Erase+0x9e>
        {
          /* In case of error, stop erase procedure and return the faulty page */
          *PageError = page_index;
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	693a      	ldr	r2, [r7, #16]
 8000dc2:	601a      	str	r2, [r3, #0]
          break;
 8000dc4:	e00a      	b.n	8000ddc <HAL_FLASHEx_Erase+0xb4>
      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8000dc6:	693b      	ldr	r3, [r7, #16]
 8000dc8:	3301      	adds	r3, #1
 8000dca:	613b      	str	r3, [r7, #16]
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	689a      	ldr	r2, [r3, #8]
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	68db      	ldr	r3, [r3, #12]
 8000dd4:	4413      	add	r3, r2
 8000dd6:	693a      	ldr	r2, [r7, #16]
 8000dd8:	429a      	cmp	r2, r3
 8000dda:	d3e1      	bcc.n	8000da0 <HAL_FLASHEx_Erase+0x78>
        }
      }
    }

    /* If the erase operation is completed, disable the associated bits */
    CLEAR_BIT((*reg_cr), (pEraseInit->TypeErase) & (~(FLASH_NON_SECURE_MASK)));
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	681a      	ldr	r2, [r3, #0]
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000de8:	43db      	mvns	r3, r3
 8000dea:	401a      	ands	r2, r3
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000df0:	4b03      	ldr	r3, [pc, #12]	; (8000e00 <HAL_FLASHEx_Erase+0xd8>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	701a      	strb	r2, [r3, #0]

  return status;
 8000df6:	7dfb      	ldrb	r3, [r7, #23]
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	3718      	adds	r7, #24
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	20000008 	.word	0x20000008
 8000e04:	40022028 	.word	0x40022028

08000e08 <HAL_FLASHEx_OBGetConfig>:
  *         Boot Address, else no information will be returned
  *
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  pOBInit->OptionType = (OPTIONBYTE_RDP | OPTIONBYTE_USER);
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	2206      	movs	r2, #6
 8000e14:	601a      	str	r2, [r3, #0]

  if ((pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAB) ||
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	2b01      	cmp	r3, #1
 8000e1c:	d00b      	beq.n	8000e36 <HAL_FLASHEx_OBGetConfig+0x2e>
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	2b02      	cmp	r3, #2
 8000e24:	d007      	beq.n	8000e36 <HAL_FLASHEx_OBGetConfig+0x2e>
      (pOBInit->WRPArea == OB_WRPAREA_BANK2_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK2_AREAB))
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	685b      	ldr	r3, [r3, #4]
  if ((pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAB) ||
 8000e2a:	2b04      	cmp	r3, #4
 8000e2c:	d003      	beq.n	8000e36 <HAL_FLASHEx_OBGetConfig+0x2e>
      (pOBInit->WRPArea == OB_WRPAREA_BANK2_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK2_AREAB))
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	2b08      	cmp	r3, #8
 8000e34:	d111      	bne.n	8000e5a <HAL_FLASHEx_OBGetConfig+0x52>
  {
    pOBInit->OptionType |= OPTIONBYTE_WRP;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f043 0201 	orr.w	r2, r3, #1
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	601a      	str	r2, [r3, #0]
    /* Get write protection on the selected area */
    FLASH_OB_GetWRP(pOBInit->WRPArea, &(pOBInit->WRPStartOffset), &(pOBInit->WRPEndOffset), &(pOBInit->WRPLock));
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	6858      	ldr	r0, [r3, #4]
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	f103 0108 	add.w	r1, r3, #8
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	f103 020c 	add.w	r2, r3, #12
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	3310      	adds	r3, #16
 8000e56:	f000 f87b 	bl	8000f50 <FLASH_OB_GetWRP>
  }

  /* Get Read protection level */
  pOBInit->RDPLevel = FLASH_OB_GetRDP();
 8000e5a:	f000 f8e3 	bl	8001024 <FLASH_OB_GetRDP>
 8000e5e:	4602      	mov	r2, r0
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	615a      	str	r2, [r3, #20]

  /* Get the user option bytes */
  pOBInit->USERConfig = FLASH_OB_GetUser();
 8000e64:	f000 f8fa 	bl	800105c <FLASH_OB_GetUser>
 8000e68:	4602      	mov	r2, r0
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	61da      	str	r2, [r3, #28]
  /* Get the value of the selected boot address */
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((pOBInit->BootAddrConfig == OB_BOOTADDR_NS0) || (pOBInit->BootAddrConfig == OB_BOOTADDR_NS1) ||
      (pOBInit->BootAddrConfig == OB_BOOTADDR_SEC0))
#else
  if ((pOBInit->BootAddrConfig == OB_BOOTADDR_NS0) || (pOBInit->BootAddrConfig == OB_BOOTADDR_NS1))
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	6a1b      	ldr	r3, [r3, #32]
 8000e72:	2b01      	cmp	r3, #1
 8000e74:	d003      	beq.n	8000e7e <HAL_FLASHEx_OBGetConfig+0x76>
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	6a1b      	ldr	r3, [r3, #32]
 8000e7a:	2b02      	cmp	r3, #2
 8000e7c:	d10d      	bne.n	8000e9a <HAL_FLASHEx_OBGetConfig+0x92>
#endif /* __ARM_FEATURE_CMSE */
  {
    pOBInit->OptionType |= OPTIONBYTE_BOOTADDR;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f043 0208 	orr.w	r2, r3, #8
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	601a      	str	r2, [r3, #0]
    FLASH_OB_GetBootAddr(pOBInit->BootAddrConfig, &(pOBInit->BootAddr));
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	6a1a      	ldr	r2, [r3, #32]
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	3324      	adds	r3, #36	; 0x24
 8000e92:	4619      	mov	r1, r3
 8000e94:	4610      	mov	r0, r2
 8000e96:	f000 f8f5 	bl	8001084 <FLASH_OB_GetBootAddr>
  }
}
 8000e9a:	bf00      	nop
 8000e9c:	3708      	adds	r7, #8
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
	...

08000ea4 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b085      	sub	sp, #20
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Access to SECCR or NSCR registers depends on operation type */
  reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 8000eac:	4b0f      	ldr	r3, [pc, #60]	; (8000eec <FLASH_MassErase+0x48>)
 8000eae:	60fb      	str	r3, [r7, #12]

  /* Set the Mass Erase Bit for the bank 1 and proceed to erase */
  if ((Banks & FLASH_BANK_1) != 0U)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	f003 0301 	and.w	r3, r3, #1
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d007      	beq.n	8000eca <FLASH_MassErase+0x26>
  {
    SET_BIT((*reg_cr), FLASH_NSCR_MER1 | FLASH_NSCR_STRT);
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ec2:	f043 0304 	orr.w	r3, r3, #4
 8000ec6:	68fa      	ldr	r2, [r7, #12]
 8000ec8:	6013      	str	r3, [r2, #0]
  }

  /* Set the Mass Erase Bit for the bank 2 and proceed to erase */
  if ((Banks & FLASH_BANK_2) != 0U)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	f003 0302 	and.w	r3, r3, #2
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d005      	beq.n	8000ee0 <FLASH_MassErase+0x3c>
  {
    SET_BIT((*reg_cr), FLASH_NSCR_MER2 | FLASH_NSCR_STRT);
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f443 32c0 	orr.w	r2, r3, #98304	; 0x18000
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	601a      	str	r2, [r3, #0]
  }
}
 8000ee0:	bf00      	nop
 8000ee2:	3714      	adds	r7, #20
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr
 8000eec:	40022028 	.word	0x40022028

08000ef0 <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b085      	sub	sp, #20
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
 8000ef8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_PAGE(Page));
  assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

  /* Access to SECCR or NSCR registers depends on operation type */
  reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 8000efa:	4b14      	ldr	r3, [pc, #80]	; (8000f4c <FLASH_PageErase+0x5c>)
 8000efc:	60fb      	str	r3, [r7, #12]

  if ((Banks & FLASH_BANK_1) != 0U)
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	f003 0301 	and.w	r3, r3, #1
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d006      	beq.n	8000f16 <FLASH_PageErase+0x26>
  {
    CLEAR_BIT((*reg_cr), FLASH_NSCR_BKER);
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	601a      	str	r2, [r3, #0]
 8000f14:	e005      	b.n	8000f22 <FLASH_PageErase+0x32>
  }
  else
  {
    SET_BIT((*reg_cr), FLASH_NSCR_BKER);
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	601a      	str	r2, [r3, #0]
  }

  /* Proceed to erase the page */
  MODIFY_REG((*reg_cr), (FLASH_NSCR_PNB | FLASH_NSCR_PER | FLASH_NSCR_STRT), \
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f423 3383 	bic.w	r3, r3, #67072	; 0x10600
 8000f2a:	f423 73fd 	bic.w	r3, r3, #506	; 0x1fa
 8000f2e:	687a      	ldr	r2, [r7, #4]
 8000f30:	00d2      	lsls	r2, r2, #3
 8000f32:	4313      	orrs	r3, r2
 8000f34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f38:	f043 0302 	orr.w	r3, r3, #2
 8000f3c:	68fa      	ldr	r2, [r7, #12]
 8000f3e:	6013      	str	r3, [r2, #0]
             ((Page << FLASH_NSCR_PNB_Pos) | FLASH_NSCR_PER | FLASH_NSCR_STRT));
}
 8000f40:	bf00      	nop
 8000f42:	3714      	adds	r7, #20
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr
 8000f4c:	40022028 	.word	0x40022028

08000f50 <FLASH_OB_GetWRP>:
  *
  * @retval None
  */
static void FLASH_OB_GetWRP(uint32_t WRPArea, uint32_t *WRPStartOffset, uint32_t *WRPEndOffset,
                            FunctionalState *WRPLock)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b085      	sub	sp, #20
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	60f8      	str	r0, [r7, #12]
 8000f58:	60b9      	str	r1, [r7, #8]
 8000f5a:	607a      	str	r2, [r7, #4]
 8000f5c:	603b      	str	r3, [r7, #0]
  /* Get the configuration of the write protected area */
  if (WRPArea == OB_WRPAREA_BANK1_AREAA)
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	2b01      	cmp	r3, #1
 8000f62:	d113      	bne.n	8000f8c <FLASH_OB_GetWRP+0x3c>
  {
    *WRPStartOffset = READ_BIT(FLASH->WRP1AR, FLASH_WRP1AR_WRP1A_PSTRT);
 8000f64:	4b2e      	ldr	r3, [pc, #184]	; (8001020 <FLASH_OB_GetWRP+0xd0>)
 8000f66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f68:	b2da      	uxtb	r2, r3
 8000f6a:	68bb      	ldr	r3, [r7, #8]
 8000f6c:	601a      	str	r2, [r3, #0]
    *WRPEndOffset = (READ_BIT(FLASH->WRP1AR, FLASH_WRP1AR_WRP1A_PEND) >> FLASH_WRP1AR_WRP1A_PEND_Pos);
 8000f6e:	4b2c      	ldr	r3, [pc, #176]	; (8001020 <FLASH_OB_GetWRP+0xd0>)
 8000f70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f72:	0c1b      	lsrs	r3, r3, #16
 8000f74:	b2da      	uxtb	r2, r3
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	601a      	str	r2, [r3, #0]
    *WRPLock = (READ_BIT(FLASH->WRP1AR, FLASH_WRP1AR_UNLOCK) != 0U) ? DISABLE : ENABLE;
 8000f7a:	4b29      	ldr	r3, [pc, #164]	; (8001020 <FLASH_OB_GetWRP+0xd0>)
 8000f7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f7e:	43db      	mvns	r3, r3
 8000f80:	0fdb      	lsrs	r3, r3, #31
 8000f82:	b2db      	uxtb	r3, r3
 8000f84:	461a      	mov	r2, r3
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	701a      	strb	r2, [r3, #0]
  }
  else
  {
    /* Empty statement (to be compliant MISRA 15.7) */
  }
}
 8000f8a:	e043      	b.n	8001014 <FLASH_OB_GetWRP+0xc4>
  else if (WRPArea == OB_WRPAREA_BANK1_AREAB)
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	2b02      	cmp	r3, #2
 8000f90:	d113      	bne.n	8000fba <FLASH_OB_GetWRP+0x6a>
    *WRPStartOffset = READ_BIT(FLASH->WRP1BR, FLASH_WRP1BR_WRP1B_PSTRT);
 8000f92:	4b23      	ldr	r3, [pc, #140]	; (8001020 <FLASH_OB_GetWRP+0xd0>)
 8000f94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f96:	b2da      	uxtb	r2, r3
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	601a      	str	r2, [r3, #0]
    *WRPEndOffset = (READ_BIT(FLASH->WRP1BR, FLASH_WRP1BR_WRP1B_PEND) >> FLASH_WRP1BR_WRP1B_PEND_Pos);
 8000f9c:	4b20      	ldr	r3, [pc, #128]	; (8001020 <FLASH_OB_GetWRP+0xd0>)
 8000f9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000fa0:	0c1b      	lsrs	r3, r3, #16
 8000fa2:	b2da      	uxtb	r2, r3
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	601a      	str	r2, [r3, #0]
    *WRPLock = (READ_BIT(FLASH->WRP1BR, FLASH_WRP1BR_UNLOCK) != 0U) ? DISABLE : ENABLE;
 8000fa8:	4b1d      	ldr	r3, [pc, #116]	; (8001020 <FLASH_OB_GetWRP+0xd0>)
 8000faa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000fac:	43db      	mvns	r3, r3
 8000fae:	0fdb      	lsrs	r3, r3, #31
 8000fb0:	b2db      	uxtb	r3, r3
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	701a      	strb	r2, [r3, #0]
}
 8000fb8:	e02c      	b.n	8001014 <FLASH_OB_GetWRP+0xc4>
  else if (WRPArea == OB_WRPAREA_BANK2_AREAA)
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	2b04      	cmp	r3, #4
 8000fbe:	d113      	bne.n	8000fe8 <FLASH_OB_GetWRP+0x98>
    *WRPStartOffset = READ_BIT(FLASH->WRP2AR, FLASH_WRP2AR_WRP2A_PSTRT);
 8000fc0:	4b17      	ldr	r3, [pc, #92]	; (8001020 <FLASH_OB_GetWRP+0xd0>)
 8000fc2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000fc4:	b2da      	uxtb	r2, r3
 8000fc6:	68bb      	ldr	r3, [r7, #8]
 8000fc8:	601a      	str	r2, [r3, #0]
    *WRPEndOffset = (READ_BIT(FLASH->WRP2AR, FLASH_WRP2AR_WRP2A_PEND) >> FLASH_WRP2AR_WRP2A_PEND_Pos);
 8000fca:	4b15      	ldr	r3, [pc, #84]	; (8001020 <FLASH_OB_GetWRP+0xd0>)
 8000fcc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000fce:	0c1b      	lsrs	r3, r3, #16
 8000fd0:	b2da      	uxtb	r2, r3
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	601a      	str	r2, [r3, #0]
    *WRPLock = (READ_BIT(FLASH->WRP2AR, FLASH_WRP2AR_UNLOCK) != 0U) ? DISABLE : ENABLE;
 8000fd6:	4b12      	ldr	r3, [pc, #72]	; (8001020 <FLASH_OB_GetWRP+0xd0>)
 8000fd8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000fda:	43db      	mvns	r3, r3
 8000fdc:	0fdb      	lsrs	r3, r3, #31
 8000fde:	b2db      	uxtb	r3, r3
 8000fe0:	461a      	mov	r2, r3
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	701a      	strb	r2, [r3, #0]
}
 8000fe6:	e015      	b.n	8001014 <FLASH_OB_GetWRP+0xc4>
  else if (WRPArea == OB_WRPAREA_BANK2_AREAB)
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	2b08      	cmp	r3, #8
 8000fec:	d112      	bne.n	8001014 <FLASH_OB_GetWRP+0xc4>
    *WRPStartOffset = READ_BIT(FLASH->WRP2BR, FLASH_WRP2BR_WRP2B_PSTRT);
 8000fee:	4b0c      	ldr	r3, [pc, #48]	; (8001020 <FLASH_OB_GetWRP+0xd0>)
 8000ff0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000ff2:	b2da      	uxtb	r2, r3
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	601a      	str	r2, [r3, #0]
    *WRPEndOffset = (READ_BIT(FLASH->WRP2BR, FLASH_WRP2BR_WRP2B_PEND) >> FLASH_WRP2BR_WRP2B_PEND_Pos);
 8000ff8:	4b09      	ldr	r3, [pc, #36]	; (8001020 <FLASH_OB_GetWRP+0xd0>)
 8000ffa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000ffc:	0c1b      	lsrs	r3, r3, #16
 8000ffe:	b2da      	uxtb	r2, r3
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	601a      	str	r2, [r3, #0]
    *WRPLock = (READ_BIT(FLASH->WRP2BR, FLASH_WRP2BR_UNLOCK) != 0U) ? DISABLE : ENABLE;
 8001004:	4b06      	ldr	r3, [pc, #24]	; (8001020 <FLASH_OB_GetWRP+0xd0>)
 8001006:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001008:	43db      	mvns	r3, r3
 800100a:	0fdb      	lsrs	r3, r3, #31
 800100c:	b2db      	uxtb	r3, r3
 800100e:	461a      	mov	r2, r3
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	701a      	strb	r2, [r3, #0]
}
 8001014:	bf00      	nop
 8001016:	3714      	adds	r7, #20
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr
 8001020:	40022000 	.word	0x40022000

08001024 <FLASH_OB_GetRDP>:
  *            @arg OB_RDP_LEVEL_0_5: No debug access to secure area
  *            @arg OB_RDP_LEVEL_1: Read protection of the memory
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  */
static uint32_t FLASH_OB_GetRDP(void)
{
 8001024:	b480      	push	{r7}
 8001026:	b083      	sub	sp, #12
 8001028:	af00      	add	r7, sp, #0
  uint32_t rdp_level = READ_BIT(FLASH->OPTR, FLASH_OPTR_RDP);
 800102a:	4b0b      	ldr	r3, [pc, #44]	; (8001058 <FLASH_OB_GetRDP+0x34>)
 800102c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102e:	b2db      	uxtb	r3, r3
 8001030:	607b      	str	r3, [r7, #4]

  if ((rdp_level != OB_RDP_LEVEL_0) && (rdp_level != OB_RDP_LEVEL_0_5) && (rdp_level != OB_RDP_LEVEL_2))
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2baa      	cmp	r3, #170	; 0xaa
 8001036:	d007      	beq.n	8001048 <FLASH_OB_GetRDP+0x24>
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2b55      	cmp	r3, #85	; 0x55
 800103c:	d004      	beq.n	8001048 <FLASH_OB_GetRDP+0x24>
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	2bcc      	cmp	r3, #204	; 0xcc
 8001042:	d001      	beq.n	8001048 <FLASH_OB_GetRDP+0x24>
  {
    return (OB_RDP_LEVEL_1);
 8001044:	23bb      	movs	r3, #187	; 0xbb
 8001046:	e000      	b.n	800104a <FLASH_OB_GetRDP+0x26>
  }
  else
  {
    return rdp_level;
 8001048:	687b      	ldr	r3, [r7, #4]
  }
}
 800104a:	4618      	mov	r0, r3
 800104c:	370c      	adds	r7, #12
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	40022000 	.word	0x40022000

0800105c <FLASH_OB_GetUser>:
  *         @ref FLASH_OB_USER_nSWBOOT0, @ref FLASH_OB_USER_nBOOT0,
  *         @ref FLASH_OB_USER_PA15_PUPEN, @ref FLASH_OB_USER_IO_VDD_HSLV,
  *         @ref FLASH_OB_USER_IO_VDDIO2_HSLV and @ref OB_USER_TZEN
  */
static uint32_t FLASH_OB_GetUser(void)
{
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
  uint32_t user_config = READ_REG(FLASH->OPTR);
 8001062:	4b07      	ldr	r3, [pc, #28]	; (8001080 <FLASH_OB_GetUser+0x24>)
 8001064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001066:	607b      	str	r3, [r7, #4]
  CLEAR_BIT(user_config, FLASH_OPTR_RDP);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800106e:	607b      	str	r3, [r7, #4]

  return user_config;
 8001070:	687b      	ldr	r3, [r7, #4]
}
 8001072:	4618      	mov	r0, r3
 8001074:	370c      	adds	r7, #12
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	40022000 	.word	0x40022000

08001084 <FLASH_OB_GetBootAddr>:
  * @param[out]  BootAddr specifies the boot address value
  *
  * @retval None
  */
static void FLASH_OB_GetBootAddr(uint32_t BootAddrConfig, uint32_t *BootAddr)
{
 8001084:	b480      	push	{r7}
 8001086:	b083      	sub	sp, #12
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
 800108c:	6039      	str	r1, [r7, #0]
  if (BootAddrConfig == OB_BOOTADDR_NS0)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	2b01      	cmp	r3, #1
 8001092:	d106      	bne.n	80010a2 <FLASH_OB_GetBootAddr+0x1e>
  {
    *BootAddr = (FLASH->NSBOOTADD0R & FLASH_NSBOOTADD0R_NSBOOTADD0);
 8001094:	4b0a      	ldr	r3, [pc, #40]	; (80010c0 <FLASH_OB_GetBootAddr+0x3c>)
 8001096:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001098:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	601a      	str	r2, [r3, #0]
#endif /* __ARM_FEATURE_CMSE */
  else
  {
    /* Empty statement (to be compliant MISRA 15.7) */
  }
}
 80010a0:	e008      	b.n	80010b4 <FLASH_OB_GetBootAddr+0x30>
  else if (BootAddrConfig == OB_BOOTADDR_NS1)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2b02      	cmp	r3, #2
 80010a6:	d105      	bne.n	80010b4 <FLASH_OB_GetBootAddr+0x30>
    *BootAddr = (FLASH->NSBOOTADD1R & FLASH_NSBOOTADD1R_NSBOOTADD1);
 80010a8:	4b05      	ldr	r3, [pc, #20]	; (80010c0 <FLASH_OB_GetBootAddr+0x3c>)
 80010aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010ac:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	601a      	str	r2, [r3, #0]
}
 80010b4:	bf00      	nop
 80010b6:	370c      	adds	r7, #12
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr
 80010c0:	40022000 	.word	0x40022000

080010c4 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b089      	sub	sp, #36	; 0x24
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 80010ce:	2300      	movs	r3, #0
 80010d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80010d6:	e1ba      	b.n	800144e <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	2101      	movs	r1, #1
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	fa01 f303 	lsl.w	r3, r1, r3
 80010e4:	4013      	ands	r3, r2
 80010e6:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	f000 81aa 	beq.w	8001448 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	4a55      	ldr	r2, [pc, #340]	; (800124c <HAL_GPIO_Init+0x188>)
 80010f8:	4293      	cmp	r3, r2
 80010fa:	d15d      	bne.n	80011b8 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8001102:	2201      	movs	r2, #1
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	fa02 f303 	lsl.w	r3, r2, r3
 800110a:	43db      	mvns	r3, r3
 800110c:	69fa      	ldr	r2, [r7, #28]
 800110e:	4013      	ands	r3, r2
 8001110:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	f003 0201 	and.w	r2, r3, #1
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	fa02 f303 	lsl.w	r3, r2, r3
 8001120:	69fa      	ldr	r2, [r7, #28]
 8001122:	4313      	orrs	r3, r2
 8001124:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	69fa      	ldr	r2, [r7, #28]
 800112a:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 800112c:	4a48      	ldr	r2, [pc, #288]	; (8001250 <HAL_GPIO_Init+0x18c>)
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001134:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8001136:	4a46      	ldr	r2, [pc, #280]	; (8001250 <HAL_GPIO_Init+0x18c>)
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	00db      	lsls	r3, r3, #3
 800113c:	4413      	add	r3, r2
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8001142:	69bb      	ldr	r3, [r7, #24]
 8001144:	08da      	lsrs	r2, r3, #3
 8001146:	693b      	ldr	r3, [r7, #16]
 8001148:	3208      	adds	r2, #8
 800114a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800114e:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8001150:	69bb      	ldr	r3, [r7, #24]
 8001152:	f003 0307 	and.w	r3, r3, #7
 8001156:	009b      	lsls	r3, r3, #2
 8001158:	220f      	movs	r2, #15
 800115a:	fa02 f303 	lsl.w	r3, r2, r3
 800115e:	43db      	mvns	r3, r3
 8001160:	69fa      	ldr	r2, [r7, #28]
 8001162:	4013      	ands	r3, r2
 8001164:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8001166:	69bb      	ldr	r3, [r7, #24]
 8001168:	f003 0307 	and.w	r3, r3, #7
 800116c:	009b      	lsls	r3, r3, #2
 800116e:	220b      	movs	r2, #11
 8001170:	fa02 f303 	lsl.w	r3, r2, r3
 8001174:	69fa      	ldr	r2, [r7, #28]
 8001176:	4313      	orrs	r3, r2
 8001178:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 800117a:	69bb      	ldr	r3, [r7, #24]
 800117c:	08da      	lsrs	r2, r3, #3
 800117e:	693b      	ldr	r3, [r7, #16]
 8001180:	3208      	adds	r2, #8
 8001182:	69f9      	ldr	r1, [r7, #28]
 8001184:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8001188:	693b      	ldr	r3, [r7, #16]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 800118e:	69bb      	ldr	r3, [r7, #24]
 8001190:	005b      	lsls	r3, r3, #1
 8001192:	2203      	movs	r2, #3
 8001194:	fa02 f303 	lsl.w	r3, r2, r3
 8001198:	43db      	mvns	r3, r3
 800119a:	69fa      	ldr	r2, [r7, #28]
 800119c:	4013      	ands	r3, r2
 800119e:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 80011a0:	69bb      	ldr	r3, [r7, #24]
 80011a2:	005b      	lsls	r3, r3, #1
 80011a4:	2202      	movs	r2, #2
 80011a6:	fa02 f303 	lsl.w	r3, r2, r3
 80011aa:	69fa      	ldr	r2, [r7, #28]
 80011ac:	4313      	orrs	r3, r2
 80011ae:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	69fa      	ldr	r2, [r7, #28]
 80011b4:	601a      	str	r2, [r3, #0]
 80011b6:	e067      	b.n	8001288 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	2b02      	cmp	r3, #2
 80011be:	d003      	beq.n	80011c8 <HAL_GPIO_Init+0x104>
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	2b12      	cmp	r3, #18
 80011c6:	d145      	bne.n	8001254 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	08da      	lsrs	r2, r3, #3
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	3208      	adds	r2, #8
 80011d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011d4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	f003 0307 	and.w	r3, r3, #7
 80011dc:	009b      	lsls	r3, r3, #2
 80011de:	220f      	movs	r2, #15
 80011e0:	fa02 f303 	lsl.w	r3, r2, r3
 80011e4:	43db      	mvns	r3, r3
 80011e6:	69fa      	ldr	r2, [r7, #28]
 80011e8:	4013      	ands	r3, r2
 80011ea:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	691b      	ldr	r3, [r3, #16]
 80011f0:	f003 020f 	and.w	r2, r3, #15
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	f003 0307 	and.w	r3, r3, #7
 80011fa:	009b      	lsls	r3, r3, #2
 80011fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001200:	69fa      	ldr	r2, [r7, #28]
 8001202:	4313      	orrs	r3, r2
 8001204:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	08da      	lsrs	r2, r3, #3
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	3208      	adds	r2, #8
 800120e:	69f9      	ldr	r1, [r7, #28]
 8001210:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 800121a:	69bb      	ldr	r3, [r7, #24]
 800121c:	005b      	lsls	r3, r3, #1
 800121e:	2203      	movs	r2, #3
 8001220:	fa02 f303 	lsl.w	r3, r2, r3
 8001224:	43db      	mvns	r3, r3
 8001226:	69fa      	ldr	r2, [r7, #28]
 8001228:	4013      	ands	r3, r2
 800122a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f003 0203 	and.w	r2, r3, #3
 8001234:	69bb      	ldr	r3, [r7, #24]
 8001236:	005b      	lsls	r3, r3, #1
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	69fa      	ldr	r2, [r7, #28]
 800123e:	4313      	orrs	r3, r2
 8001240:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	69fa      	ldr	r2, [r7, #28]
 8001246:	601a      	str	r2, [r3, #0]
 8001248:	e01e      	b.n	8001288 <HAL_GPIO_Init+0x1c4>
 800124a:	bf00      	nop
 800124c:	46020000 	.word	0x46020000
 8001250:	0800c320 	.word	0x0800c320
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 800125a:	69bb      	ldr	r3, [r7, #24]
 800125c:	005b      	lsls	r3, r3, #1
 800125e:	2203      	movs	r2, #3
 8001260:	fa02 f303 	lsl.w	r3, r2, r3
 8001264:	43db      	mvns	r3, r3
 8001266:	69fa      	ldr	r2, [r7, #28]
 8001268:	4013      	ands	r3, r2
 800126a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	f003 0203 	and.w	r2, r3, #3
 8001274:	69bb      	ldr	r3, [r7, #24]
 8001276:	005b      	lsls	r3, r3, #1
 8001278:	fa02 f303 	lsl.w	r3, r2, r3
 800127c:	69fa      	ldr	r2, [r7, #28]
 800127e:	4313      	orrs	r3, r2
 8001280:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	69fa      	ldr	r2, [r7, #28]
 8001286:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	2b01      	cmp	r3, #1
 800128e:	d00b      	beq.n	80012a8 <HAL_GPIO_Init+0x1e4>
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	2b02      	cmp	r3, #2
 8001296:	d007      	beq.n	80012a8 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800129c:	2b11      	cmp	r3, #17
 800129e:	d003      	beq.n	80012a8 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	2b12      	cmp	r3, #18
 80012a6:	d130      	bne.n	800130a <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	689b      	ldr	r3, [r3, #8]
 80012ac:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 80012ae:	69bb      	ldr	r3, [r7, #24]
 80012b0:	005b      	lsls	r3, r3, #1
 80012b2:	2203      	movs	r2, #3
 80012b4:	fa02 f303 	lsl.w	r3, r2, r3
 80012b8:	43db      	mvns	r3, r3
 80012ba:	69fa      	ldr	r2, [r7, #28]
 80012bc:	4013      	ands	r3, r2
 80012be:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	68da      	ldr	r2, [r3, #12]
 80012c4:	69bb      	ldr	r3, [r7, #24]
 80012c6:	005b      	lsls	r3, r3, #1
 80012c8:	fa02 f303 	lsl.w	r3, r2, r3
 80012cc:	69fa      	ldr	r2, [r7, #28]
 80012ce:	4313      	orrs	r3, r2
 80012d0:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	69fa      	ldr	r2, [r7, #28]
 80012d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 80012de:	2201      	movs	r2, #1
 80012e0:	69bb      	ldr	r3, [r7, #24]
 80012e2:	fa02 f303 	lsl.w	r3, r2, r3
 80012e6:	43db      	mvns	r3, r3
 80012e8:	69fa      	ldr	r2, [r7, #28]
 80012ea:	4013      	ands	r3, r2
 80012ec:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	091b      	lsrs	r3, r3, #4
 80012f4:	f003 0201 	and.w	r2, r3, #1
 80012f8:	69bb      	ldr	r3, [r7, #24]
 80012fa:	fa02 f303 	lsl.w	r3, r2, r3
 80012fe:	69fa      	ldr	r2, [r7, #28]
 8001300:	4313      	orrs	r3, r2
 8001302:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	69fa      	ldr	r2, [r7, #28]
 8001308:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	2b03      	cmp	r3, #3
 8001310:	d017      	beq.n	8001342 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8001312:	693b      	ldr	r3, [r7, #16]
 8001314:	68db      	ldr	r3, [r3, #12]
 8001316:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 8001318:	69bb      	ldr	r3, [r7, #24]
 800131a:	005b      	lsls	r3, r3, #1
 800131c:	2203      	movs	r2, #3
 800131e:	fa02 f303 	lsl.w	r3, r2, r3
 8001322:	43db      	mvns	r3, r3
 8001324:	69fa      	ldr	r2, [r7, #28]
 8001326:	4013      	ands	r3, r2
 8001328:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	689a      	ldr	r2, [r3, #8]
 800132e:	69bb      	ldr	r3, [r7, #24]
 8001330:	005b      	lsls	r3, r3, #1
 8001332:	fa02 f303 	lsl.w	r3, r2, r3
 8001336:	69fa      	ldr	r2, [r7, #28]
 8001338:	4313      	orrs	r3, r2
 800133a:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 800133c:	693b      	ldr	r3, [r7, #16]
 800133e:	69fa      	ldr	r2, [r7, #28]
 8001340:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800134a:	2b00      	cmp	r3, #0
 800134c:	d07c      	beq.n	8001448 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 800134e:	4a47      	ldr	r2, [pc, #284]	; (800146c <HAL_GPIO_Init+0x3a8>)
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	089b      	lsrs	r3, r3, #2
 8001354:	3318      	adds	r3, #24
 8001356:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800135a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	f003 0303 	and.w	r3, r3, #3
 8001362:	00db      	lsls	r3, r3, #3
 8001364:	220f      	movs	r2, #15
 8001366:	fa02 f303 	lsl.w	r3, r2, r3
 800136a:	43db      	mvns	r3, r3
 800136c:	69fa      	ldr	r2, [r7, #28]
 800136e:	4013      	ands	r3, r2
 8001370:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	0a9a      	lsrs	r2, r3, #10
 8001376:	4b3e      	ldr	r3, [pc, #248]	; (8001470 <HAL_GPIO_Init+0x3ac>)
 8001378:	4013      	ands	r3, r2
 800137a:	697a      	ldr	r2, [r7, #20]
 800137c:	f002 0203 	and.w	r2, r2, #3
 8001380:	00d2      	lsls	r2, r2, #3
 8001382:	4093      	lsls	r3, r2
 8001384:	69fa      	ldr	r2, [r7, #28]
 8001386:	4313      	orrs	r3, r2
 8001388:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 800138a:	4938      	ldr	r1, [pc, #224]	; (800146c <HAL_GPIO_Init+0x3a8>)
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	089b      	lsrs	r3, r3, #2
 8001390:	3318      	adds	r3, #24
 8001392:	69fa      	ldr	r2, [r7, #28]
 8001394:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8001398:	4b34      	ldr	r3, [pc, #208]	; (800146c <HAL_GPIO_Init+0x3a8>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	43db      	mvns	r3, r3
 80013a2:	69fa      	ldr	r2, [r7, #28]
 80013a4:	4013      	ands	r3, r2
 80013a6:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d003      	beq.n	80013bc <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 80013b4:	69fa      	ldr	r2, [r7, #28]
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	4313      	orrs	r3, r2
 80013ba:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 80013bc:	4a2b      	ldr	r2, [pc, #172]	; (800146c <HAL_GPIO_Init+0x3a8>)
 80013be:	69fb      	ldr	r3, [r7, #28]
 80013c0:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80013c2:	4b2a      	ldr	r3, [pc, #168]	; (800146c <HAL_GPIO_Init+0x3a8>)
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	43db      	mvns	r3, r3
 80013cc:	69fa      	ldr	r2, [r7, #28]
 80013ce:	4013      	ands	r3, r2
 80013d0:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d003      	beq.n	80013e6 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 80013de:	69fa      	ldr	r2, [r7, #28]
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	4313      	orrs	r3, r2
 80013e4:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 80013e6:	4a21      	ldr	r2, [pc, #132]	; (800146c <HAL_GPIO_Init+0x3a8>)
 80013e8:	69fb      	ldr	r3, [r7, #28]
 80013ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 80013ec:	4b1f      	ldr	r3, [pc, #124]	; (800146c <HAL_GPIO_Init+0x3a8>)
 80013ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80013f2:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	43db      	mvns	r3, r3
 80013f8:	69fa      	ldr	r2, [r7, #28]
 80013fa:	4013      	ands	r3, r2
 80013fc:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001406:	2b00      	cmp	r3, #0
 8001408:	d003      	beq.n	8001412 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 800140a:	69fa      	ldr	r2, [r7, #28]
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	4313      	orrs	r3, r2
 8001410:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8001412:	4a16      	ldr	r2, [pc, #88]	; (800146c <HAL_GPIO_Init+0x3a8>)
 8001414:	69fb      	ldr	r3, [r7, #28]
 8001416:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 800141a:	4b14      	ldr	r3, [pc, #80]	; (800146c <HAL_GPIO_Init+0x3a8>)
 800141c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001420:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	43db      	mvns	r3, r3
 8001426:	69fa      	ldr	r2, [r7, #28]
 8001428:	4013      	ands	r3, r2
 800142a:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001434:	2b00      	cmp	r3, #0
 8001436:	d003      	beq.n	8001440 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8001438:	69fa      	ldr	r2, [r7, #28]
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	4313      	orrs	r3, r2
 800143e:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8001440:	4a0a      	ldr	r2, [pc, #40]	; (800146c <HAL_GPIO_Init+0x3a8>)
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	3301      	adds	r3, #1
 800144c:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	fa22 f303 	lsr.w	r3, r2, r3
 8001458:	2b00      	cmp	r3, #0
 800145a:	f47f ae3d 	bne.w	80010d8 <HAL_GPIO_Init+0x14>
  }
}
 800145e:	bf00      	nop
 8001460:	bf00      	nop
 8001462:	3724      	adds	r7, #36	; 0x24
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr
 800146c:	46022000 	.word	0x46022000
 8001470:	002f7f7f 	.word	0x002f7f7f

08001474 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001474:	b480      	push	{r7}
 8001476:	b085      	sub	sp, #20
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
 800147c:	460b      	mov	r3, r1
 800147e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	691a      	ldr	r2, [r3, #16]
 8001484:	887b      	ldrh	r3, [r7, #2]
 8001486:	4013      	ands	r3, r2
 8001488:	2b00      	cmp	r3, #0
 800148a:	d002      	beq.n	8001492 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800148c:	2301      	movs	r3, #1
 800148e:	73fb      	strb	r3, [r7, #15]
 8001490:	e001      	b.n	8001496 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001492:	2300      	movs	r3, #0
 8001494:	73fb      	strb	r3, [r7, #15]
  }

  return bitstatus;
 8001496:	7bfb      	ldrb	r3, [r7, #15]
}
 8001498:	4618      	mov	r0, r3
 800149a:	3714      	adds	r7, #20
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr

080014a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	460b      	mov	r3, r1
 80014ae:	807b      	strh	r3, [r7, #2]
 80014b0:	4613      	mov	r3, r2
 80014b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014b4:	787b      	ldrb	r3, [r7, #1]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d003      	beq.n	80014c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80014ba:	887a      	ldrh	r2, [r7, #2]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 80014c0:	e002      	b.n	80014c8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 80014c2:	887a      	ldrh	r2, [r7, #2]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80014c8:	bf00      	nop
 80014ca:	370c      	adds	r7, #12
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr

080014d4 <HAL_HASH_Init>:
  *         relevant APIs manage themselves the MDMAT bit.
  * @param  hhash HASH handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HASH_Init(HASH_HandleTypeDef *hhash)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  /* Check the hash handle allocation */
  if (hhash == NULL)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d101      	bne.n	80014e6 <HAL_HASH_Init+0x12>
  {
    return HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
 80014e4:	e043      	b.n	800156e <HAL_HASH_Init+0x9a>

    /* Init the low level hardware */
    hhash->MspInitCallback(hhash);
  }
#else
  if (hhash->State == HAL_HASH_STATE_RESET)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d106      	bne.n	8001500 <HAL_HASH_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hhash->Lock = HAL_UNLOCKED;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2200      	movs	r2, #0
 80014f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Init the low level hardware */
    HAL_HASH_MspInit(hhash);
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	f008 f81c 	bl	8009538 <HAL_HASH_MspInit>
  }
#endif /* (USE_HAL_HASH_REGISTER_CALLBACKS) */

  /* Change the HASH state */
  hhash->State = HAL_HASH_STATE_BUSY;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2202      	movs	r2, #2
 8001504:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Reset HashInCount, HashITCounter, HashBuffSize and NbWordsAlreadyPushed */
  hhash->HashInCount = 0;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2200      	movs	r2, #0
 800150c:	621a      	str	r2, [r3, #32]
  hhash->HashBuffSize = 0;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2200      	movs	r2, #0
 8001512:	61da      	str	r2, [r3, #28]
  hhash->HashITCounter = 0;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2200      	movs	r2, #0
 8001518:	625a      	str	r2, [r3, #36]	; 0x24
  hhash->NbWordsAlreadyPushed = 0;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2200      	movs	r2, #0
 800151e:	639a      	str	r2, [r3, #56]	; 0x38
  /* Reset digest calculation bridle (MDMAT bit control) */
  hhash->DigestCalculationDisable = RESET;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2200      	movs	r2, #0
 8001524:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
  /* Set phase to READY */
  hhash->Phase = HAL_HASH_PHASE_READY;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2201      	movs	r2, #1
 800152c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  /* Reset suspension request flag */
  hhash->SuspendRequest = HAL_HASH_SUSPEND_NONE;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2200      	movs	r2, #0
 8001534:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Set the data type bit */
  MODIFY_REG(HASH->CR, HASH_CR_DATATYPE, hhash->Init.DataType);
 8001538:	4b0f      	ldr	r3, [pc, #60]	; (8001578 <HAL_HASH_Init+0xa4>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	490c      	ldr	r1, [pc, #48]	; (8001578 <HAL_HASH_Init+0xa4>)
 8001546:	4313      	orrs	r3, r2
 8001548:	600b      	str	r3, [r1, #0]
  /* Reset MDMAT bit */
  __HAL_HASH_RESET_MDMAT();
 800154a:	4b0b      	ldr	r3, [pc, #44]	; (8001578 <HAL_HASH_Init+0xa4>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4a0a      	ldr	r2, [pc, #40]	; (8001578 <HAL_HASH_Init+0xa4>)
 8001550:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001554:	6013      	str	r3, [r2, #0]
  /* Reset HASH handle status */
  hhash->Status = HAL_OK;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2200      	movs	r2, #0
 800155a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Set the HASH state to Ready */
  hhash->State = HAL_HASH_STATE_READY;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2201      	movs	r2, #1
 8001562:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Initialise the error code */
  hhash->ErrorCode = HAL_HASH_ERROR_NONE;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2200      	movs	r2, #0
 800156a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 800156c:	2300      	movs	r3, #0
}
 800156e:	4618      	mov	r0, r3
 8001570:	3708      	adds	r7, #8
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	420c0400 	.word	0x420c0400

0800157c <HASH_WriteData>:
  *         processing is suspended when possible and the Peripheral feeding point reached at
  *         suspension time is stored in the handle for resumption later on.
  * @retval HAL status
  */
static HAL_StatusTypeDef HASH_WriteData(HASH_HandleTypeDef *hhash, uint8_t *pInBuffer, uint32_t Size)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b086      	sub	sp, #24
 8001580:	af00      	add	r7, sp, #0
 8001582:	60f8      	str	r0, [r7, #12]
 8001584:	60b9      	str	r1, [r7, #8]
 8001586:	607a      	str	r2, [r7, #4]
  uint32_t buffercounter;
  __IO uint32_t inputaddr = (uint32_t) pInBuffer;
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	613b      	str	r3, [r7, #16]

  for (buffercounter = 0U; buffercounter < Size; buffercounter += 4U)
 800158c:	2300      	movs	r3, #0
 800158e:	617b      	str	r3, [r7, #20]
 8001590:	e066      	b.n	8001660 <HASH_WriteData+0xe4>
  {
    /* Write input data 4 bytes at a time */
    HASH->DIN = *(uint32_t *)inputaddr;
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	4a37      	ldr	r2, [pc, #220]	; (8001674 <HASH_WriteData+0xf8>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	6053      	str	r3, [r2, #4]
    inputaddr += 4U;
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	3304      	adds	r3, #4
 800159e:	613b      	str	r3, [r7, #16]

    /* If the suspension flag has been raised and if the processing is not about
    to end, suspend processing */
    if ((hhash->SuspendRequest == HAL_HASH_SUSPEND) && ((buffercounter + 4U) < Size))
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	d157      	bne.n	800165a <HASH_WriteData+0xde>
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	3304      	adds	r3, #4
 80015ae:	687a      	ldr	r2, [r7, #4]
 80015b0:	429a      	cmp	r2, r3
 80015b2:	d952      	bls.n	800165a <HASH_WriteData+0xde>
    {
      /* wait for flag BUSY not set before  Wait for DINIS = 1*/
      if (buffercounter >= 64U)
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	2b3f      	cmp	r3, #63	; 0x3f
 80015b8:	d90b      	bls.n	80015d2 <HASH_WriteData+0x56>
      {
        if (HASH_WaitOnFlagUntilTimeout(hhash, HASH_FLAG_BUSY, SET, HASH_TIMEOUTVALUE) != HAL_OK)
 80015ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015be:	2201      	movs	r2, #1
 80015c0:	2108      	movs	r1, #8
 80015c2:	68f8      	ldr	r0, [r7, #12]
 80015c4:	f000 f97e 	bl	80018c4 <HASH_WaitOnFlagUntilTimeout>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <HASH_WriteData+0x56>
        {
          return HAL_TIMEOUT;
 80015ce:	2303      	movs	r3, #3
 80015d0:	e04b      	b.n	800166a <HASH_WriteData+0xee>
        }
      }
      /* Wait for DINIS = 1, which occurs when 16 32-bit locations are free
      in the input buffer */
      if (__HAL_HASH_GET_FLAG(HASH_FLAG_DINIS))
 80015d2:	4b28      	ldr	r3, [pc, #160]	; (8001674 <HASH_WriteData+0xf8>)
 80015d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015d6:	f003 0301 	and.w	r3, r3, #1
 80015da:	2b01      	cmp	r3, #1
 80015dc:	d13d      	bne.n	800165a <HASH_WriteData+0xde>
      {
        /* Reset SuspendRequest */
        hhash->SuspendRequest = HAL_HASH_SUSPEND_NONE;
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	2200      	movs	r2, #0
 80015e2:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

        /* Depending whether the key or the input data were fed to the Peripheral, the feeding point
        reached at suspension time is not saved in the same handle fields */
        if ((hhash->Phase == HAL_HASH_PHASE_PROCESS) || (hhash->Phase == HAL_HASH_PHASE_HMAC_STEP_2))
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80015ec:	2b02      	cmp	r3, #2
 80015ee:	d004      	beq.n	80015fa <HASH_WriteData+0x7e>
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80015f6:	2b04      	cmp	r3, #4
 80015f8:	d10a      	bne.n	8001610 <HASH_WriteData+0x94>
        {
          /* Save current reading and writing locations of Input and Output buffers */
          hhash->pHashInBuffPtr = (uint8_t *)inputaddr;
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	461a      	mov	r2, r3
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	60da      	str	r2, [r3, #12]
          /* Save the number of bytes that remain to be processed at this point */
          hhash->HashInCount    =  Size - (buffercounter + 4U);
 8001602:	687a      	ldr	r2, [r7, #4]
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	1ad3      	subs	r3, r2, r3
 8001608:	1f1a      	subs	r2, r3, #4
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	621a      	str	r2, [r3, #32]
 800160e:	e01e      	b.n	800164e <HASH_WriteData+0xd2>
        }
        else if ((hhash->Phase == HAL_HASH_PHASE_HMAC_STEP_1) || (hhash->Phase == HAL_HASH_PHASE_HMAC_STEP_3))
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8001616:	2b03      	cmp	r3, #3
 8001618:	d004      	beq.n	8001624 <HASH_WriteData+0xa8>
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8001620:	2b05      	cmp	r3, #5
 8001622:	d10a      	bne.n	800163a <HASH_WriteData+0xbe>
        {
          /* Save current reading and writing locations of Input and Output buffers */
          hhash->pHashKeyBuffPtr  = (uint8_t *)inputaddr;
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	461a      	mov	r2, r3
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	615a      	str	r2, [r3, #20]
          /* Save the number of bytes that remain to be processed at this point */
          hhash->HashKeyCount  =  Size - (buffercounter + 4U);
 800162c:	687a      	ldr	r2, [r7, #4]
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	1f1a      	subs	r2, r3, #4
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	629a      	str	r2, [r3, #40]	; 0x28
 8001638:	e009      	b.n	800164e <HASH_WriteData+0xd2>
        }
        else
        {
          /* Unexpected phase: unlock process and report error */
          hhash->State = HAL_HASH_STATE_READY;
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	2201      	movs	r2, #1
 800163e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          __HAL_UNLOCK(hhash);
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	2200      	movs	r2, #0
 8001646:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          return HAL_ERROR;
 800164a:	2301      	movs	r3, #1
 800164c:	e00d      	b.n	800166a <HASH_WriteData+0xee>
        }

        /* Set the HASH state to Suspended and exit to stop entering data */
        hhash->State = HAL_HASH_STATE_SUSPENDED;
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	2208      	movs	r2, #8
 8001652:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_OK;
 8001656:	2300      	movs	r3, #0
 8001658:	e007      	b.n	800166a <HASH_WriteData+0xee>
  for (buffercounter = 0U; buffercounter < Size; buffercounter += 4U)
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	3304      	adds	r3, #4
 800165e:	617b      	str	r3, [r7, #20]
 8001660:	697a      	ldr	r2, [r7, #20]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	429a      	cmp	r2, r3
 8001666:	d394      	bcc.n	8001592 <HASH_WriteData+0x16>
      } /* if (__HAL_HASH_GET_FLAG(HASH_FLAG_DINIS))  */
    } /* if ((hhash->SuspendRequest == HAL_HASH_SUSPEND) && ((buffercounter+4) < Size)) */
  }   /* for(buffercounter = 0; buffercounter < Size; buffercounter+=4)                 */

  /* At this point, all the data have been entered to the Peripheral: exit */
  return  HAL_OK;
 8001668:	2300      	movs	r3, #0
}
 800166a:	4618      	mov	r0, r3
 800166c:	3718      	adds	r7, #24
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	420c0400 	.word	0x420c0400

08001678 <HASH_GetDigest>:
  * @param  pMsgDigest pointer to the computed digest.
  * @param  Size message digest size in bytes.
  * @retval None
  */
static void HASH_GetDigest(uint8_t *pMsgDigest, uint8_t Size)
{
 8001678:	b480      	push	{r7}
 800167a:	b09d      	sub	sp, #116	; 0x74
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
 8001680:	460b      	mov	r3, r1
 8001682:	70fb      	strb	r3, [r7, #3]
  uint32_t msgdigest = (uint32_t)pMsgDigest;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	66fb      	str	r3, [r7, #108]	; 0x6c

  switch (Size)
 8001688:	78fb      	ldrb	r3, [r7, #3]
 800168a:	3b10      	subs	r3, #16
 800168c:	2b10      	cmp	r3, #16
 800168e:	f200 810d 	bhi.w	80018ac <HASH_GetDigest+0x234>
 8001692:	a201      	add	r2, pc, #4	; (adr r2, 8001698 <HASH_GetDigest+0x20>)
 8001694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001698:	080016dd 	.word	0x080016dd
 800169c:	080018ad 	.word	0x080018ad
 80016a0:	080018ad 	.word	0x080018ad
 80016a4:	080018ad 	.word	0x080018ad
 80016a8:	08001729 	.word	0x08001729
 80016ac:	080018ad 	.word	0x080018ad
 80016b0:	080018ad 	.word	0x080018ad
 80016b4:	080018ad 	.word	0x080018ad
 80016b8:	080018ad 	.word	0x080018ad
 80016bc:	080018ad 	.word	0x080018ad
 80016c0:	080018ad 	.word	0x080018ad
 80016c4:	080018ad 	.word	0x080018ad
 80016c8:	08001789 	.word	0x08001789
 80016cc:	080018ad 	.word	0x080018ad
 80016d0:	080018ad 	.word	0x080018ad
 80016d4:	080018ad 	.word	0x080018ad
 80016d8:	08001811 	.word	0x08001811
  {
    /* Read the message digest */
    case 16:  /* MD5 */
      *(uint32_t *)(msgdigest) = __REV(HASH->HR[0]);
 80016dc:	4b77      	ldr	r3, [pc, #476]	; (80018bc <HASH_GetDigest+0x244>)
 80016de:	68da      	ldr	r2, [r3, #12]
 80016e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80016e2:	65fa      	str	r2, [r7, #92]	; 0x5c
  \return               Reversed value
 */
__STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
{
#if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
  return __builtin_bswap32(value);
 80016e4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80016e6:	ba12      	rev	r2, r2
 80016e8:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 80016ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80016ec:	3304      	adds	r3, #4
 80016ee:	66fb      	str	r3, [r7, #108]	; 0x6c
      *(uint32_t *)(msgdigest) = __REV(HASH->HR[1]);
 80016f0:	4b72      	ldr	r3, [pc, #456]	; (80018bc <HASH_GetDigest+0x244>)
 80016f2:	691a      	ldr	r2, [r3, #16]
 80016f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80016f6:	663a      	str	r2, [r7, #96]	; 0x60
 80016f8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80016fa:	ba12      	rev	r2, r2
 80016fc:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 80016fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001700:	3304      	adds	r3, #4
 8001702:	66fb      	str	r3, [r7, #108]	; 0x6c
      *(uint32_t *)(msgdigest) = __REV(HASH->HR[2]);
 8001704:	4b6d      	ldr	r3, [pc, #436]	; (80018bc <HASH_GetDigest+0x244>)
 8001706:	695a      	ldr	r2, [r3, #20]
 8001708:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800170a:	667a      	str	r2, [r7, #100]	; 0x64
 800170c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800170e:	ba12      	rev	r2, r2
 8001710:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8001712:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001714:	3304      	adds	r3, #4
 8001716:	66fb      	str	r3, [r7, #108]	; 0x6c
      *(uint32_t *)(msgdigest) = __REV(HASH->HR[3]);
 8001718:	4b68      	ldr	r3, [pc, #416]	; (80018bc <HASH_GetDigest+0x244>)
 800171a:	699a      	ldr	r2, [r3, #24]
 800171c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800171e:	66ba      	str	r2, [r7, #104]	; 0x68
 8001720:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001722:	ba12      	rev	r2, r2
 8001724:	601a      	str	r2, [r3, #0]
      break;
 8001726:	e0c2      	b.n	80018ae <HASH_GetDigest+0x236>
    case 20:  /* SHA1 */
      *(uint32_t *)(msgdigest) = __REV(HASH->HR[0]);
 8001728:	4b64      	ldr	r3, [pc, #400]	; (80018bc <HASH_GetDigest+0x244>)
 800172a:	68da      	ldr	r2, [r3, #12]
 800172c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800172e:	64ba      	str	r2, [r7, #72]	; 0x48
 8001730:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001732:	ba12      	rev	r2, r2
 8001734:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8001736:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001738:	3304      	adds	r3, #4
 800173a:	66fb      	str	r3, [r7, #108]	; 0x6c
      *(uint32_t *)(msgdigest) = __REV(HASH->HR[1]);
 800173c:	4b5f      	ldr	r3, [pc, #380]	; (80018bc <HASH_GetDigest+0x244>)
 800173e:	691a      	ldr	r2, [r3, #16]
 8001740:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001742:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001744:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001746:	ba12      	rev	r2, r2
 8001748:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 800174a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800174c:	3304      	adds	r3, #4
 800174e:	66fb      	str	r3, [r7, #108]	; 0x6c
      *(uint32_t *)(msgdigest) = __REV(HASH->HR[2]);
 8001750:	4b5a      	ldr	r3, [pc, #360]	; (80018bc <HASH_GetDigest+0x244>)
 8001752:	695a      	ldr	r2, [r3, #20]
 8001754:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001756:	653a      	str	r2, [r7, #80]	; 0x50
 8001758:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800175a:	ba12      	rev	r2, r2
 800175c:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 800175e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001760:	3304      	adds	r3, #4
 8001762:	66fb      	str	r3, [r7, #108]	; 0x6c
      *(uint32_t *)(msgdigest) = __REV(HASH->HR[3]);
 8001764:	4b55      	ldr	r3, [pc, #340]	; (80018bc <HASH_GetDigest+0x244>)
 8001766:	699a      	ldr	r2, [r3, #24]
 8001768:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800176a:	657a      	str	r2, [r7, #84]	; 0x54
 800176c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800176e:	ba12      	rev	r2, r2
 8001770:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8001772:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001774:	3304      	adds	r3, #4
 8001776:	66fb      	str	r3, [r7, #108]	; 0x6c
      *(uint32_t *)(msgdigest) = __REV(HASH->HR[4]);
 8001778:	4b50      	ldr	r3, [pc, #320]	; (80018bc <HASH_GetDigest+0x244>)
 800177a:	69da      	ldr	r2, [r3, #28]
 800177c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800177e:	65ba      	str	r2, [r7, #88]	; 0x58
 8001780:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001782:	ba12      	rev	r2, r2
 8001784:	601a      	str	r2, [r3, #0]
      break;
 8001786:	e092      	b.n	80018ae <HASH_GetDigest+0x236>
    case 28:  /* SHA224 */
      *(uint32_t *)(msgdigest) = __REV(HASH->HR[0]);
 8001788:	4b4c      	ldr	r3, [pc, #304]	; (80018bc <HASH_GetDigest+0x244>)
 800178a:	68da      	ldr	r2, [r3, #12]
 800178c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800178e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001790:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001792:	ba12      	rev	r2, r2
 8001794:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8001796:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001798:	3304      	adds	r3, #4
 800179a:	66fb      	str	r3, [r7, #108]	; 0x6c
      *(uint32_t *)(msgdigest) = __REV(HASH->HR[1]);
 800179c:	4b47      	ldr	r3, [pc, #284]	; (80018bc <HASH_GetDigest+0x244>)
 800179e:	691a      	ldr	r2, [r3, #16]
 80017a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80017a2:	633a      	str	r2, [r7, #48]	; 0x30
 80017a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80017a6:	ba12      	rev	r2, r2
 80017a8:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 80017aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80017ac:	3304      	adds	r3, #4
 80017ae:	66fb      	str	r3, [r7, #108]	; 0x6c
      *(uint32_t *)(msgdigest) = __REV(HASH->HR[2]);
 80017b0:	4b42      	ldr	r3, [pc, #264]	; (80018bc <HASH_GetDigest+0x244>)
 80017b2:	695a      	ldr	r2, [r3, #20]
 80017b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80017b6:	637a      	str	r2, [r7, #52]	; 0x34
 80017b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80017ba:	ba12      	rev	r2, r2
 80017bc:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 80017be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80017c0:	3304      	adds	r3, #4
 80017c2:	66fb      	str	r3, [r7, #108]	; 0x6c
      *(uint32_t *)(msgdigest) = __REV(HASH->HR[3]);
 80017c4:	4b3d      	ldr	r3, [pc, #244]	; (80018bc <HASH_GetDigest+0x244>)
 80017c6:	699a      	ldr	r2, [r3, #24]
 80017c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80017ca:	63ba      	str	r2, [r7, #56]	; 0x38
 80017cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80017ce:	ba12      	rev	r2, r2
 80017d0:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 80017d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80017d4:	3304      	adds	r3, #4
 80017d6:	66fb      	str	r3, [r7, #108]	; 0x6c
      *(uint32_t *)(msgdigest) = __REV(HASH->HR[4]);
 80017d8:	4b38      	ldr	r3, [pc, #224]	; (80018bc <HASH_GetDigest+0x244>)
 80017da:	69da      	ldr	r2, [r3, #28]
 80017dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80017de:	63fa      	str	r2, [r7, #60]	; 0x3c
 80017e0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80017e2:	ba12      	rev	r2, r2
 80017e4:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 80017e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80017e8:	3304      	adds	r3, #4
 80017ea:	66fb      	str	r3, [r7, #108]	; 0x6c
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[5]);
 80017ec:	4b34      	ldr	r3, [pc, #208]	; (80018c0 <HASH_GetDigest+0x248>)
 80017ee:	695a      	ldr	r2, [r3, #20]
 80017f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80017f2:	643a      	str	r2, [r7, #64]	; 0x40
 80017f4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80017f6:	ba12      	rev	r2, r2
 80017f8:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 80017fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80017fc:	3304      	adds	r3, #4
 80017fe:	66fb      	str	r3, [r7, #108]	; 0x6c
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[6]);
 8001800:	4b2f      	ldr	r3, [pc, #188]	; (80018c0 <HASH_GetDigest+0x248>)
 8001802:	699a      	ldr	r2, [r3, #24]
 8001804:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001806:	647a      	str	r2, [r7, #68]	; 0x44
 8001808:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800180a:	ba12      	rev	r2, r2
 800180c:	601a      	str	r2, [r3, #0]
      break;
 800180e:	e04e      	b.n	80018ae <HASH_GetDigest+0x236>
    case 32:   /* SHA256 */
      *(uint32_t *)(msgdigest) = __REV(HASH->HR[0]);
 8001810:	4b2a      	ldr	r3, [pc, #168]	; (80018bc <HASH_GetDigest+0x244>)
 8001812:	68da      	ldr	r2, [r3, #12]
 8001814:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001816:	60fa      	str	r2, [r7, #12]
 8001818:	68fa      	ldr	r2, [r7, #12]
 800181a:	ba12      	rev	r2, r2
 800181c:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 800181e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001820:	3304      	adds	r3, #4
 8001822:	66fb      	str	r3, [r7, #108]	; 0x6c
      *(uint32_t *)(msgdigest) = __REV(HASH->HR[1]);
 8001824:	4b25      	ldr	r3, [pc, #148]	; (80018bc <HASH_GetDigest+0x244>)
 8001826:	691a      	ldr	r2, [r3, #16]
 8001828:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800182a:	613a      	str	r2, [r7, #16]
 800182c:	693a      	ldr	r2, [r7, #16]
 800182e:	ba12      	rev	r2, r2
 8001830:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8001832:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001834:	3304      	adds	r3, #4
 8001836:	66fb      	str	r3, [r7, #108]	; 0x6c
      *(uint32_t *)(msgdigest) = __REV(HASH->HR[2]);
 8001838:	4b20      	ldr	r3, [pc, #128]	; (80018bc <HASH_GetDigest+0x244>)
 800183a:	695a      	ldr	r2, [r3, #20]
 800183c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800183e:	617a      	str	r2, [r7, #20]
 8001840:	697a      	ldr	r2, [r7, #20]
 8001842:	ba12      	rev	r2, r2
 8001844:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8001846:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001848:	3304      	adds	r3, #4
 800184a:	66fb      	str	r3, [r7, #108]	; 0x6c
      *(uint32_t *)(msgdigest) = __REV(HASH->HR[3]);
 800184c:	4b1b      	ldr	r3, [pc, #108]	; (80018bc <HASH_GetDigest+0x244>)
 800184e:	699a      	ldr	r2, [r3, #24]
 8001850:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001852:	61ba      	str	r2, [r7, #24]
 8001854:	69ba      	ldr	r2, [r7, #24]
 8001856:	ba12      	rev	r2, r2
 8001858:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 800185a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800185c:	3304      	adds	r3, #4
 800185e:	66fb      	str	r3, [r7, #108]	; 0x6c
      *(uint32_t *)(msgdigest) = __REV(HASH->HR[4]);
 8001860:	4b16      	ldr	r3, [pc, #88]	; (80018bc <HASH_GetDigest+0x244>)
 8001862:	69da      	ldr	r2, [r3, #28]
 8001864:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001866:	61fa      	str	r2, [r7, #28]
 8001868:	69fa      	ldr	r2, [r7, #28]
 800186a:	ba12      	rev	r2, r2
 800186c:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 800186e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001870:	3304      	adds	r3, #4
 8001872:	66fb      	str	r3, [r7, #108]	; 0x6c
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[5]);
 8001874:	4b12      	ldr	r3, [pc, #72]	; (80018c0 <HASH_GetDigest+0x248>)
 8001876:	695a      	ldr	r2, [r3, #20]
 8001878:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800187a:	623a      	str	r2, [r7, #32]
 800187c:	6a3a      	ldr	r2, [r7, #32]
 800187e:	ba12      	rev	r2, r2
 8001880:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8001882:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001884:	3304      	adds	r3, #4
 8001886:	66fb      	str	r3, [r7, #108]	; 0x6c
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[6]);
 8001888:	4b0d      	ldr	r3, [pc, #52]	; (80018c0 <HASH_GetDigest+0x248>)
 800188a:	699a      	ldr	r2, [r3, #24]
 800188c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800188e:	627a      	str	r2, [r7, #36]	; 0x24
 8001890:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001892:	ba12      	rev	r2, r2
 8001894:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8001896:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001898:	3304      	adds	r3, #4
 800189a:	66fb      	str	r3, [r7, #108]	; 0x6c
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[7]);
 800189c:	4b08      	ldr	r3, [pc, #32]	; (80018c0 <HASH_GetDigest+0x248>)
 800189e:	69da      	ldr	r2, [r3, #28]
 80018a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80018a2:	62ba      	str	r2, [r7, #40]	; 0x28
 80018a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80018a6:	ba12      	rev	r2, r2
 80018a8:	601a      	str	r2, [r3, #0]
      break;
 80018aa:	e000      	b.n	80018ae <HASH_GetDigest+0x236>
    default:
      break;
 80018ac:	bf00      	nop
  }
}
 80018ae:	bf00      	nop
 80018b0:	3774      	adds	r7, #116	; 0x74
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	420c0400 	.word	0x420c0400
 80018c0:	420c0710 	.word	0x420c0710

080018c4 <HASH_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef HASH_WaitOnFlagUntilTimeout(HASH_HandleTypeDef *hhash, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Timeout)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b086      	sub	sp, #24
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	60f8      	str	r0, [r7, #12]
 80018cc:	60b9      	str	r1, [r7, #8]
 80018ce:	603b      	str	r3, [r7, #0]
 80018d0:	4613      	mov	r3, r2
 80018d2:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart = HAL_GetTick();
 80018d4:	f7fe fee4 	bl	80006a0 <HAL_GetTick>
 80018d8:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set */
  if (Status == RESET)
 80018da:	79fb      	ldrb	r3, [r7, #7]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d155      	bne.n	800198c <HASH_WaitOnFlagUntilTimeout+0xc8>
  {
    while (__HAL_HASH_GET_FLAG(Flag) == RESET)
 80018e0:	e01c      	b.n	800191c <HASH_WaitOnFlagUntilTimeout+0x58>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018e8:	d018      	beq.n	800191c <HASH_WaitOnFlagUntilTimeout+0x58>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80018ea:	f7fe fed9 	bl	80006a0 <HAL_GetTick>
 80018ee:	4602      	mov	r2, r0
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	1ad3      	subs	r3, r2, r3
 80018f4:	683a      	ldr	r2, [r7, #0]
 80018f6:	429a      	cmp	r2, r3
 80018f8:	d302      	bcc.n	8001900 <HASH_WaitOnFlagUntilTimeout+0x3c>
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d10d      	bne.n	800191c <HASH_WaitOnFlagUntilTimeout+0x58>
        {
          /* Set State to Ready to be able to restart later on */
          hhash->State  = HAL_HASH_STATE_READY;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	2201      	movs	r2, #1
 8001904:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          /* Store time out issue in handle status */
          hhash->Status = HAL_TIMEOUT;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	2203      	movs	r2, #3
 800190c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

          /* Process Unlocked */
          __HAL_UNLOCK(hhash);
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	2200      	movs	r2, #0
 8001914:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          return HAL_TIMEOUT;
 8001918:	2303      	movs	r3, #3
 800191a:	e052      	b.n	80019c2 <HASH_WaitOnFlagUntilTimeout+0xfe>
    while (__HAL_HASH_GET_FLAG(Flag) == RESET)
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	2b08      	cmp	r3, #8
 8001920:	d90a      	bls.n	8001938 <HASH_WaitOnFlagUntilTimeout+0x74>
 8001922:	4b2a      	ldr	r3, [pc, #168]	; (80019cc <HASH_WaitOnFlagUntilTimeout+0x108>)
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	68bb      	ldr	r3, [r7, #8]
 8001928:	4013      	ands	r3, r2
 800192a:	68ba      	ldr	r2, [r7, #8]
 800192c:	429a      	cmp	r2, r3
 800192e:	bf14      	ite	ne
 8001930:	2301      	movne	r3, #1
 8001932:	2300      	moveq	r3, #0
 8001934:	b2db      	uxtb	r3, r3
 8001936:	e009      	b.n	800194c <HASH_WaitOnFlagUntilTimeout+0x88>
 8001938:	4b24      	ldr	r3, [pc, #144]	; (80019cc <HASH_WaitOnFlagUntilTimeout+0x108>)
 800193a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	4013      	ands	r3, r2
 8001940:	68ba      	ldr	r2, [r7, #8]
 8001942:	429a      	cmp	r2, r3
 8001944:	bf14      	ite	ne
 8001946:	2301      	movne	r3, #1
 8001948:	2300      	moveq	r3, #0
 800194a:	b2db      	uxtb	r3, r3
 800194c:	2b00      	cmp	r3, #0
 800194e:	d1c8      	bne.n	80018e2 <HASH_WaitOnFlagUntilTimeout+0x1e>
 8001950:	e036      	b.n	80019c0 <HASH_WaitOnFlagUntilTimeout+0xfc>
  else
  {
    while (__HAL_HASH_GET_FLAG(Flag) != RESET)
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001958:	d018      	beq.n	800198c <HASH_WaitOnFlagUntilTimeout+0xc8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800195a:	f7fe fea1 	bl	80006a0 <HAL_GetTick>
 800195e:	4602      	mov	r2, r0
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	1ad3      	subs	r3, r2, r3
 8001964:	683a      	ldr	r2, [r7, #0]
 8001966:	429a      	cmp	r2, r3
 8001968:	d302      	bcc.n	8001970 <HASH_WaitOnFlagUntilTimeout+0xac>
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d10d      	bne.n	800198c <HASH_WaitOnFlagUntilTimeout+0xc8>
        {
          /* Set State to Ready to be able to restart later on */
          hhash->State  = HAL_HASH_STATE_READY;
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	2201      	movs	r2, #1
 8001974:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          /* Store time out issue in handle status */
          hhash->Status = HAL_TIMEOUT;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	2203      	movs	r2, #3
 800197c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

          /* Process Unlocked */
          __HAL_UNLOCK(hhash);
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	2200      	movs	r2, #0
 8001984:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          return HAL_TIMEOUT;
 8001988:	2303      	movs	r3, #3
 800198a:	e01a      	b.n	80019c2 <HASH_WaitOnFlagUntilTimeout+0xfe>
    while (__HAL_HASH_GET_FLAG(Flag) != RESET)
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	2b08      	cmp	r3, #8
 8001990:	d90a      	bls.n	80019a8 <HASH_WaitOnFlagUntilTimeout+0xe4>
 8001992:	4b0e      	ldr	r3, [pc, #56]	; (80019cc <HASH_WaitOnFlagUntilTimeout+0x108>)
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	68bb      	ldr	r3, [r7, #8]
 8001998:	4013      	ands	r3, r2
 800199a:	68ba      	ldr	r2, [r7, #8]
 800199c:	429a      	cmp	r2, r3
 800199e:	bf0c      	ite	eq
 80019a0:	2301      	moveq	r3, #1
 80019a2:	2300      	movne	r3, #0
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	e009      	b.n	80019bc <HASH_WaitOnFlagUntilTimeout+0xf8>
 80019a8:	4b08      	ldr	r3, [pc, #32]	; (80019cc <HASH_WaitOnFlagUntilTimeout+0x108>)
 80019aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	4013      	ands	r3, r2
 80019b0:	68ba      	ldr	r2, [r7, #8]
 80019b2:	429a      	cmp	r2, r3
 80019b4:	bf0c      	ite	eq
 80019b6:	2301      	moveq	r3, #1
 80019b8:	2300      	movne	r3, #0
 80019ba:	b2db      	uxtb	r3, r3
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d1c8      	bne.n	8001952 <HASH_WaitOnFlagUntilTimeout+0x8e>
        }
      }
    }
  }
  return HAL_OK;
 80019c0:	2300      	movs	r3, #0
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3718      	adds	r7, #24
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	420c0400 	.word	0x420c0400

080019d0 <HASH_Start>:
  * @param  Algorithm HASH algorithm.
  * @retval HAL status
  */
HAL_StatusTypeDef HASH_Start(HASH_HandleTypeDef *hhash, uint8_t *pInBuffer, uint32_t Size, uint8_t *pOutBuffer,
                             uint32_t Timeout, uint32_t Algorithm)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b088      	sub	sp, #32
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	60f8      	str	r0, [r7, #12]
 80019d8:	60b9      	str	r1, [r7, #8]
 80019da:	607a      	str	r2, [r7, #4]
 80019dc:	603b      	str	r3, [r7, #0]
  uint8_t *pInBuffer_tmp;  /* input data address, input parameter of HASH_WriteData()         */
  uint32_t Size_tmp; /* input data size (in bytes), input parameter of HASH_WriteData() */
  HAL_HASH_StateTypeDef State_tmp = hhash->State;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80019e4:	75fb      	strb	r3, [r7, #23]


  /* Initiate HASH processing in case of start or resumption */
  if ((State_tmp == HAL_HASH_STATE_READY) || (State_tmp == HAL_HASH_STATE_SUSPENDED))
 80019e6:	7dfb      	ldrb	r3, [r7, #23]
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d003      	beq.n	80019f4 <HASH_Start+0x24>
 80019ec:	7dfb      	ldrb	r3, [r7, #23]
 80019ee:	2b08      	cmp	r3, #8
 80019f0:	f040 80c7 	bne.w	8001b82 <HASH_Start+0x1b2>
  {
    /* Check input parameters */
    if ((pInBuffer == NULL) || (pOutBuffer == NULL))
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d002      	beq.n	8001a00 <HASH_Start+0x30>
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d105      	bne.n	8001a0c <HASH_Start+0x3c>
    {
      hhash->State = HAL_HASH_STATE_READY;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	2201      	movs	r2, #1
 8001a04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      return  HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e0bb      	b.n	8001b84 <HASH_Start+0x1b4>
    }

    /* Process Locked */
    __HAL_LOCK(hhash);
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d101      	bne.n	8001a1a <HASH_Start+0x4a>
 8001a16:	2302      	movs	r3, #2
 8001a18:	e0b4      	b.n	8001b84 <HASH_Start+0x1b4>
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Check if initialization phase has not been already performed */
    if (hhash->Phase == HAL_HASH_PHASE_READY)
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d123      	bne.n	8001a74 <HASH_Start+0xa4>
    {
      /* Change the HASH state */
      hhash->State = HAL_HASH_STATE_BUSY;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	2202      	movs	r2, #2
 8001a30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Select the HASH algorithm, clear HMAC mode and long key selection bit, reset the HASH processor core */
      MODIFY_REG(HASH->CR, HASH_CR_LKEY | HASH_CR_ALGO | HASH_CR_MODE | HASH_CR_INIT, Algorithm | HASH_CR_INIT);
 8001a34:	4b55      	ldr	r3, [pc, #340]	; (8001b8c <HASH_Start+0x1bc>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8001a3c:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 8001a40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a42:	4313      	orrs	r3, r2
 8001a44:	4a51      	ldr	r2, [pc, #324]	; (8001b8c <HASH_Start+0x1bc>)
 8001a46:	f043 0304 	orr.w	r3, r3, #4
 8001a4a:	6013      	str	r3, [r2, #0]

      /* Configure the number of valid bits in last word of the message */
      __HAL_HASH_SET_NBVALIDBITS(Size);
 8001a4c:	4b4f      	ldr	r3, [pc, #316]	; (8001b8c <HASH_Start+0x1bc>)
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	f023 021f 	bic.w	r2, r3, #31
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	f003 0303 	and.w	r3, r3, #3
 8001a5a:	00db      	lsls	r3, r3, #3
 8001a5c:	494b      	ldr	r1, [pc, #300]	; (8001b8c <HASH_Start+0x1bc>)
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	608b      	str	r3, [r1, #8]

      /* pInBuffer_tmp and Size_tmp are initialized to be used afterwards as
      input parameters of HASH_WriteData() */
      pInBuffer_tmp = pInBuffer;   /* pInBuffer_tmp is set to the input data address */
 8001a62:	68bb      	ldr	r3, [r7, #8]
 8001a64:	61fb      	str	r3, [r7, #28]
      Size_tmp = Size;             /* Size_tmp contains the input data size in bytes */
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	61bb      	str	r3, [r7, #24]

      /* Set the phase */
      hhash->Phase = HAL_HASH_PHASE_PROCESS;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	2202      	movs	r2, #2
 8001a6e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 8001a72:	e02f      	b.n	8001ad4 <HASH_Start+0x104>
    }
    else if (hhash->Phase == HAL_HASH_PHASE_PROCESS)
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8001a7a:	2b02      	cmp	r3, #2
 8001a7c:	d120      	bne.n	8001ac0 <HASH_Start+0xf0>
    {
      /* if the Peripheral has already been initialized, two cases are possible */

      /* Process resumption time ... */
      if (hhash->State == HAL_HASH_STATE_SUSPENDED)
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	2b08      	cmp	r3, #8
 8001a88:	d106      	bne.n	8001a98 <HASH_Start+0xc8>
      {
        /* Since this is resumption, pInBuffer_tmp and Size_tmp are not set
        to the API input parameters but to those saved beforehand by HASH_WriteData()
        when the processing was suspended */
        pInBuffer_tmp = hhash->pHashInBuffPtr;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	68db      	ldr	r3, [r3, #12]
 8001a8e:	61fb      	str	r3, [r7, #28]
        Size_tmp = hhash->HashInCount;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	6a1b      	ldr	r3, [r3, #32]
 8001a94:	61bb      	str	r3, [r7, #24]
 8001a96:	e00e      	b.n	8001ab6 <HASH_Start+0xe6>
      /* ... or multi-buffer HASH processing end */
      else
      {
        /* pInBuffer_tmp and Size_tmp are initialized to be used afterwards as
        input parameters of HASH_WriteData() */
        pInBuffer_tmp = pInBuffer;
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	61fb      	str	r3, [r7, #28]
        Size_tmp = Size;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	61bb      	str	r3, [r7, #24]
        /* Configure the number of valid bits in last word of the message */
        __HAL_HASH_SET_NBVALIDBITS(Size);
 8001aa0:	4b3a      	ldr	r3, [pc, #232]	; (8001b8c <HASH_Start+0x1bc>)
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	f023 021f 	bic.w	r2, r3, #31
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	f003 0303 	and.w	r3, r3, #3
 8001aae:	00db      	lsls	r3, r3, #3
 8001ab0:	4936      	ldr	r1, [pc, #216]	; (8001b8c <HASH_Start+0x1bc>)
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	608b      	str	r3, [r1, #8]
      }
      /* Change the HASH state */
      hhash->State = HAL_HASH_STATE_BUSY;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	2202      	movs	r2, #2
 8001aba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8001abe:	e009      	b.n	8001ad4 <HASH_Start+0x104>
    }
    else
    {
      /* Phase error */
      hhash->State = HAL_HASH_STATE_READY;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hhash);
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	2200      	movs	r2, #0
 8001acc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Return function status */
      return HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e057      	b.n	8001b84 <HASH_Start+0x1b4>
    }


    /* Write input buffer in Data register */
    hhash->Status = HASH_WriteData(hhash, pInBuffer_tmp, Size_tmp);
 8001ad4:	69ba      	ldr	r2, [r7, #24]
 8001ad6:	69f9      	ldr	r1, [r7, #28]
 8001ad8:	68f8      	ldr	r0, [r7, #12]
 8001ada:	f7ff fd4f 	bl	800157c <HASH_WriteData>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	461a      	mov	r2, r3
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (hhash->Status != HAL_OK)
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d003      	beq.n	8001afa <HASH_Start+0x12a>
    {
      return hhash->Status;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001af8:	e044      	b.n	8001b84 <HASH_Start+0x1b4>
    }

    /* If the process has not been suspended, carry on to digest calculation */
    if (hhash->State != HAL_HASH_STATE_SUSPENDED)
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	2b08      	cmp	r3, #8
 8001b04:	d037      	beq.n	8001b76 <HASH_Start+0x1a6>
    {
      /* Start the Digest calculation */
      __HAL_HASH_START_DIGEST();
 8001b06:	4b21      	ldr	r3, [pc, #132]	; (8001b8c <HASH_Start+0x1bc>)
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	4a20      	ldr	r2, [pc, #128]	; (8001b8c <HASH_Start+0x1bc>)
 8001b0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b10:	6093      	str	r3, [r2, #8]

      /* Wait for DCIS flag to be set */
      if (HASH_WaitOnFlagUntilTimeout(hhash, HASH_FLAG_DCIS, RESET, Timeout) != HAL_OK)
 8001b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b14:	2200      	movs	r2, #0
 8001b16:	2102      	movs	r1, #2
 8001b18:	68f8      	ldr	r0, [r7, #12]
 8001b1a:	f7ff fed3 	bl	80018c4 <HASH_WaitOnFlagUntilTimeout>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d001      	beq.n	8001b28 <HASH_Start+0x158>
      {
        return HAL_TIMEOUT;
 8001b24:	2303      	movs	r3, #3
 8001b26:	e02d      	b.n	8001b84 <HASH_Start+0x1b4>
      }

      /* Read the message digest */
      HASH_GetDigest(pOutBuffer, HASH_DIGEST_LENGTH());
 8001b28:	4b18      	ldr	r3, [pc, #96]	; (8001b8c <HASH_Start+0x1bc>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d013      	beq.n	8001b5c <HASH_Start+0x18c>
 8001b34:	4b15      	ldr	r3, [pc, #84]	; (8001b8c <HASH_Start+0x1bc>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8001b3c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001b40:	d00a      	beq.n	8001b58 <HASH_Start+0x188>
 8001b42:	4b12      	ldr	r3, [pc, #72]	; (8001b8c <HASH_Start+0x1bc>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8001b4a:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8001b4e:	d101      	bne.n	8001b54 <HASH_Start+0x184>
 8001b50:	2320      	movs	r3, #32
 8001b52:	e004      	b.n	8001b5e <HASH_Start+0x18e>
 8001b54:	2310      	movs	r3, #16
 8001b56:	e002      	b.n	8001b5e <HASH_Start+0x18e>
 8001b58:	231c      	movs	r3, #28
 8001b5a:	e000      	b.n	8001b5e <HASH_Start+0x18e>
 8001b5c:	2314      	movs	r3, #20
 8001b5e:	4619      	mov	r1, r3
 8001b60:	6838      	ldr	r0, [r7, #0]
 8001b62:	f7ff fd89 	bl	8001678 <HASH_GetDigest>

      /* Change the HASH state */
      hhash->State = HAL_HASH_STATE_READY;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	2201      	movs	r2, #1
 8001b6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Reset HASH state machine */
      hhash->Phase = HAL_HASH_PHASE_READY;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	2201      	movs	r2, #1
 8001b72:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    }

    /* Process Unlocked */
    __HAL_UNLOCK(hhash);
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return function status */
    return HAL_OK;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	e000      	b.n	8001b84 <HASH_Start+0x1b4>

  }
  else
  {
    return HAL_BUSY;
 8001b82:	2302      	movs	r3, #2
  }
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	3720      	adds	r7, #32
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	420c0400 	.word	0x420c0400

08001b90 <HASH_Accumulate>:
  * @param  Size length of the input buffer in bytes, must be a multiple of 4.
  * @param  Algorithm HASH algorithm.
  * @retval HAL status
  */
HAL_StatusTypeDef HASH_Accumulate(HASH_HandleTypeDef *hhash, uint8_t *pInBuffer, uint32_t Size, uint32_t Algorithm)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b088      	sub	sp, #32
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	60f8      	str	r0, [r7, #12]
 8001b98:	60b9      	str	r1, [r7, #8]
 8001b9a:	607a      	str	r2, [r7, #4]
 8001b9c:	603b      	str	r3, [r7, #0]
  uint8_t *pInBuffer_tmp;   /* input data address, input parameter of HASH_WriteData()         */
  uint32_t Size_tmp;  /* input data size (in bytes), input parameter of HASH_WriteData() */
  HAL_HASH_StateTypeDef State_tmp = hhash->State;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ba4:	75fb      	strb	r3, [r7, #23]

  /* Make sure the input buffer size (in bytes) is a multiple of 4 */
  if ((Size % 4U) != 0U)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	f003 0303 	and.w	r3, r3, #3
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d001      	beq.n	8001bb4 <HASH_Accumulate+0x24>
  {
    return  HAL_ERROR;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e06e      	b.n	8001c92 <HASH_Accumulate+0x102>
  }

  /* Initiate HASH processing in case of start or resumption */
  if ((State_tmp == HAL_HASH_STATE_READY) || (State_tmp == HAL_HASH_STATE_SUSPENDED))
 8001bb4:	7dfb      	ldrb	r3, [r7, #23]
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d002      	beq.n	8001bc0 <HASH_Accumulate+0x30>
 8001bba:	7dfb      	ldrb	r3, [r7, #23]
 8001bbc:	2b08      	cmp	r3, #8
 8001bbe:	d167      	bne.n	8001c90 <HASH_Accumulate+0x100>
  {
    /* Check input parameters */
    if ((pInBuffer == NULL) || (Size == 0U))
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d002      	beq.n	8001bcc <HASH_Accumulate+0x3c>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d105      	bne.n	8001bd8 <HASH_Accumulate+0x48>
    {
      hhash->State = HAL_HASH_STATE_READY;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	2201      	movs	r2, #1
 8001bd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      return  HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	e05c      	b.n	8001c92 <HASH_Accumulate+0x102>
    }

    /* Process Locked */
    __HAL_LOCK(hhash);
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	d101      	bne.n	8001be6 <HASH_Accumulate+0x56>
 8001be2:	2302      	movs	r3, #2
 8001be4:	e055      	b.n	8001c92 <HASH_Accumulate+0x102>
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	2201      	movs	r2, #1
 8001bea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* If resuming the HASH processing */
    if (hhash->State == HAL_HASH_STATE_SUSPENDED)
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	2b08      	cmp	r3, #8
 8001bf8:	d10a      	bne.n	8001c10 <HASH_Accumulate+0x80>
    {
      /* Change the HASH state */
      hhash->State = HAL_HASH_STATE_BUSY;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	2202      	movs	r2, #2
 8001bfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Since this is resumption, pInBuffer_tmp and Size_tmp are not set
         to the API input parameters but to those saved beforehand by HASH_WriteData()
         when the processing was suspended */
      pInBuffer_tmp = hhash->pHashInBuffPtr;  /* pInBuffer_tmp is set to the input data address */
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	68db      	ldr	r3, [r3, #12]
 8001c06:	61fb      	str	r3, [r7, #28]
      Size_tmp = hhash->HashInCount;          /* Size_tmp contains the input data size in bytes */
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	6a1b      	ldr	r3, [r3, #32]
 8001c0c:	61bb      	str	r3, [r7, #24]
 8001c0e:	e01c      	b.n	8001c4a <HASH_Accumulate+0xba>

    }
    else
    {
      /* Change the HASH state */
      hhash->State = HAL_HASH_STATE_BUSY;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	2202      	movs	r2, #2
 8001c14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* pInBuffer_tmp and Size_tmp are initialized to be used afterwards as
         input parameters of HASH_WriteData() */
      pInBuffer_tmp = pInBuffer;    /* pInBuffer_tmp is set to the input data address */
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	61fb      	str	r3, [r7, #28]
      Size_tmp = Size;              /* Size_tmp contains the input data size in bytes */
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	61bb      	str	r3, [r7, #24]

      /* Check if initialization phase has already be performed */
      if (hhash->Phase == HAL_HASH_PHASE_READY)
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8001c26:	2b01      	cmp	r3, #1
 8001c28:	d10b      	bne.n	8001c42 <HASH_Accumulate+0xb2>
      {
        /* Select the HASH algorithm, clear HMAC mode and long key selection bit, reset the HASH processor core */
        MODIFY_REG(HASH->CR, HASH_CR_LKEY | HASH_CR_ALGO | HASH_CR_MODE | HASH_CR_INIT, Algorithm | HASH_CR_INIT);
 8001c2a:	4b1c      	ldr	r3, [pc, #112]	; (8001c9c <HASH_Accumulate+0x10c>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8001c32:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 8001c36:	683a      	ldr	r2, [r7, #0]
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	4a18      	ldr	r2, [pc, #96]	; (8001c9c <HASH_Accumulate+0x10c>)
 8001c3c:	f043 0304 	orr.w	r3, r3, #4
 8001c40:	6013      	str	r3, [r2, #0]
      }

      /* Set the phase */
      hhash->Phase = HAL_HASH_PHASE_PROCESS;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	2202      	movs	r2, #2
 8001c46:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    }

    /* Write input buffer in Data register */
    hhash->Status = HASH_WriteData(hhash, pInBuffer_tmp, Size_tmp);
 8001c4a:	69ba      	ldr	r2, [r7, #24]
 8001c4c:	69f9      	ldr	r1, [r7, #28]
 8001c4e:	68f8      	ldr	r0, [r7, #12]
 8001c50:	f7ff fc94 	bl	800157c <HASH_WriteData>
 8001c54:	4603      	mov	r3, r0
 8001c56:	461a      	mov	r2, r3
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (hhash->Status != HAL_OK)
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d003      	beq.n	8001c70 <HASH_Accumulate+0xe0>
    {
      return hhash->Status;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001c6e:	e010      	b.n	8001c92 <HASH_Accumulate+0x102>
    }

    /* If the process has not been suspended, move the state to Ready */
    if (hhash->State != HAL_HASH_STATE_SUSPENDED)
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c76:	b2db      	uxtb	r3, r3
 8001c78:	2b08      	cmp	r3, #8
 8001c7a:	d003      	beq.n	8001c84 <HASH_Accumulate+0xf4>
    {
      /* Change the HASH state */
      hhash->State = HAL_HASH_STATE_READY;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	2201      	movs	r2, #1
 8001c80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hhash);
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	2200      	movs	r2, #0
 8001c88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return function status */
    return HAL_OK;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	e000      	b.n	8001c92 <HASH_Accumulate+0x102>

  }
  else
  {
    return HAL_BUSY;
 8001c90:	2302      	movs	r3, #2
  }


}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3720      	adds	r7, #32
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	420c0400 	.word	0x420c0400

08001ca0 <HAL_HASHEx_SHA256_Accmlt>:
  * @param  pInBuffer pointer to the input buffer (buffer to be hashed).
  * @param  Size length of the input buffer in bytes, must be a multiple of 4.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HASHEx_SHA256_Accmlt(HASH_HandleTypeDef *hhash, uint8_t *pInBuffer, uint32_t Size)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b084      	sub	sp, #16
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	60f8      	str	r0, [r7, #12]
 8001ca8:	60b9      	str	r1, [r7, #8]
 8001caa:	607a      	str	r2, [r7, #4]
  return  HASH_Accumulate(hhash, pInBuffer, Size, HASH_ALGOSELECTION_SHA256);
 8001cac:	f44f 23c0 	mov.w	r3, #393216	; 0x60000
 8001cb0:	687a      	ldr	r2, [r7, #4]
 8001cb2:	68b9      	ldr	r1, [r7, #8]
 8001cb4:	68f8      	ldr	r0, [r7, #12]
 8001cb6:	f7ff ff6b 	bl	8001b90 <HASH_Accumulate>
 8001cba:	4603      	mov	r3, r0
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	3710      	adds	r7, #16
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}

08001cc4 <HAL_HASHEx_SHA256_Accmlt_End>:
  * @param  Timeout Timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HASHEx_SHA256_Accmlt_End(HASH_HandleTypeDef *hhash, uint8_t *pInBuffer, uint32_t Size,
                                               uint8_t *pOutBuffer, uint32_t Timeout)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b086      	sub	sp, #24
 8001cc8:	af02      	add	r7, sp, #8
 8001cca:	60f8      	str	r0, [r7, #12]
 8001ccc:	60b9      	str	r1, [r7, #8]
 8001cce:	607a      	str	r2, [r7, #4]
 8001cd0:	603b      	str	r3, [r7, #0]
  return HASH_Start(hhash, pInBuffer, Size, pOutBuffer, Timeout, HASH_ALGOSELECTION_SHA256);
 8001cd2:	f44f 23c0 	mov.w	r3, #393216	; 0x60000
 8001cd6:	9301      	str	r3, [sp, #4]
 8001cd8:	69bb      	ldr	r3, [r7, #24]
 8001cda:	9300      	str	r3, [sp, #0]
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	687a      	ldr	r2, [r7, #4]
 8001ce0:	68b9      	ldr	r1, [r7, #8]
 8001ce2:	68f8      	ldr	r0, [r7, #12]
 8001ce4:	f7ff fe74 	bl	80019d0 <HASH_Start>
 8001ce8:	4603      	mov	r3, r0
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3710      	adds	r7, #16
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
	...

08001cf4 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b085      	sub	sp, #20
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8001d00:	4b0b      	ldr	r3, [pc, #44]	; (8001d30 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f003 0301 	and.w	r3, r3, #1
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d002      	beq.n	8001d12 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	73fb      	strb	r3, [r7, #15]
 8001d10:	e007      	b.n	8001d22 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8001d12:	4b07      	ldr	r3, [pc, #28]	; (8001d30 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f023 0204 	bic.w	r2, r3, #4
 8001d1a:	4905      	ldr	r1, [pc, #20]	; (8001d30 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	600b      	str	r3, [r1, #0]
  }

  return status;
 8001d22:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	3714      	adds	r7, #20
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr
 8001d30:	40030400 	.word	0x40030400

08001d34 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8001d38:	4b05      	ldr	r3, [pc, #20]	; (8001d50 <HAL_ICACHE_Enable+0x1c>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a04      	ldr	r2, [pc, #16]	; (8001d50 <HAL_ICACHE_Enable+0x1c>)
 8001d3e:	f043 0301 	orr.w	r3, r3, #1
 8001d42:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8001d44:	2300      	movs	r3, #0
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr
 8001d50:	40030400 	.word	0x40030400

08001d54 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b085      	sub	sp, #20
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8001d5c:	4b39      	ldr	r3, [pc, #228]	; (8001e44 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001d5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d60:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d64:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8001d66:	68ba      	ldr	r2, [r7, #8]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	429a      	cmp	r2, r3
 8001d6c:	d10b      	bne.n	8001d86 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d74:	d905      	bls.n	8001d82 <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8001d76:	4b33      	ldr	r3, [pc, #204]	; (8001e44 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001d78:	68db      	ldr	r3, [r3, #12]
 8001d7a:	4a32      	ldr	r2, [pc, #200]	; (8001e44 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001d7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d80:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8001d82:	2300      	movs	r3, #0
 8001d84:	e057      	b.n	8001e36 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d8c:	d90a      	bls.n	8001da4 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8001d8e:	4b2d      	ldr	r3, [pc, #180]	; (8001e44 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001d90:	68db      	ldr	r3, [r3, #12]
 8001d92:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	4a2a      	ldr	r2, [pc, #168]	; (8001e44 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001d9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001da0:	60d3      	str	r3, [r2, #12]
 8001da2:	e007      	b.n	8001db4 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8001da4:	4b27      	ldr	r3, [pc, #156]	; (8001e44 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8001dac:	4925      	ldr	r1, [pc, #148]	; (8001e44 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	4313      	orrs	r3, r2
 8001db2:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8001db4:	4b24      	ldr	r3, [pc, #144]	; (8001e48 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a24      	ldr	r2, [pc, #144]	; (8001e4c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8001dba:	fba2 2303 	umull	r2, r3, r2, r3
 8001dbe:	099b      	lsrs	r3, r3, #6
 8001dc0:	2232      	movs	r2, #50	; 0x32
 8001dc2:	fb02 f303 	mul.w	r3, r2, r3
 8001dc6:	4a21      	ldr	r2, [pc, #132]	; (8001e4c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8001dc8:	fba2 2303 	umull	r2, r3, r2, r3
 8001dcc:	099b      	lsrs	r3, r3, #6
 8001dce:	3301      	adds	r3, #1
 8001dd0:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8001dd2:	e002      	b.n	8001dda <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	3b01      	subs	r3, #1
 8001dd8:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8001dda:	4b1a      	ldr	r3, [pc, #104]	; (8001e44 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001ddc:	68db      	ldr	r3, [r3, #12]
 8001dde:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d102      	bne.n	8001dec <HAL_PWREx_ControlVoltageScaling+0x98>
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d1f3      	bne.n	8001dd4 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d01b      	beq.n	8001e2a <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8001df2:	4b15      	ldr	r3, [pc, #84]	; (8001e48 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a15      	ldr	r2, [pc, #84]	; (8001e4c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8001df8:	fba2 2303 	umull	r2, r3, r2, r3
 8001dfc:	099b      	lsrs	r3, r3, #6
 8001dfe:	2232      	movs	r2, #50	; 0x32
 8001e00:	fb02 f303 	mul.w	r3, r2, r3
 8001e04:	4a11      	ldr	r2, [pc, #68]	; (8001e4c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8001e06:	fba2 2303 	umull	r2, r3, r2, r3
 8001e0a:	099b      	lsrs	r3, r3, #6
 8001e0c:	3301      	adds	r3, #1
 8001e0e:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8001e10:	e002      	b.n	8001e18 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	3b01      	subs	r3, #1
 8001e16:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8001e18:	4b0a      	ldr	r3, [pc, #40]	; (8001e44 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001e1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d102      	bne.n	8001e2a <HAL_PWREx_ControlVoltageScaling+0xd6>
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d1f3      	bne.n	8001e12 <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d101      	bne.n	8001e34 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8001e30:	2303      	movs	r3, #3
 8001e32:	e000      	b.n	8001e36 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8001e34:	2300      	movs	r3, #0
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3714      	adds	r7, #20
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop
 8001e44:	46020800 	.word	0x46020800
 8001e48:	20000024 	.word	0x20000024
 8001e4c:	10624dd3 	.word	0x10624dd3

08001e50 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8001e54:	4b04      	ldr	r3, [pc, #16]	; (8001e68 <HAL_PWREx_GetVoltageRange+0x18>)
 8001e56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e58:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop
 8001e68:	46020800 	.word	0x46020800

08001e6c <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b085      	sub	sp, #20
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8001e74:	4b22      	ldr	r3, [pc, #136]	; (8001f00 <HAL_PWREx_ConfigSupply+0x94>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a22      	ldr	r2, [pc, #136]	; (8001f04 <HAL_PWREx_ConfigSupply+0x98>)
 8001e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e7e:	099b      	lsrs	r3, r3, #6
 8001e80:	2232      	movs	r2, #50	; 0x32
 8001e82:	fb02 f303 	mul.w	r3, r2, r3
 8001e86:	4a1f      	ldr	r2, [pc, #124]	; (8001f04 <HAL_PWREx_ConfigSupply+0x98>)
 8001e88:	fba2 2303 	umull	r2, r3, r2, r3
 8001e8c:	099b      	lsrs	r3, r3, #6
 8001e8e:	3301      	adds	r3, #1
 8001e90:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d113      	bne.n	8001ec0 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8001e98:	4b1b      	ldr	r3, [pc, #108]	; (8001f08 <HAL_PWREx_ConfigSupply+0x9c>)
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	4a1a      	ldr	r2, [pc, #104]	; (8001f08 <HAL_PWREx_ConfigSupply+0x9c>)
 8001e9e:	f023 0302 	bic.w	r3, r3, #2
 8001ea2:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8001ea4:	e002      	b.n	8001eac <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	3b01      	subs	r3, #1
 8001eaa:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8001eac:	4b16      	ldr	r3, [pc, #88]	; (8001f08 <HAL_PWREx_ConfigSupply+0x9c>)
 8001eae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eb0:	f003 0302 	and.w	r3, r3, #2
 8001eb4:	2b02      	cmp	r3, #2
 8001eb6:	d116      	bne.n	8001ee6 <HAL_PWREx_ConfigSupply+0x7a>
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d1f3      	bne.n	8001ea6 <HAL_PWREx_ConfigSupply+0x3a>
 8001ebe:	e012      	b.n	8001ee6 <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8001ec0:	4b11      	ldr	r3, [pc, #68]	; (8001f08 <HAL_PWREx_ConfigSupply+0x9c>)
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	4a10      	ldr	r2, [pc, #64]	; (8001f08 <HAL_PWREx_ConfigSupply+0x9c>)
 8001ec6:	f043 0302 	orr.w	r3, r3, #2
 8001eca:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8001ecc:	e002      	b.n	8001ed4 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	3b01      	subs	r3, #1
 8001ed2:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8001ed4:	4b0c      	ldr	r3, [pc, #48]	; (8001f08 <HAL_PWREx_ConfigSupply+0x9c>)
 8001ed6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ed8:	f003 0302 	and.w	r3, r3, #2
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d102      	bne.n	8001ee6 <HAL_PWREx_ConfigSupply+0x7a>
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d1f3      	bne.n	8001ece <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d101      	bne.n	8001ef0 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8001eec:	2303      	movs	r3, #3
 8001eee:	e000      	b.n	8001ef2 <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8001ef0:	2300      	movs	r3, #0
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3714      	adds	r7, #20
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr
 8001efe:	bf00      	nop
 8001f00:	20000024 	.word	0x20000024
 8001f04:	10624dd3 	.word	0x10624dd3
 8001f08:	46020800 	.word	0x46020800

08001f0c <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8001f10:	4b05      	ldr	r3, [pc, #20]	; (8001f28 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001f12:	691b      	ldr	r3, [r3, #16]
 8001f14:	4a04      	ldr	r2, [pc, #16]	; (8001f28 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001f16:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001f1a:	6113      	str	r3, [r2, #16]
}
 8001f1c:	bf00      	nop
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr
 8001f26:	bf00      	nop
 8001f28:	46020800 	.word	0x46020800

08001f2c <HAL_PWREx_DisableUCPDDeadBattery>:
  *         pull-down or to handover control to the UCPD (the UCPD must be
  *         initialized before doing the disable).
  * @retval None.
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->UCPDR, PWR_UCPDR_UCPD_DBDIS);
 8001f30:	4b05      	ldr	r3, [pc, #20]	; (8001f48 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f34:	4a04      	ldr	r2, [pc, #16]	; (8001f48 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001f36:	f043 0301 	orr.w	r3, r3, #1
 8001f3a:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8001f3c:	bf00      	nop
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr
 8001f46:	bf00      	nop
 8001f48:	46020800 	.word	0x46020800

08001f4c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b08e      	sub	sp, #56	; 0x38
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8001f54:	2300      	movs	r3, #0
 8001f56:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d102      	bne.n	8001f66 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	f000 bec8 	b.w	8002cf6 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f66:	4b99      	ldr	r3, [pc, #612]	; (80021cc <HAL_RCC_OscConfig+0x280>)
 8001f68:	69db      	ldr	r3, [r3, #28]
 8001f6a:	f003 030c 	and.w	r3, r3, #12
 8001f6e:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f70:	4b96      	ldr	r3, [pc, #600]	; (80021cc <HAL_RCC_OscConfig+0x280>)
 8001f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f74:	f003 0303 	and.w	r3, r3, #3
 8001f78:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 0310 	and.w	r3, r3, #16
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	f000 816c 	beq.w	8002260 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d007      	beq.n	8001f9e <HAL_RCC_OscConfig+0x52>
 8001f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f90:	2b0c      	cmp	r3, #12
 8001f92:	f040 80de 	bne.w	8002152 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	f040 80da 	bne.w	8002152 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	69db      	ldr	r3, [r3, #28]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d102      	bne.n	8001fac <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	f000 bea5 	b.w	8002cf6 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001fb0:	4b86      	ldr	r3, [pc, #536]	; (80021cc <HAL_RCC_OscConfig+0x280>)
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d004      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x7a>
 8001fbc:	4b83      	ldr	r3, [pc, #524]	; (80021cc <HAL_RCC_OscConfig+0x280>)
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8001fc4:	e005      	b.n	8001fd2 <HAL_RCC_OscConfig+0x86>
 8001fc6:	4b81      	ldr	r3, [pc, #516]	; (80021cc <HAL_RCC_OscConfig+0x280>)
 8001fc8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001fcc:	041b      	lsls	r3, r3, #16
 8001fce:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d255      	bcs.n	8002082 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d10a      	bne.n	8001ff2 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f001 f9df 	bl	80033a4 <RCC_SetFlashLatencyFromMSIRange>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d002      	beq.n	8001ff2 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	f000 be82 	b.w	8002cf6 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8001ff2:	4b76      	ldr	r3, [pc, #472]	; (80021cc <HAL_RCC_OscConfig+0x280>)
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	4a75      	ldr	r2, [pc, #468]	; (80021cc <HAL_RCC_OscConfig+0x280>)
 8001ff8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001ffc:	6093      	str	r3, [r2, #8]
 8001ffe:	4b73      	ldr	r3, [pc, #460]	; (80021cc <HAL_RCC_OscConfig+0x280>)
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800200a:	4970      	ldr	r1, [pc, #448]	; (80021cc <HAL_RCC_OscConfig+0x280>)
 800200c:	4313      	orrs	r3, r2
 800200e:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002014:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8002018:	d309      	bcc.n	800202e <HAL_RCC_OscConfig+0xe2>
 800201a:	4b6c      	ldr	r3, [pc, #432]	; (80021cc <HAL_RCC_OscConfig+0x280>)
 800201c:	68db      	ldr	r3, [r3, #12]
 800201e:	f023 021f 	bic.w	r2, r3, #31
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6a1b      	ldr	r3, [r3, #32]
 8002026:	4969      	ldr	r1, [pc, #420]	; (80021cc <HAL_RCC_OscConfig+0x280>)
 8002028:	4313      	orrs	r3, r2
 800202a:	60cb      	str	r3, [r1, #12]
 800202c:	e07e      	b.n	800212c <HAL_RCC_OscConfig+0x1e0>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002032:	2b00      	cmp	r3, #0
 8002034:	da0a      	bge.n	800204c <HAL_RCC_OscConfig+0x100>
 8002036:	4b65      	ldr	r3, [pc, #404]	; (80021cc <HAL_RCC_OscConfig+0x280>)
 8002038:	68db      	ldr	r3, [r3, #12]
 800203a:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6a1b      	ldr	r3, [r3, #32]
 8002042:	015b      	lsls	r3, r3, #5
 8002044:	4961      	ldr	r1, [pc, #388]	; (80021cc <HAL_RCC_OscConfig+0x280>)
 8002046:	4313      	orrs	r3, r2
 8002048:	60cb      	str	r3, [r1, #12]
 800204a:	e06f      	b.n	800212c <HAL_RCC_OscConfig+0x1e0>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002050:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002054:	d30a      	bcc.n	800206c <HAL_RCC_OscConfig+0x120>
 8002056:	4b5d      	ldr	r3, [pc, #372]	; (80021cc <HAL_RCC_OscConfig+0x280>)
 8002058:	68db      	ldr	r3, [r3, #12]
 800205a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6a1b      	ldr	r3, [r3, #32]
 8002062:	029b      	lsls	r3, r3, #10
 8002064:	4959      	ldr	r1, [pc, #356]	; (80021cc <HAL_RCC_OscConfig+0x280>)
 8002066:	4313      	orrs	r3, r2
 8002068:	60cb      	str	r3, [r1, #12]
 800206a:	e05f      	b.n	800212c <HAL_RCC_OscConfig+0x1e0>
 800206c:	4b57      	ldr	r3, [pc, #348]	; (80021cc <HAL_RCC_OscConfig+0x280>)
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6a1b      	ldr	r3, [r3, #32]
 8002078:	03db      	lsls	r3, r3, #15
 800207a:	4954      	ldr	r1, [pc, #336]	; (80021cc <HAL_RCC_OscConfig+0x280>)
 800207c:	4313      	orrs	r3, r2
 800207e:	60cb      	str	r3, [r1, #12]
 8002080:	e054      	b.n	800212c <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8002082:	4b52      	ldr	r3, [pc, #328]	; (80021cc <HAL_RCC_OscConfig+0x280>)
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	4a51      	ldr	r2, [pc, #324]	; (80021cc <HAL_RCC_OscConfig+0x280>)
 8002088:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800208c:	6093      	str	r3, [r2, #8]
 800208e:	4b4f      	ldr	r3, [pc, #316]	; (80021cc <HAL_RCC_OscConfig+0x280>)
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800209a:	494c      	ldr	r1, [pc, #304]	; (80021cc <HAL_RCC_OscConfig+0x280>)
 800209c:	4313      	orrs	r3, r2
 800209e:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a4:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80020a8:	d309      	bcc.n	80020be <HAL_RCC_OscConfig+0x172>
 80020aa:	4b48      	ldr	r3, [pc, #288]	; (80021cc <HAL_RCC_OscConfig+0x280>)
 80020ac:	68db      	ldr	r3, [r3, #12]
 80020ae:	f023 021f 	bic.w	r2, r3, #31
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6a1b      	ldr	r3, [r3, #32]
 80020b6:	4945      	ldr	r1, [pc, #276]	; (80021cc <HAL_RCC_OscConfig+0x280>)
 80020b8:	4313      	orrs	r3, r2
 80020ba:	60cb      	str	r3, [r1, #12]
 80020bc:	e028      	b.n	8002110 <HAL_RCC_OscConfig+0x1c4>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	da0a      	bge.n	80020dc <HAL_RCC_OscConfig+0x190>
 80020c6:	4b41      	ldr	r3, [pc, #260]	; (80021cc <HAL_RCC_OscConfig+0x280>)
 80020c8:	68db      	ldr	r3, [r3, #12]
 80020ca:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6a1b      	ldr	r3, [r3, #32]
 80020d2:	015b      	lsls	r3, r3, #5
 80020d4:	493d      	ldr	r1, [pc, #244]	; (80021cc <HAL_RCC_OscConfig+0x280>)
 80020d6:	4313      	orrs	r3, r2
 80020d8:	60cb      	str	r3, [r1, #12]
 80020da:	e019      	b.n	8002110 <HAL_RCC_OscConfig+0x1c4>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020e4:	d30a      	bcc.n	80020fc <HAL_RCC_OscConfig+0x1b0>
 80020e6:	4b39      	ldr	r3, [pc, #228]	; (80021cc <HAL_RCC_OscConfig+0x280>)
 80020e8:	68db      	ldr	r3, [r3, #12]
 80020ea:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6a1b      	ldr	r3, [r3, #32]
 80020f2:	029b      	lsls	r3, r3, #10
 80020f4:	4935      	ldr	r1, [pc, #212]	; (80021cc <HAL_RCC_OscConfig+0x280>)
 80020f6:	4313      	orrs	r3, r2
 80020f8:	60cb      	str	r3, [r1, #12]
 80020fa:	e009      	b.n	8002110 <HAL_RCC_OscConfig+0x1c4>
 80020fc:	4b33      	ldr	r3, [pc, #204]	; (80021cc <HAL_RCC_OscConfig+0x280>)
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6a1b      	ldr	r3, [r3, #32]
 8002108:	03db      	lsls	r3, r3, #15
 800210a:	4930      	ldr	r1, [pc, #192]	; (80021cc <HAL_RCC_OscConfig+0x280>)
 800210c:	4313      	orrs	r3, r2
 800210e:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002112:	2b00      	cmp	r3, #0
 8002114:	d10a      	bne.n	800212c <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800211a:	4618      	mov	r0, r3
 800211c:	f001 f942 	bl	80033a4 <RCC_SetFlashLatencyFromMSIRange>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d002      	beq.n	800212c <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	f000 bde5 	b.w	8002cf6 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 800212c:	f001 f8e4 	bl	80032f8 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002130:	4b27      	ldr	r3, [pc, #156]	; (80021d0 <HAL_RCC_OscConfig+0x284>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4618      	mov	r0, r3
 8002136:	f7fe fa69 	bl	800060c <HAL_InitTick>
 800213a:	4603      	mov	r3, r0
 800213c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 8002140:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002144:	2b00      	cmp	r3, #0
 8002146:	f000 808a 	beq.w	800225e <HAL_RCC_OscConfig+0x312>
        {
          return status;
 800214a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800214e:	f000 bdd2 	b.w	8002cf6 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	69db      	ldr	r3, [r3, #28]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d066      	beq.n	8002228 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 800215a:	4b1c      	ldr	r3, [pc, #112]	; (80021cc <HAL_RCC_OscConfig+0x280>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a1b      	ldr	r2, [pc, #108]	; (80021cc <HAL_RCC_OscConfig+0x280>)
 8002160:	f043 0301 	orr.w	r3, r3, #1
 8002164:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002166:	f7fe fa9b 	bl	80006a0 <HAL_GetTick>
 800216a:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800216c:	e009      	b.n	8002182 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800216e:	f7fe fa97 	bl	80006a0 <HAL_GetTick>
 8002172:	4602      	mov	r2, r0
 8002174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002176:	1ad3      	subs	r3, r2, r3
 8002178:	2b02      	cmp	r3, #2
 800217a:	d902      	bls.n	8002182 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 800217c:	2303      	movs	r3, #3
 800217e:	f000 bdba 	b.w	8002cf6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8002182:	4b12      	ldr	r3, [pc, #72]	; (80021cc <HAL_RCC_OscConfig+0x280>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 0304 	and.w	r3, r3, #4
 800218a:	2b00      	cmp	r3, #0
 800218c:	d0ef      	beq.n	800216e <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800218e:	4b0f      	ldr	r3, [pc, #60]	; (80021cc <HAL_RCC_OscConfig+0x280>)
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	4a0e      	ldr	r2, [pc, #56]	; (80021cc <HAL_RCC_OscConfig+0x280>)
 8002194:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002198:	6093      	str	r3, [r2, #8]
 800219a:	4b0c      	ldr	r3, [pc, #48]	; (80021cc <HAL_RCC_OscConfig+0x280>)
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a6:	4909      	ldr	r1, [pc, #36]	; (80021cc <HAL_RCC_OscConfig+0x280>)
 80021a8:	4313      	orrs	r3, r2
 80021aa:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b0:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80021b4:	d30e      	bcc.n	80021d4 <HAL_RCC_OscConfig+0x288>
 80021b6:	4b05      	ldr	r3, [pc, #20]	; (80021cc <HAL_RCC_OscConfig+0x280>)
 80021b8:	68db      	ldr	r3, [r3, #12]
 80021ba:	f023 021f 	bic.w	r2, r3, #31
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6a1b      	ldr	r3, [r3, #32]
 80021c2:	4902      	ldr	r1, [pc, #8]	; (80021cc <HAL_RCC_OscConfig+0x280>)
 80021c4:	4313      	orrs	r3, r2
 80021c6:	60cb      	str	r3, [r1, #12]
 80021c8:	e04a      	b.n	8002260 <HAL_RCC_OscConfig+0x314>
 80021ca:	bf00      	nop
 80021cc:	46020c00 	.word	0x46020c00
 80021d0:	20000000 	.word	0x20000000
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d8:	2b00      	cmp	r3, #0
 80021da:	da0a      	bge.n	80021f2 <HAL_RCC_OscConfig+0x2a6>
 80021dc:	4b98      	ldr	r3, [pc, #608]	; (8002440 <HAL_RCC_OscConfig+0x4f4>)
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6a1b      	ldr	r3, [r3, #32]
 80021e8:	015b      	lsls	r3, r3, #5
 80021ea:	4995      	ldr	r1, [pc, #596]	; (8002440 <HAL_RCC_OscConfig+0x4f4>)
 80021ec:	4313      	orrs	r3, r2
 80021ee:	60cb      	str	r3, [r1, #12]
 80021f0:	e036      	b.n	8002260 <HAL_RCC_OscConfig+0x314>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021fa:	d30a      	bcc.n	8002212 <HAL_RCC_OscConfig+0x2c6>
 80021fc:	4b90      	ldr	r3, [pc, #576]	; (8002440 <HAL_RCC_OscConfig+0x4f4>)
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6a1b      	ldr	r3, [r3, #32]
 8002208:	029b      	lsls	r3, r3, #10
 800220a:	498d      	ldr	r1, [pc, #564]	; (8002440 <HAL_RCC_OscConfig+0x4f4>)
 800220c:	4313      	orrs	r3, r2
 800220e:	60cb      	str	r3, [r1, #12]
 8002210:	e026      	b.n	8002260 <HAL_RCC_OscConfig+0x314>
 8002212:	4b8b      	ldr	r3, [pc, #556]	; (8002440 <HAL_RCC_OscConfig+0x4f4>)
 8002214:	68db      	ldr	r3, [r3, #12]
 8002216:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6a1b      	ldr	r3, [r3, #32]
 800221e:	03db      	lsls	r3, r3, #15
 8002220:	4987      	ldr	r1, [pc, #540]	; (8002440 <HAL_RCC_OscConfig+0x4f4>)
 8002222:	4313      	orrs	r3, r2
 8002224:	60cb      	str	r3, [r1, #12]
 8002226:	e01b      	b.n	8002260 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8002228:	4b85      	ldr	r3, [pc, #532]	; (8002440 <HAL_RCC_OscConfig+0x4f4>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a84      	ldr	r2, [pc, #528]	; (8002440 <HAL_RCC_OscConfig+0x4f4>)
 800222e:	f023 0301 	bic.w	r3, r3, #1
 8002232:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002234:	f7fe fa34 	bl	80006a0 <HAL_GetTick>
 8002238:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800223a:	e009      	b.n	8002250 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800223c:	f7fe fa30 	bl	80006a0 <HAL_GetTick>
 8002240:	4602      	mov	r2, r0
 8002242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	2b02      	cmp	r3, #2
 8002248:	d902      	bls.n	8002250 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 800224a:	2303      	movs	r3, #3
 800224c:	f000 bd53 	b.w	8002cf6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8002250:	4b7b      	ldr	r3, [pc, #492]	; (8002440 <HAL_RCC_OscConfig+0x4f4>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 0304 	and.w	r3, r3, #4
 8002258:	2b00      	cmp	r3, #0
 800225a:	d1ef      	bne.n	800223c <HAL_RCC_OscConfig+0x2f0>
 800225c:	e000      	b.n	8002260 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800225e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 0301 	and.w	r3, r3, #1
 8002268:	2b00      	cmp	r3, #0
 800226a:	f000 808b 	beq.w	8002384 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800226e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002270:	2b08      	cmp	r3, #8
 8002272:	d005      	beq.n	8002280 <HAL_RCC_OscConfig+0x334>
 8002274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002276:	2b0c      	cmp	r3, #12
 8002278:	d109      	bne.n	800228e <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800227a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800227c:	2b03      	cmp	r3, #3
 800227e:	d106      	bne.n	800228e <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d17d      	bne.n	8002384 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	f000 bd34 	b.w	8002cf6 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002296:	d106      	bne.n	80022a6 <HAL_RCC_OscConfig+0x35a>
 8002298:	4b69      	ldr	r3, [pc, #420]	; (8002440 <HAL_RCC_OscConfig+0x4f4>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a68      	ldr	r2, [pc, #416]	; (8002440 <HAL_RCC_OscConfig+0x4f4>)
 800229e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022a2:	6013      	str	r3, [r2, #0]
 80022a4:	e041      	b.n	800232a <HAL_RCC_OscConfig+0x3de>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022ae:	d112      	bne.n	80022d6 <HAL_RCC_OscConfig+0x38a>
 80022b0:	4b63      	ldr	r3, [pc, #396]	; (8002440 <HAL_RCC_OscConfig+0x4f4>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a62      	ldr	r2, [pc, #392]	; (8002440 <HAL_RCC_OscConfig+0x4f4>)
 80022b6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022ba:	6013      	str	r3, [r2, #0]
 80022bc:	4b60      	ldr	r3, [pc, #384]	; (8002440 <HAL_RCC_OscConfig+0x4f4>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a5f      	ldr	r2, [pc, #380]	; (8002440 <HAL_RCC_OscConfig+0x4f4>)
 80022c2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80022c6:	6013      	str	r3, [r2, #0]
 80022c8:	4b5d      	ldr	r3, [pc, #372]	; (8002440 <HAL_RCC_OscConfig+0x4f4>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a5c      	ldr	r2, [pc, #368]	; (8002440 <HAL_RCC_OscConfig+0x4f4>)
 80022ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022d2:	6013      	str	r3, [r2, #0]
 80022d4:	e029      	b.n	800232a <HAL_RCC_OscConfig+0x3de>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 80022de:	d112      	bne.n	8002306 <HAL_RCC_OscConfig+0x3ba>
 80022e0:	4b57      	ldr	r3, [pc, #348]	; (8002440 <HAL_RCC_OscConfig+0x4f4>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a56      	ldr	r2, [pc, #344]	; (8002440 <HAL_RCC_OscConfig+0x4f4>)
 80022e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022ea:	6013      	str	r3, [r2, #0]
 80022ec:	4b54      	ldr	r3, [pc, #336]	; (8002440 <HAL_RCC_OscConfig+0x4f4>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a53      	ldr	r2, [pc, #332]	; (8002440 <HAL_RCC_OscConfig+0x4f4>)
 80022f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022f6:	6013      	str	r3, [r2, #0]
 80022f8:	4b51      	ldr	r3, [pc, #324]	; (8002440 <HAL_RCC_OscConfig+0x4f4>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a50      	ldr	r2, [pc, #320]	; (8002440 <HAL_RCC_OscConfig+0x4f4>)
 80022fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002302:	6013      	str	r3, [r2, #0]
 8002304:	e011      	b.n	800232a <HAL_RCC_OscConfig+0x3de>
 8002306:	4b4e      	ldr	r3, [pc, #312]	; (8002440 <HAL_RCC_OscConfig+0x4f4>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a4d      	ldr	r2, [pc, #308]	; (8002440 <HAL_RCC_OscConfig+0x4f4>)
 800230c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002310:	6013      	str	r3, [r2, #0]
 8002312:	4b4b      	ldr	r3, [pc, #300]	; (8002440 <HAL_RCC_OscConfig+0x4f4>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a4a      	ldr	r2, [pc, #296]	; (8002440 <HAL_RCC_OscConfig+0x4f4>)
 8002318:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800231c:	6013      	str	r3, [r2, #0]
 800231e:	4b48      	ldr	r3, [pc, #288]	; (8002440 <HAL_RCC_OscConfig+0x4f4>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a47      	ldr	r2, [pc, #284]	; (8002440 <HAL_RCC_OscConfig+0x4f4>)
 8002324:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002328:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d014      	beq.n	800235c <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8002332:	f7fe f9b5 	bl	80006a0 <HAL_GetTick>
 8002336:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002338:	e009      	b.n	800234e <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800233a:	f7fe f9b1 	bl	80006a0 <HAL_GetTick>
 800233e:	4602      	mov	r2, r0
 8002340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002342:	1ad3      	subs	r3, r2, r3
 8002344:	2b64      	cmp	r3, #100	; 0x64
 8002346:	d902      	bls.n	800234e <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8002348:	2303      	movs	r3, #3
 800234a:	f000 bcd4 	b.w	8002cf6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800234e:	4b3c      	ldr	r3, [pc, #240]	; (8002440 <HAL_RCC_OscConfig+0x4f4>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d0ef      	beq.n	800233a <HAL_RCC_OscConfig+0x3ee>
 800235a:	e013      	b.n	8002384 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 800235c:	f7fe f9a0 	bl	80006a0 <HAL_GetTick>
 8002360:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002362:	e009      	b.n	8002378 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002364:	f7fe f99c 	bl	80006a0 <HAL_GetTick>
 8002368:	4602      	mov	r2, r0
 800236a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	2b64      	cmp	r3, #100	; 0x64
 8002370:	d902      	bls.n	8002378 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8002372:	2303      	movs	r3, #3
 8002374:	f000 bcbf 	b.w	8002cf6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002378:	4b31      	ldr	r3, [pc, #196]	; (8002440 <HAL_RCC_OscConfig+0x4f4>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002380:	2b00      	cmp	r3, #0
 8002382:	d1ef      	bne.n	8002364 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 0302 	and.w	r3, r3, #2
 800238c:	2b00      	cmp	r3, #0
 800238e:	d05f      	beq.n	8002450 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002392:	2b04      	cmp	r3, #4
 8002394:	d005      	beq.n	80023a2 <HAL_RCC_OscConfig+0x456>
 8002396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002398:	2b0c      	cmp	r3, #12
 800239a:	d114      	bne.n	80023c6 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800239c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800239e:	2b02      	cmp	r3, #2
 80023a0:	d111      	bne.n	80023c6 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	68db      	ldr	r3, [r3, #12]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d102      	bne.n	80023b0 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	f000 bca3 	b.w	8002cf6 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80023b0:	4b23      	ldr	r3, [pc, #140]	; (8002440 <HAL_RCC_OscConfig+0x4f4>)
 80023b2:	691b      	ldr	r3, [r3, #16]
 80023b4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	691b      	ldr	r3, [r3, #16]
 80023bc:	041b      	lsls	r3, r3, #16
 80023be:	4920      	ldr	r1, [pc, #128]	; (8002440 <HAL_RCC_OscConfig+0x4f4>)
 80023c0:	4313      	orrs	r3, r2
 80023c2:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80023c4:	e044      	b.n	8002450 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	68db      	ldr	r3, [r3, #12]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d024      	beq.n	8002418 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 80023ce:	4b1c      	ldr	r3, [pc, #112]	; (8002440 <HAL_RCC_OscConfig+0x4f4>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a1b      	ldr	r2, [pc, #108]	; (8002440 <HAL_RCC_OscConfig+0x4f4>)
 80023d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023d8:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80023da:	f7fe f961 	bl	80006a0 <HAL_GetTick>
 80023de:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023e0:	e009      	b.n	80023f6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023e2:	f7fe f95d 	bl	80006a0 <HAL_GetTick>
 80023e6:	4602      	mov	r2, r0
 80023e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023ea:	1ad3      	subs	r3, r2, r3
 80023ec:	2b02      	cmp	r3, #2
 80023ee:	d902      	bls.n	80023f6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80023f0:	2303      	movs	r3, #3
 80023f2:	f000 bc80 	b.w	8002cf6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023f6:	4b12      	ldr	r3, [pc, #72]	; (8002440 <HAL_RCC_OscConfig+0x4f4>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d0ef      	beq.n	80023e2 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8002402:	4b0f      	ldr	r3, [pc, #60]	; (8002440 <HAL_RCC_OscConfig+0x4f4>)
 8002404:	691b      	ldr	r3, [r3, #16]
 8002406:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	691b      	ldr	r3, [r3, #16]
 800240e:	041b      	lsls	r3, r3, #16
 8002410:	490b      	ldr	r1, [pc, #44]	; (8002440 <HAL_RCC_OscConfig+0x4f4>)
 8002412:	4313      	orrs	r3, r2
 8002414:	610b      	str	r3, [r1, #16]
 8002416:	e01b      	b.n	8002450 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8002418:	4b09      	ldr	r3, [pc, #36]	; (8002440 <HAL_RCC_OscConfig+0x4f4>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a08      	ldr	r2, [pc, #32]	; (8002440 <HAL_RCC_OscConfig+0x4f4>)
 800241e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002422:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002424:	f7fe f93c 	bl	80006a0 <HAL_GetTick>
 8002428:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800242a:	e00b      	b.n	8002444 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800242c:	f7fe f938 	bl	80006a0 <HAL_GetTick>
 8002430:	4602      	mov	r2, r0
 8002432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	2b02      	cmp	r3, #2
 8002438:	d904      	bls.n	8002444 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 800243a:	2303      	movs	r3, #3
 800243c:	f000 bc5b 	b.w	8002cf6 <HAL_RCC_OscConfig+0xdaa>
 8002440:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002444:	4baf      	ldr	r3, [pc, #700]	; (8002704 <HAL_RCC_OscConfig+0x7b8>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800244c:	2b00      	cmp	r3, #0
 800244e:	d1ed      	bne.n	800242c <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 0308 	and.w	r3, r3, #8
 8002458:	2b00      	cmp	r3, #0
 800245a:	f000 80c8 	beq.w	80025ee <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 800245e:	2300      	movs	r3, #0
 8002460:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002464:	4ba7      	ldr	r3, [pc, #668]	; (8002704 <HAL_RCC_OscConfig+0x7b8>)
 8002466:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800246a:	f003 0304 	and.w	r3, r3, #4
 800246e:	2b00      	cmp	r3, #0
 8002470:	d111      	bne.n	8002496 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002472:	4ba4      	ldr	r3, [pc, #656]	; (8002704 <HAL_RCC_OscConfig+0x7b8>)
 8002474:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002478:	4aa2      	ldr	r2, [pc, #648]	; (8002704 <HAL_RCC_OscConfig+0x7b8>)
 800247a:	f043 0304 	orr.w	r3, r3, #4
 800247e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8002482:	4ba0      	ldr	r3, [pc, #640]	; (8002704 <HAL_RCC_OscConfig+0x7b8>)
 8002484:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002488:	f003 0304 	and.w	r3, r3, #4
 800248c:	617b      	str	r3, [r7, #20]
 800248e:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8002490:	2301      	movs	r3, #1
 8002492:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002496:	4b9c      	ldr	r3, [pc, #624]	; (8002708 <HAL_RCC_OscConfig+0x7bc>)
 8002498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800249a:	f003 0301 	and.w	r3, r3, #1
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d119      	bne.n	80024d6 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80024a2:	4b99      	ldr	r3, [pc, #612]	; (8002708 <HAL_RCC_OscConfig+0x7bc>)
 80024a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024a6:	4a98      	ldr	r2, [pc, #608]	; (8002708 <HAL_RCC_OscConfig+0x7bc>)
 80024a8:	f043 0301 	orr.w	r3, r3, #1
 80024ac:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024ae:	f7fe f8f7 	bl	80006a0 <HAL_GetTick>
 80024b2:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80024b4:	e009      	b.n	80024ca <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024b6:	f7fe f8f3 	bl	80006a0 <HAL_GetTick>
 80024ba:	4602      	mov	r2, r0
 80024bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	2b02      	cmp	r3, #2
 80024c2:	d902      	bls.n	80024ca <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 80024c4:	2303      	movs	r3, #3
 80024c6:	f000 bc16 	b.w	8002cf6 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80024ca:	4b8f      	ldr	r3, [pc, #572]	; (8002708 <HAL_RCC_OscConfig+0x7bc>)
 80024cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ce:	f003 0301 	and.w	r3, r3, #1
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d0ef      	beq.n	80024b6 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	695b      	ldr	r3, [r3, #20]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d05f      	beq.n	800259e <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 80024de:	4b89      	ldr	r3, [pc, #548]	; (8002704 <HAL_RCC_OscConfig+0x7b8>)
 80024e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80024e4:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	699a      	ldr	r2, [r3, #24]
 80024ea:	6a3b      	ldr	r3, [r7, #32]
 80024ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d037      	beq.n	8002564 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80024f4:	6a3b      	ldr	r3, [r7, #32]
 80024f6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d006      	beq.n	800250c <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 80024fe:	6a3b      	ldr	r3, [r7, #32]
 8002500:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8002504:	2b00      	cmp	r3, #0
 8002506:	d101      	bne.n	800250c <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	e3f4      	b.n	8002cf6 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 800250c:	6a3b      	ldr	r3, [r7, #32]
 800250e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002512:	2b00      	cmp	r3, #0
 8002514:	d01b      	beq.n	800254e <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8002516:	4b7b      	ldr	r3, [pc, #492]	; (8002704 <HAL_RCC_OscConfig+0x7b8>)
 8002518:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800251c:	4a79      	ldr	r2, [pc, #484]	; (8002704 <HAL_RCC_OscConfig+0x7b8>)
 800251e:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8002522:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 8002526:	f7fe f8bb 	bl	80006a0 <HAL_GetTick>
 800252a:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800252c:	e008      	b.n	8002540 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800252e:	f7fe f8b7 	bl	80006a0 <HAL_GetTick>
 8002532:	4602      	mov	r2, r0
 8002534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002536:	1ad3      	subs	r3, r2, r3
 8002538:	2b05      	cmp	r3, #5
 800253a:	d901      	bls.n	8002540 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 800253c:	2303      	movs	r3, #3
 800253e:	e3da      	b.n	8002cf6 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002540:	4b70      	ldr	r3, [pc, #448]	; (8002704 <HAL_RCC_OscConfig+0x7b8>)
 8002542:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002546:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d1ef      	bne.n	800252e <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 800254e:	4b6d      	ldr	r3, [pc, #436]	; (8002704 <HAL_RCC_OscConfig+0x7b8>)
 8002550:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002554:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	699b      	ldr	r3, [r3, #24]
 800255c:	4969      	ldr	r1, [pc, #420]	; (8002704 <HAL_RCC_OscConfig+0x7b8>)
 800255e:	4313      	orrs	r3, r2
 8002560:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8002564:	4b67      	ldr	r3, [pc, #412]	; (8002704 <HAL_RCC_OscConfig+0x7b8>)
 8002566:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800256a:	4a66      	ldr	r2, [pc, #408]	; (8002704 <HAL_RCC_OscConfig+0x7b8>)
 800256c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002570:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8002574:	f7fe f894 	bl	80006a0 <HAL_GetTick>
 8002578:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800257a:	e008      	b.n	800258e <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800257c:	f7fe f890 	bl	80006a0 <HAL_GetTick>
 8002580:	4602      	mov	r2, r0
 8002582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	2b05      	cmp	r3, #5
 8002588:	d901      	bls.n	800258e <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 800258a:	2303      	movs	r3, #3
 800258c:	e3b3      	b.n	8002cf6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800258e:	4b5d      	ldr	r3, [pc, #372]	; (8002704 <HAL_RCC_OscConfig+0x7b8>)
 8002590:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002594:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002598:	2b00      	cmp	r3, #0
 800259a:	d0ef      	beq.n	800257c <HAL_RCC_OscConfig+0x630>
 800259c:	e01b      	b.n	80025d6 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 800259e:	4b59      	ldr	r3, [pc, #356]	; (8002704 <HAL_RCC_OscConfig+0x7b8>)
 80025a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80025a4:	4a57      	ldr	r2, [pc, #348]	; (8002704 <HAL_RCC_OscConfig+0x7b8>)
 80025a6:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 80025aa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 80025ae:	f7fe f877 	bl	80006a0 <HAL_GetTick>
 80025b2:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80025b4:	e008      	b.n	80025c8 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025b6:	f7fe f873 	bl	80006a0 <HAL_GetTick>
 80025ba:	4602      	mov	r2, r0
 80025bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025be:	1ad3      	subs	r3, r2, r3
 80025c0:	2b05      	cmp	r3, #5
 80025c2:	d901      	bls.n	80025c8 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 80025c4:	2303      	movs	r3, #3
 80025c6:	e396      	b.n	8002cf6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80025c8:	4b4e      	ldr	r3, [pc, #312]	; (8002704 <HAL_RCC_OscConfig+0x7b8>)
 80025ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80025ce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d1ef      	bne.n	80025b6 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80025d6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d107      	bne.n	80025ee <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025de:	4b49      	ldr	r3, [pc, #292]	; (8002704 <HAL_RCC_OscConfig+0x7b8>)
 80025e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025e4:	4a47      	ldr	r2, [pc, #284]	; (8002704 <HAL_RCC_OscConfig+0x7b8>)
 80025e6:	f023 0304 	bic.w	r3, r3, #4
 80025ea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 0304 	and.w	r3, r3, #4
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	f000 8111 	beq.w	800281e <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 80025fc:	2300      	movs	r3, #0
 80025fe:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002602:	4b40      	ldr	r3, [pc, #256]	; (8002704 <HAL_RCC_OscConfig+0x7b8>)
 8002604:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002608:	f003 0304 	and.w	r3, r3, #4
 800260c:	2b00      	cmp	r3, #0
 800260e:	d111      	bne.n	8002634 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002610:	4b3c      	ldr	r3, [pc, #240]	; (8002704 <HAL_RCC_OscConfig+0x7b8>)
 8002612:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002616:	4a3b      	ldr	r2, [pc, #236]	; (8002704 <HAL_RCC_OscConfig+0x7b8>)
 8002618:	f043 0304 	orr.w	r3, r3, #4
 800261c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8002620:	4b38      	ldr	r3, [pc, #224]	; (8002704 <HAL_RCC_OscConfig+0x7b8>)
 8002622:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002626:	f003 0304 	and.w	r3, r3, #4
 800262a:	613b      	str	r3, [r7, #16]
 800262c:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 800262e:	2301      	movs	r3, #1
 8002630:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002634:	4b34      	ldr	r3, [pc, #208]	; (8002708 <HAL_RCC_OscConfig+0x7bc>)
 8002636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002638:	f003 0301 	and.w	r3, r3, #1
 800263c:	2b00      	cmp	r3, #0
 800263e:	d118      	bne.n	8002672 <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8002640:	4b31      	ldr	r3, [pc, #196]	; (8002708 <HAL_RCC_OscConfig+0x7bc>)
 8002642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002644:	4a30      	ldr	r2, [pc, #192]	; (8002708 <HAL_RCC_OscConfig+0x7bc>)
 8002646:	f043 0301 	orr.w	r3, r3, #1
 800264a:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800264c:	f7fe f828 	bl	80006a0 <HAL_GetTick>
 8002650:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002652:	e008      	b.n	8002666 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002654:	f7fe f824 	bl	80006a0 <HAL_GetTick>
 8002658:	4602      	mov	r2, r0
 800265a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	2b02      	cmp	r3, #2
 8002660:	d901      	bls.n	8002666 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8002662:	2303      	movs	r3, #3
 8002664:	e347      	b.n	8002cf6 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002666:	4b28      	ldr	r3, [pc, #160]	; (8002708 <HAL_RCC_OscConfig+0x7bc>)
 8002668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800266a:	f003 0301 	and.w	r3, r3, #1
 800266e:	2b00      	cmp	r3, #0
 8002670:	d0f0      	beq.n	8002654 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	f003 0301 	and.w	r3, r3, #1
 800267a:	2b00      	cmp	r3, #0
 800267c:	d01f      	beq.n	80026be <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	f003 0304 	and.w	r3, r3, #4
 8002686:	2b00      	cmp	r3, #0
 8002688:	d010      	beq.n	80026ac <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800268a:	4b1e      	ldr	r3, [pc, #120]	; (8002704 <HAL_RCC_OscConfig+0x7b8>)
 800268c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002690:	4a1c      	ldr	r2, [pc, #112]	; (8002704 <HAL_RCC_OscConfig+0x7b8>)
 8002692:	f043 0304 	orr.w	r3, r3, #4
 8002696:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800269a:	4b1a      	ldr	r3, [pc, #104]	; (8002704 <HAL_RCC_OscConfig+0x7b8>)
 800269c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80026a0:	4a18      	ldr	r2, [pc, #96]	; (8002704 <HAL_RCC_OscConfig+0x7b8>)
 80026a2:	f043 0301 	orr.w	r3, r3, #1
 80026a6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80026aa:	e018      	b.n	80026de <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80026ac:	4b15      	ldr	r3, [pc, #84]	; (8002704 <HAL_RCC_OscConfig+0x7b8>)
 80026ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80026b2:	4a14      	ldr	r2, [pc, #80]	; (8002704 <HAL_RCC_OscConfig+0x7b8>)
 80026b4:	f043 0301 	orr.w	r3, r3, #1
 80026b8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80026bc:	e00f      	b.n	80026de <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80026be:	4b11      	ldr	r3, [pc, #68]	; (8002704 <HAL_RCC_OscConfig+0x7b8>)
 80026c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80026c4:	4a0f      	ldr	r2, [pc, #60]	; (8002704 <HAL_RCC_OscConfig+0x7b8>)
 80026c6:	f023 0301 	bic.w	r3, r3, #1
 80026ca:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80026ce:	4b0d      	ldr	r3, [pc, #52]	; (8002704 <HAL_RCC_OscConfig+0x7b8>)
 80026d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80026d4:	4a0b      	ldr	r2, [pc, #44]	; (8002704 <HAL_RCC_OscConfig+0x7b8>)
 80026d6:	f023 0304 	bic.w	r3, r3, #4
 80026da:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d057      	beq.n	8002796 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 80026e6:	f7fd ffdb 	bl	80006a0 <HAL_GetTick>
 80026ea:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026ec:	e00e      	b.n	800270c <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026ee:	f7fd ffd7 	bl	80006a0 <HAL_GetTick>
 80026f2:	4602      	mov	r2, r0
 80026f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026f6:	1ad3      	subs	r3, r2, r3
 80026f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d905      	bls.n	800270c <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8002700:	2303      	movs	r3, #3
 8002702:	e2f8      	b.n	8002cf6 <HAL_RCC_OscConfig+0xdaa>
 8002704:	46020c00 	.word	0x46020c00
 8002708:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800270c:	4b9c      	ldr	r3, [pc, #624]	; (8002980 <HAL_RCC_OscConfig+0xa34>)
 800270e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002712:	f003 0302 	and.w	r3, r3, #2
 8002716:	2b00      	cmp	r3, #0
 8002718:	d0e9      	beq.n	80026ee <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002722:	2b00      	cmp	r3, #0
 8002724:	d01b      	beq.n	800275e <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002726:	4b96      	ldr	r3, [pc, #600]	; (8002980 <HAL_RCC_OscConfig+0xa34>)
 8002728:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800272c:	4a94      	ldr	r2, [pc, #592]	; (8002980 <HAL_RCC_OscConfig+0xa34>)
 800272e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002732:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002736:	e00a      	b.n	800274e <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002738:	f7fd ffb2 	bl	80006a0 <HAL_GetTick>
 800273c:	4602      	mov	r2, r0
 800273e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	f241 3288 	movw	r2, #5000	; 0x1388
 8002746:	4293      	cmp	r3, r2
 8002748:	d901      	bls.n	800274e <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 800274a:	2303      	movs	r3, #3
 800274c:	e2d3      	b.n	8002cf6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800274e:	4b8c      	ldr	r3, [pc, #560]	; (8002980 <HAL_RCC_OscConfig+0xa34>)
 8002750:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002754:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002758:	2b00      	cmp	r3, #0
 800275a:	d0ed      	beq.n	8002738 <HAL_RCC_OscConfig+0x7ec>
 800275c:	e053      	b.n	8002806 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800275e:	4b88      	ldr	r3, [pc, #544]	; (8002980 <HAL_RCC_OscConfig+0xa34>)
 8002760:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002764:	4a86      	ldr	r2, [pc, #536]	; (8002980 <HAL_RCC_OscConfig+0xa34>)
 8002766:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800276a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800276e:	e00a      	b.n	8002786 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002770:	f7fd ff96 	bl	80006a0 <HAL_GetTick>
 8002774:	4602      	mov	r2, r0
 8002776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	f241 3288 	movw	r2, #5000	; 0x1388
 800277e:	4293      	cmp	r3, r2
 8002780:	d901      	bls.n	8002786 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8002782:	2303      	movs	r3, #3
 8002784:	e2b7      	b.n	8002cf6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002786:	4b7e      	ldr	r3, [pc, #504]	; (8002980 <HAL_RCC_OscConfig+0xa34>)
 8002788:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800278c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002790:	2b00      	cmp	r3, #0
 8002792:	d1ed      	bne.n	8002770 <HAL_RCC_OscConfig+0x824>
 8002794:	e037      	b.n	8002806 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8002796:	f7fd ff83 	bl	80006a0 <HAL_GetTick>
 800279a:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800279c:	e00a      	b.n	80027b4 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800279e:	f7fd ff7f 	bl	80006a0 <HAL_GetTick>
 80027a2:	4602      	mov	r2, r0
 80027a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027a6:	1ad3      	subs	r3, r2, r3
 80027a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d901      	bls.n	80027b4 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 80027b0:	2303      	movs	r3, #3
 80027b2:	e2a0      	b.n	8002cf6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80027b4:	4b72      	ldr	r3, [pc, #456]	; (8002980 <HAL_RCC_OscConfig+0xa34>)
 80027b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80027ba:	f003 0302 	and.w	r3, r3, #2
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d1ed      	bne.n	800279e <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 80027c2:	4b6f      	ldr	r3, [pc, #444]	; (8002980 <HAL_RCC_OscConfig+0xa34>)
 80027c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80027c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d01a      	beq.n	8002806 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80027d0:	4b6b      	ldr	r3, [pc, #428]	; (8002980 <HAL_RCC_OscConfig+0xa34>)
 80027d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80027d6:	4a6a      	ldr	r2, [pc, #424]	; (8002980 <HAL_RCC_OscConfig+0xa34>)
 80027d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80027dc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80027e0:	e00a      	b.n	80027f8 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027e2:	f7fd ff5d 	bl	80006a0 <HAL_GetTick>
 80027e6:	4602      	mov	r2, r0
 80027e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027ea:	1ad3      	subs	r3, r2, r3
 80027ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d901      	bls.n	80027f8 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 80027f4:	2303      	movs	r3, #3
 80027f6:	e27e      	b.n	8002cf6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80027f8:	4b61      	ldr	r3, [pc, #388]	; (8002980 <HAL_RCC_OscConfig+0xa34>)
 80027fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80027fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002802:	2b00      	cmp	r3, #0
 8002804:	d1ed      	bne.n	80027e2 <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002806:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800280a:	2b01      	cmp	r3, #1
 800280c:	d107      	bne.n	800281e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800280e:	4b5c      	ldr	r3, [pc, #368]	; (8002980 <HAL_RCC_OscConfig+0xa34>)
 8002810:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002814:	4a5a      	ldr	r2, [pc, #360]	; (8002980 <HAL_RCC_OscConfig+0xa34>)
 8002816:	f023 0304 	bic.w	r3, r3, #4
 800281a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 0320 	and.w	r3, r3, #32
 8002826:	2b00      	cmp	r3, #0
 8002828:	d036      	beq.n	8002898 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800282e:	2b00      	cmp	r3, #0
 8002830:	d019      	beq.n	8002866 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8002832:	4b53      	ldr	r3, [pc, #332]	; (8002980 <HAL_RCC_OscConfig+0xa34>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a52      	ldr	r2, [pc, #328]	; (8002980 <HAL_RCC_OscConfig+0xa34>)
 8002838:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800283c:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800283e:	f7fd ff2f 	bl	80006a0 <HAL_GetTick>
 8002842:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002844:	e008      	b.n	8002858 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002846:	f7fd ff2b 	bl	80006a0 <HAL_GetTick>
 800284a:	4602      	mov	r2, r0
 800284c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800284e:	1ad3      	subs	r3, r2, r3
 8002850:	2b02      	cmp	r3, #2
 8002852:	d901      	bls.n	8002858 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8002854:	2303      	movs	r3, #3
 8002856:	e24e      	b.n	8002cf6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002858:	4b49      	ldr	r3, [pc, #292]	; (8002980 <HAL_RCC_OscConfig+0xa34>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002860:	2b00      	cmp	r3, #0
 8002862:	d0f0      	beq.n	8002846 <HAL_RCC_OscConfig+0x8fa>
 8002864:	e018      	b.n	8002898 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8002866:	4b46      	ldr	r3, [pc, #280]	; (8002980 <HAL_RCC_OscConfig+0xa34>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a45      	ldr	r2, [pc, #276]	; (8002980 <HAL_RCC_OscConfig+0xa34>)
 800286c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002870:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002872:	f7fd ff15 	bl	80006a0 <HAL_GetTick>
 8002876:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002878:	e008      	b.n	800288c <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800287a:	f7fd ff11 	bl	80006a0 <HAL_GetTick>
 800287e:	4602      	mov	r2, r0
 8002880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002882:	1ad3      	subs	r3, r2, r3
 8002884:	2b02      	cmp	r3, #2
 8002886:	d901      	bls.n	800288c <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8002888:	2303      	movs	r3, #3
 800288a:	e234      	b.n	8002cf6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800288c:	4b3c      	ldr	r3, [pc, #240]	; (8002980 <HAL_RCC_OscConfig+0xa34>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002894:	2b00      	cmp	r3, #0
 8002896:	d1f0      	bne.n	800287a <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d036      	beq.n	8002912 <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d019      	beq.n	80028e0 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 80028ac:	4b34      	ldr	r3, [pc, #208]	; (8002980 <HAL_RCC_OscConfig+0xa34>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a33      	ldr	r2, [pc, #204]	; (8002980 <HAL_RCC_OscConfig+0xa34>)
 80028b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028b6:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80028b8:	f7fd fef2 	bl	80006a0 <HAL_GetTick>
 80028bc:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 80028be:	e008      	b.n	80028d2 <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 80028c0:	f7fd feee 	bl	80006a0 <HAL_GetTick>
 80028c4:	4602      	mov	r2, r0
 80028c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	2b02      	cmp	r3, #2
 80028cc:	d901      	bls.n	80028d2 <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 80028ce:	2303      	movs	r3, #3
 80028d0:	e211      	b.n	8002cf6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 80028d2:	4b2b      	ldr	r3, [pc, #172]	; (8002980 <HAL_RCC_OscConfig+0xa34>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d0f0      	beq.n	80028c0 <HAL_RCC_OscConfig+0x974>
 80028de:	e018      	b.n	8002912 <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 80028e0:	4b27      	ldr	r3, [pc, #156]	; (8002980 <HAL_RCC_OscConfig+0xa34>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a26      	ldr	r2, [pc, #152]	; (8002980 <HAL_RCC_OscConfig+0xa34>)
 80028e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80028ea:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80028ec:	f7fd fed8 	bl	80006a0 <HAL_GetTick>
 80028f0:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 80028f2:	e008      	b.n	8002906 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 80028f4:	f7fd fed4 	bl	80006a0 <HAL_GetTick>
 80028f8:	4602      	mov	r2, r0
 80028fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	2b02      	cmp	r3, #2
 8002900:	d901      	bls.n	8002906 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8002902:	2303      	movs	r3, #3
 8002904:	e1f7      	b.n	8002cf6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8002906:	4b1e      	ldr	r3, [pc, #120]	; (8002980 <HAL_RCC_OscConfig+0xa34>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800290e:	2b00      	cmp	r3, #0
 8002910:	d1f0      	bne.n	80028f4 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800291a:	2b00      	cmp	r3, #0
 800291c:	d07f      	beq.n	8002a1e <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002922:	2b00      	cmp	r3, #0
 8002924:	d062      	beq.n	80029ec <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8002926:	4b16      	ldr	r3, [pc, #88]	; (8002980 <HAL_RCC_OscConfig+0xa34>)
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	4a15      	ldr	r2, [pc, #84]	; (8002980 <HAL_RCC_OscConfig+0xa34>)
 800292c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002930:	6093      	str	r3, [r2, #8]
 8002932:	4b13      	ldr	r3, [pc, #76]	; (8002980 <HAL_RCC_OscConfig+0xa34>)
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800293e:	4910      	ldr	r1, [pc, #64]	; (8002980 <HAL_RCC_OscConfig+0xa34>)
 8002940:	4313      	orrs	r3, r2
 8002942:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002948:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800294c:	d309      	bcc.n	8002962 <HAL_RCC_OscConfig+0xa16>
 800294e:	4b0c      	ldr	r3, [pc, #48]	; (8002980 <HAL_RCC_OscConfig+0xa34>)
 8002950:	68db      	ldr	r3, [r3, #12]
 8002952:	f023 021f 	bic.w	r2, r3, #31
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6a1b      	ldr	r3, [r3, #32]
 800295a:	4909      	ldr	r1, [pc, #36]	; (8002980 <HAL_RCC_OscConfig+0xa34>)
 800295c:	4313      	orrs	r3, r2
 800295e:	60cb      	str	r3, [r1, #12]
 8002960:	e02a      	b.n	80029b8 <HAL_RCC_OscConfig+0xa6c>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002966:	2b00      	cmp	r3, #0
 8002968:	da0c      	bge.n	8002984 <HAL_RCC_OscConfig+0xa38>
 800296a:	4b05      	ldr	r3, [pc, #20]	; (8002980 <HAL_RCC_OscConfig+0xa34>)
 800296c:	68db      	ldr	r3, [r3, #12]
 800296e:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6a1b      	ldr	r3, [r3, #32]
 8002976:	015b      	lsls	r3, r3, #5
 8002978:	4901      	ldr	r1, [pc, #4]	; (8002980 <HAL_RCC_OscConfig+0xa34>)
 800297a:	4313      	orrs	r3, r2
 800297c:	60cb      	str	r3, [r1, #12]
 800297e:	e01b      	b.n	80029b8 <HAL_RCC_OscConfig+0xa6c>
 8002980:	46020c00 	.word	0x46020c00
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002988:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800298c:	d30a      	bcc.n	80029a4 <HAL_RCC_OscConfig+0xa58>
 800298e:	4ba1      	ldr	r3, [pc, #644]	; (8002c14 <HAL_RCC_OscConfig+0xcc8>)
 8002990:	68db      	ldr	r3, [r3, #12]
 8002992:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6a1b      	ldr	r3, [r3, #32]
 800299a:	029b      	lsls	r3, r3, #10
 800299c:	499d      	ldr	r1, [pc, #628]	; (8002c14 <HAL_RCC_OscConfig+0xcc8>)
 800299e:	4313      	orrs	r3, r2
 80029a0:	60cb      	str	r3, [r1, #12]
 80029a2:	e009      	b.n	80029b8 <HAL_RCC_OscConfig+0xa6c>
 80029a4:	4b9b      	ldr	r3, [pc, #620]	; (8002c14 <HAL_RCC_OscConfig+0xcc8>)
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6a1b      	ldr	r3, [r3, #32]
 80029b0:	03db      	lsls	r3, r3, #15
 80029b2:	4998      	ldr	r1, [pc, #608]	; (8002c14 <HAL_RCC_OscConfig+0xcc8>)
 80029b4:	4313      	orrs	r3, r2
 80029b6:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 80029b8:	4b96      	ldr	r3, [pc, #600]	; (8002c14 <HAL_RCC_OscConfig+0xcc8>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a95      	ldr	r2, [pc, #596]	; (8002c14 <HAL_RCC_OscConfig+0xcc8>)
 80029be:	f043 0310 	orr.w	r3, r3, #16
 80029c2:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80029c4:	f7fd fe6c 	bl	80006a0 <HAL_GetTick>
 80029c8:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 80029ca:	e008      	b.n	80029de <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 80029cc:	f7fd fe68 	bl	80006a0 <HAL_GetTick>
 80029d0:	4602      	mov	r2, r0
 80029d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029d4:	1ad3      	subs	r3, r2, r3
 80029d6:	2b02      	cmp	r3, #2
 80029d8:	d901      	bls.n	80029de <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 80029da:	2303      	movs	r3, #3
 80029dc:	e18b      	b.n	8002cf6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 80029de:	4b8d      	ldr	r3, [pc, #564]	; (8002c14 <HAL_RCC_OscConfig+0xcc8>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 0320 	and.w	r3, r3, #32
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d0f0      	beq.n	80029cc <HAL_RCC_OscConfig+0xa80>
 80029ea:	e018      	b.n	8002a1e <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 80029ec:	4b89      	ldr	r3, [pc, #548]	; (8002c14 <HAL_RCC_OscConfig+0xcc8>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a88      	ldr	r2, [pc, #544]	; (8002c14 <HAL_RCC_OscConfig+0xcc8>)
 80029f2:	f023 0310 	bic.w	r3, r3, #16
 80029f6:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80029f8:	f7fd fe52 	bl	80006a0 <HAL_GetTick>
 80029fc:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80029fe:	e008      	b.n	8002a12 <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8002a00:	f7fd fe4e 	bl	80006a0 <HAL_GetTick>
 8002a04:	4602      	mov	r2, r0
 8002a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	2b02      	cmp	r3, #2
 8002a0c:	d901      	bls.n	8002a12 <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8002a0e:	2303      	movs	r3, #3
 8002a10:	e171      	b.n	8002cf6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8002a12:	4b80      	ldr	r3, [pc, #512]	; (8002c14 <HAL_RCC_OscConfig+0xcc8>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 0320 	and.w	r3, r3, #32
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d1f0      	bne.n	8002a00 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	f000 8166 	beq.w	8002cf4 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a2e:	4b79      	ldr	r3, [pc, #484]	; (8002c14 <HAL_RCC_OscConfig+0xcc8>)
 8002a30:	69db      	ldr	r3, [r3, #28]
 8002a32:	f003 030c 	and.w	r3, r3, #12
 8002a36:	2b0c      	cmp	r3, #12
 8002a38:	f000 80f2 	beq.w	8002c20 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a40:	2b02      	cmp	r3, #2
 8002a42:	f040 80c5 	bne.w	8002bd0 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8002a46:	4b73      	ldr	r3, [pc, #460]	; (8002c14 <HAL_RCC_OscConfig+0xcc8>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a72      	ldr	r2, [pc, #456]	; (8002c14 <HAL_RCC_OscConfig+0xcc8>)
 8002a4c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a50:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002a52:	f7fd fe25 	bl	80006a0 <HAL_GetTick>
 8002a56:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002a58:	e008      	b.n	8002a6c <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a5a:	f7fd fe21 	bl	80006a0 <HAL_GetTick>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a62:	1ad3      	subs	r3, r2, r3
 8002a64:	2b02      	cmp	r3, #2
 8002a66:	d901      	bls.n	8002a6c <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8002a68:	2303      	movs	r3, #3
 8002a6a:	e144      	b.n	8002cf6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002a6c:	4b69      	ldr	r3, [pc, #420]	; (8002c14 <HAL_RCC_OscConfig+0xcc8>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d1f0      	bne.n	8002a5a <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a78:	4b66      	ldr	r3, [pc, #408]	; (8002c14 <HAL_RCC_OscConfig+0xcc8>)
 8002a7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a7e:	f003 0304 	and.w	r3, r3, #4
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d111      	bne.n	8002aaa <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8002a86:	4b63      	ldr	r3, [pc, #396]	; (8002c14 <HAL_RCC_OscConfig+0xcc8>)
 8002a88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a8c:	4a61      	ldr	r2, [pc, #388]	; (8002c14 <HAL_RCC_OscConfig+0xcc8>)
 8002a8e:	f043 0304 	orr.w	r3, r3, #4
 8002a92:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8002a96:	4b5f      	ldr	r3, [pc, #380]	; (8002c14 <HAL_RCC_OscConfig+0xcc8>)
 8002a98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a9c:	f003 0304 	and.w	r3, r3, #4
 8002aa0:	60fb      	str	r3, [r7, #12]
 8002aa2:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8002aaa:	4b5b      	ldr	r3, [pc, #364]	; (8002c18 <HAL_RCC_OscConfig+0xccc>)
 8002aac:	68db      	ldr	r3, [r3, #12]
 8002aae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ab2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002ab6:	d102      	bne.n	8002abe <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8002abe:	4b56      	ldr	r3, [pc, #344]	; (8002c18 <HAL_RCC_OscConfig+0xccc>)
 8002ac0:	68db      	ldr	r3, [r3, #12]
 8002ac2:	4a55      	ldr	r2, [pc, #340]	; (8002c18 <HAL_RCC_OscConfig+0xccc>)
 8002ac4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ac8:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8002aca:	4b52      	ldr	r3, [pc, #328]	; (8002c14 <HAL_RCC_OscConfig+0xcc8>)
 8002acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ace:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ad2:	f023 0303 	bic.w	r3, r3, #3
 8002ad6:	687a      	ldr	r2, [r7, #4]
 8002ad8:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002ade:	3a01      	subs	r2, #1
 8002ae0:	0212      	lsls	r2, r2, #8
 8002ae2:	4311      	orrs	r1, r2
 8002ae4:	687a      	ldr	r2, [r7, #4]
 8002ae6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002ae8:	430a      	orrs	r2, r1
 8002aea:	494a      	ldr	r1, [pc, #296]	; (8002c14 <HAL_RCC_OscConfig+0xcc8>)
 8002aec:	4313      	orrs	r3, r2
 8002aee:	628b      	str	r3, [r1, #40]	; 0x28
 8002af0:	4b48      	ldr	r3, [pc, #288]	; (8002c14 <HAL_RCC_OscConfig+0xcc8>)
 8002af2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002af4:	4b49      	ldr	r3, [pc, #292]	; (8002c1c <HAL_RCC_OscConfig+0xcd0>)
 8002af6:	4013      	ands	r3, r2
 8002af8:	687a      	ldr	r2, [r7, #4]
 8002afa:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002afc:	3a01      	subs	r2, #1
 8002afe:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8002b02:	687a      	ldr	r2, [r7, #4]
 8002b04:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002b06:	3a01      	subs	r2, #1
 8002b08:	0252      	lsls	r2, r2, #9
 8002b0a:	b292      	uxth	r2, r2
 8002b0c:	4311      	orrs	r1, r2
 8002b0e:	687a      	ldr	r2, [r7, #4]
 8002b10:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002b12:	3a01      	subs	r2, #1
 8002b14:	0412      	lsls	r2, r2, #16
 8002b16:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8002b1a:	4311      	orrs	r1, r2
 8002b1c:	687a      	ldr	r2, [r7, #4]
 8002b1e:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002b20:	3a01      	subs	r2, #1
 8002b22:	0612      	lsls	r2, r2, #24
 8002b24:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8002b28:	430a      	orrs	r2, r1
 8002b2a:	493a      	ldr	r1, [pc, #232]	; (8002c14 <HAL_RCC_OscConfig+0xcc8>)
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8002b30:	4b38      	ldr	r3, [pc, #224]	; (8002c14 <HAL_RCC_OscConfig+0xcc8>)
 8002b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b34:	4a37      	ldr	r2, [pc, #220]	; (8002c14 <HAL_RCC_OscConfig+0xcc8>)
 8002b36:	f023 0310 	bic.w	r3, r3, #16
 8002b3a:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b40:	4a34      	ldr	r2, [pc, #208]	; (8002c14 <HAL_RCC_OscConfig+0xcc8>)
 8002b42:	00db      	lsls	r3, r3, #3
 8002b44:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8002b46:	4b33      	ldr	r3, [pc, #204]	; (8002c14 <HAL_RCC_OscConfig+0xcc8>)
 8002b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b4a:	4a32      	ldr	r2, [pc, #200]	; (8002c14 <HAL_RCC_OscConfig+0xcc8>)
 8002b4c:	f043 0310 	orr.w	r3, r3, #16
 8002b50:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8002b52:	4b30      	ldr	r3, [pc, #192]	; (8002c14 <HAL_RCC_OscConfig+0xcc8>)
 8002b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b56:	f023 020c 	bic.w	r2, r3, #12
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b5e:	492d      	ldr	r1, [pc, #180]	; (8002c14 <HAL_RCC_OscConfig+0xcc8>)
 8002b60:	4313      	orrs	r3, r2
 8002b62:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 8002b64:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d105      	bne.n	8002b78 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8002b6c:	4b2a      	ldr	r3, [pc, #168]	; (8002c18 <HAL_RCC_OscConfig+0xccc>)
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	4a29      	ldr	r2, [pc, #164]	; (8002c18 <HAL_RCC_OscConfig+0xccc>)
 8002b72:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b76:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8002b78:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d107      	bne.n	8002b90 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8002b80:	4b24      	ldr	r3, [pc, #144]	; (8002c14 <HAL_RCC_OscConfig+0xcc8>)
 8002b82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b86:	4a23      	ldr	r2, [pc, #140]	; (8002c14 <HAL_RCC_OscConfig+0xcc8>)
 8002b88:	f023 0304 	bic.w	r3, r3, #4
 8002b8c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002b90:	4b20      	ldr	r3, [pc, #128]	; (8002c14 <HAL_RCC_OscConfig+0xcc8>)
 8002b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b94:	4a1f      	ldr	r2, [pc, #124]	; (8002c14 <HAL_RCC_OscConfig+0xcc8>)
 8002b96:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b9a:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8002b9c:	4b1d      	ldr	r3, [pc, #116]	; (8002c14 <HAL_RCC_OscConfig+0xcc8>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a1c      	ldr	r2, [pc, #112]	; (8002c14 <HAL_RCC_OscConfig+0xcc8>)
 8002ba2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ba6:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002ba8:	f7fd fd7a 	bl	80006a0 <HAL_GetTick>
 8002bac:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002bae:	e008      	b.n	8002bc2 <HAL_RCC_OscConfig+0xc76>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bb0:	f7fd fd76 	bl	80006a0 <HAL_GetTick>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	d901      	bls.n	8002bc2 <HAL_RCC_OscConfig+0xc76>
          {
            return HAL_TIMEOUT;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e099      	b.n	8002cf6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002bc2:	4b14      	ldr	r3, [pc, #80]	; (8002c14 <HAL_RCC_OscConfig+0xcc8>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d0f0      	beq.n	8002bb0 <HAL_RCC_OscConfig+0xc64>
 8002bce:	e091      	b.n	8002cf4 <HAL_RCC_OscConfig+0xda8>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8002bd0:	4b10      	ldr	r3, [pc, #64]	; (8002c14 <HAL_RCC_OscConfig+0xcc8>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a0f      	ldr	r2, [pc, #60]	; (8002c14 <HAL_RCC_OscConfig+0xcc8>)
 8002bd6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002bda:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002bdc:	f7fd fd60 	bl	80006a0 <HAL_GetTick>
 8002be0:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002be2:	e008      	b.n	8002bf6 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002be4:	f7fd fd5c 	bl	80006a0 <HAL_GetTick>
 8002be8:	4602      	mov	r2, r0
 8002bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bec:	1ad3      	subs	r3, r2, r3
 8002bee:	2b02      	cmp	r3, #2
 8002bf0:	d901      	bls.n	8002bf6 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	e07f      	b.n	8002cf6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002bf6:	4b07      	ldr	r3, [pc, #28]	; (8002c14 <HAL_RCC_OscConfig+0xcc8>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d1f0      	bne.n	8002be4 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8002c02:	4b04      	ldr	r3, [pc, #16]	; (8002c14 <HAL_RCC_OscConfig+0xcc8>)
 8002c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c06:	4a03      	ldr	r2, [pc, #12]	; (8002c14 <HAL_RCC_OscConfig+0xcc8>)
 8002c08:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8002c0c:	f023 0303 	bic.w	r3, r3, #3
 8002c10:	6293      	str	r3, [r2, #40]	; 0x28
 8002c12:	e06f      	b.n	8002cf4 <HAL_RCC_OscConfig+0xda8>
 8002c14:	46020c00 	.word	0x46020c00
 8002c18:	46020800 	.word	0x46020800
 8002c1c:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8002c20:	4b37      	ldr	r3, [pc, #220]	; (8002d00 <HAL_RCC_OscConfig+0xdb4>)
 8002c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c24:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002c26:	4b36      	ldr	r3, [pc, #216]	; (8002d00 <HAL_RCC_OscConfig+0xdb4>)
 8002c28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c2a:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d039      	beq.n	8002ca8 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8002c34:	69fb      	ldr	r3, [r7, #28]
 8002c36:	f003 0203 	and.w	r2, r3, #3
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c3e:	429a      	cmp	r2, r3
 8002c40:	d132      	bne.n	8002ca8 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	0a1b      	lsrs	r3, r3, #8
 8002c46:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4e:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d129      	bne.n	8002ca8 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8002c54:	69fb      	ldr	r3, [r7, #28]
 8002c56:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	d122      	bne.n	8002ca8 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002c62:	69bb      	ldr	r3, [r7, #24]
 8002c64:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c6c:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8002c6e:	429a      	cmp	r2, r3
 8002c70:	d11a      	bne.n	8002ca8 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8002c72:	69bb      	ldr	r3, [r7, #24]
 8002c74:	0a5b      	lsrs	r3, r3, #9
 8002c76:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c7e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d111      	bne.n	8002ca8 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8002c84:	69bb      	ldr	r3, [r7, #24]
 8002c86:	0c1b      	lsrs	r3, r3, #16
 8002c88:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c90:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002c92:	429a      	cmp	r2, r3
 8002c94:	d108      	bne.n	8002ca8 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8002c96:	69bb      	ldr	r3, [r7, #24]
 8002c98:	0e1b      	lsrs	r3, r3, #24
 8002c9a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ca2:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d001      	beq.n	8002cac <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e024      	b.n	8002cf6 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8002cac:	4b14      	ldr	r3, [pc, #80]	; (8002d00 <HAL_RCC_OscConfig+0xdb4>)
 8002cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cb0:	08db      	lsrs	r3, r3, #3
 8002cb2:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d01a      	beq.n	8002cf4 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8002cbe:	4b10      	ldr	r3, [pc, #64]	; (8002d00 <HAL_RCC_OscConfig+0xdb4>)
 8002cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cc2:	4a0f      	ldr	r2, [pc, #60]	; (8002d00 <HAL_RCC_OscConfig+0xdb4>)
 8002cc4:	f023 0310 	bic.w	r3, r3, #16
 8002cc8:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cca:	f7fd fce9 	bl	80006a0 <HAL_GetTick>
 8002cce:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8002cd0:	bf00      	nop
 8002cd2:	f7fd fce5 	bl	80006a0 <HAL_GetTick>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d0f9      	beq.n	8002cd2 <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ce2:	4a07      	ldr	r2, [pc, #28]	; (8002d00 <HAL_RCC_OscConfig+0xdb4>)
 8002ce4:	00db      	lsls	r3, r3, #3
 8002ce6:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8002ce8:	4b05      	ldr	r3, [pc, #20]	; (8002d00 <HAL_RCC_OscConfig+0xdb4>)
 8002cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cec:	4a04      	ldr	r2, [pc, #16]	; (8002d00 <HAL_RCC_OscConfig+0xdb4>)
 8002cee:	f043 0310 	orr.w	r3, r3, #16
 8002cf2:	6293      	str	r3, [r2, #40]	; 0x28
      }
    }
  }
  return HAL_OK;
 8002cf4:	2300      	movs	r3, #0
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3738      	adds	r7, #56	; 0x38
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	46020c00 	.word	0x46020c00

08002d04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b086      	sub	sp, #24
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
 8002d0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d101      	bne.n	8002d18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e1d9      	b.n	80030cc <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d18:	4b9b      	ldr	r3, [pc, #620]	; (8002f88 <HAL_RCC_ClockConfig+0x284>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 030f 	and.w	r3, r3, #15
 8002d20:	683a      	ldr	r2, [r7, #0]
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d910      	bls.n	8002d48 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d26:	4b98      	ldr	r3, [pc, #608]	; (8002f88 <HAL_RCC_ClockConfig+0x284>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f023 020f 	bic.w	r2, r3, #15
 8002d2e:	4996      	ldr	r1, [pc, #600]	; (8002f88 <HAL_RCC_ClockConfig+0x284>)
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	4313      	orrs	r3, r2
 8002d34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d36:	4b94      	ldr	r3, [pc, #592]	; (8002f88 <HAL_RCC_ClockConfig+0x284>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 030f 	and.w	r3, r3, #15
 8002d3e:	683a      	ldr	r2, [r7, #0]
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d001      	beq.n	8002d48 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	e1c1      	b.n	80030cc <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 0310 	and.w	r3, r3, #16
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d010      	beq.n	8002d76 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	695a      	ldr	r2, [r3, #20]
 8002d58:	4b8c      	ldr	r3, [pc, #560]	; (8002f8c <HAL_RCC_ClockConfig+0x288>)
 8002d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d5c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d908      	bls.n	8002d76 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8002d64:	4b89      	ldr	r3, [pc, #548]	; (8002f8c <HAL_RCC_ClockConfig+0x288>)
 8002d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d68:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	695b      	ldr	r3, [r3, #20]
 8002d70:	4986      	ldr	r1, [pc, #536]	; (8002f8c <HAL_RCC_ClockConfig+0x288>)
 8002d72:	4313      	orrs	r3, r2
 8002d74:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0308 	and.w	r3, r3, #8
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d012      	beq.n	8002da8 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	691a      	ldr	r2, [r3, #16]
 8002d86:	4b81      	ldr	r3, [pc, #516]	; (8002f8c <HAL_RCC_ClockConfig+0x288>)
 8002d88:	6a1b      	ldr	r3, [r3, #32]
 8002d8a:	091b      	lsrs	r3, r3, #4
 8002d8c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002d90:	429a      	cmp	r2, r3
 8002d92:	d909      	bls.n	8002da8 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8002d94:	4b7d      	ldr	r3, [pc, #500]	; (8002f8c <HAL_RCC_ClockConfig+0x288>)
 8002d96:	6a1b      	ldr	r3, [r3, #32]
 8002d98:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	691b      	ldr	r3, [r3, #16]
 8002da0:	011b      	lsls	r3, r3, #4
 8002da2:	497a      	ldr	r1, [pc, #488]	; (8002f8c <HAL_RCC_ClockConfig+0x288>)
 8002da4:	4313      	orrs	r3, r2
 8002da6:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 0304 	and.w	r3, r3, #4
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d010      	beq.n	8002dd6 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	68da      	ldr	r2, [r3, #12]
 8002db8:	4b74      	ldr	r3, [pc, #464]	; (8002f8c <HAL_RCC_ClockConfig+0x288>)
 8002dba:	6a1b      	ldr	r3, [r3, #32]
 8002dbc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d908      	bls.n	8002dd6 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8002dc4:	4b71      	ldr	r3, [pc, #452]	; (8002f8c <HAL_RCC_ClockConfig+0x288>)
 8002dc6:	6a1b      	ldr	r3, [r3, #32]
 8002dc8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	496e      	ldr	r1, [pc, #440]	; (8002f8c <HAL_RCC_ClockConfig+0x288>)
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0302 	and.w	r3, r3, #2
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d010      	beq.n	8002e04 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	689a      	ldr	r2, [r3, #8]
 8002de6:	4b69      	ldr	r3, [pc, #420]	; (8002f8c <HAL_RCC_ClockConfig+0x288>)
 8002de8:	6a1b      	ldr	r3, [r3, #32]
 8002dea:	f003 030f 	and.w	r3, r3, #15
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d908      	bls.n	8002e04 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8002df2:	4b66      	ldr	r3, [pc, #408]	; (8002f8c <HAL_RCC_ClockConfig+0x288>)
 8002df4:	6a1b      	ldr	r3, [r3, #32]
 8002df6:	f023 020f 	bic.w	r2, r3, #15
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	4963      	ldr	r1, [pc, #396]	; (8002f8c <HAL_RCC_ClockConfig+0x288>)
 8002e00:	4313      	orrs	r3, r2
 8002e02:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 0301 	and.w	r3, r3, #1
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	f000 80d2 	beq.w	8002fb6 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8002e12:	2300      	movs	r3, #0
 8002e14:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	2b03      	cmp	r3, #3
 8002e1c:	d143      	bne.n	8002ea6 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e1e:	4b5b      	ldr	r3, [pc, #364]	; (8002f8c <HAL_RCC_ClockConfig+0x288>)
 8002e20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e24:	f003 0304 	and.w	r3, r3, #4
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d110      	bne.n	8002e4e <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002e2c:	4b57      	ldr	r3, [pc, #348]	; (8002f8c <HAL_RCC_ClockConfig+0x288>)
 8002e2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e32:	4a56      	ldr	r2, [pc, #344]	; (8002f8c <HAL_RCC_ClockConfig+0x288>)
 8002e34:	f043 0304 	orr.w	r3, r3, #4
 8002e38:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8002e3c:	4b53      	ldr	r3, [pc, #332]	; (8002f8c <HAL_RCC_ClockConfig+0x288>)
 8002e3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e42:	f003 0304 	and.w	r3, r3, #4
 8002e46:	60bb      	str	r3, [r7, #8]
 8002e48:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8002e4e:	f7fd fc27 	bl	80006a0 <HAL_GetTick>
 8002e52:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8002e54:	4b4e      	ldr	r3, [pc, #312]	; (8002f90 <HAL_RCC_ClockConfig+0x28c>)
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d00f      	beq.n	8002e80 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8002e60:	e008      	b.n	8002e74 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8002e62:	f7fd fc1d 	bl	80006a0 <HAL_GetTick>
 8002e66:	4602      	mov	r2, r0
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	1ad3      	subs	r3, r2, r3
 8002e6c:	2b02      	cmp	r3, #2
 8002e6e:	d901      	bls.n	8002e74 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8002e70:	2303      	movs	r3, #3
 8002e72:	e12b      	b.n	80030cc <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8002e74:	4b46      	ldr	r3, [pc, #280]	; (8002f90 <HAL_RCC_ClockConfig+0x28c>)
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d0f0      	beq.n	8002e62 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002e80:	7dfb      	ldrb	r3, [r7, #23]
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d107      	bne.n	8002e96 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002e86:	4b41      	ldr	r3, [pc, #260]	; (8002f8c <HAL_RCC_ClockConfig+0x288>)
 8002e88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e8c:	4a3f      	ldr	r2, [pc, #252]	; (8002f8c <HAL_RCC_ClockConfig+0x288>)
 8002e8e:	f023 0304 	bic.w	r3, r3, #4
 8002e92:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002e96:	4b3d      	ldr	r3, [pc, #244]	; (8002f8c <HAL_RCC_ClockConfig+0x288>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d121      	bne.n	8002ee6 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e112      	b.n	80030cc <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	2b02      	cmp	r3, #2
 8002eac:	d107      	bne.n	8002ebe <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002eae:	4b37      	ldr	r3, [pc, #220]	; (8002f8c <HAL_RCC_ClockConfig+0x288>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d115      	bne.n	8002ee6 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e106      	b.n	80030cc <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d107      	bne.n	8002ed6 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8002ec6:	4b31      	ldr	r3, [pc, #196]	; (8002f8c <HAL_RCC_ClockConfig+0x288>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 0304 	and.w	r3, r3, #4
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d109      	bne.n	8002ee6 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e0fa      	b.n	80030cc <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ed6:	4b2d      	ldr	r3, [pc, #180]	; (8002f8c <HAL_RCC_ClockConfig+0x288>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d101      	bne.n	8002ee6 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e0f2      	b.n	80030cc <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8002ee6:	4b29      	ldr	r3, [pc, #164]	; (8002f8c <HAL_RCC_ClockConfig+0x288>)
 8002ee8:	69db      	ldr	r3, [r3, #28]
 8002eea:	f023 0203 	bic.w	r2, r3, #3
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	4926      	ldr	r1, [pc, #152]	; (8002f8c <HAL_RCC_ClockConfig+0x288>)
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8002ef8:	f7fd fbd2 	bl	80006a0 <HAL_GetTick>
 8002efc:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	2b03      	cmp	r3, #3
 8002f04:	d112      	bne.n	8002f2c <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f06:	e00a      	b.n	8002f1e <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f08:	f7fd fbca 	bl	80006a0 <HAL_GetTick>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d901      	bls.n	8002f1e <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	e0d6      	b.n	80030cc <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f1e:	4b1b      	ldr	r3, [pc, #108]	; (8002f8c <HAL_RCC_ClockConfig+0x288>)
 8002f20:	69db      	ldr	r3, [r3, #28]
 8002f22:	f003 030c 	and.w	r3, r3, #12
 8002f26:	2b0c      	cmp	r3, #12
 8002f28:	d1ee      	bne.n	8002f08 <HAL_RCC_ClockConfig+0x204>
 8002f2a:	e044      	b.n	8002fb6 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	2b02      	cmp	r3, #2
 8002f32:	d112      	bne.n	8002f5a <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f34:	e00a      	b.n	8002f4c <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f36:	f7fd fbb3 	bl	80006a0 <HAL_GetTick>
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	1ad3      	subs	r3, r2, r3
 8002f40:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d901      	bls.n	8002f4c <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002f48:	2303      	movs	r3, #3
 8002f4a:	e0bf      	b.n	80030cc <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f4c:	4b0f      	ldr	r3, [pc, #60]	; (8002f8c <HAL_RCC_ClockConfig+0x288>)
 8002f4e:	69db      	ldr	r3, [r3, #28]
 8002f50:	f003 030c 	and.w	r3, r3, #12
 8002f54:	2b08      	cmp	r3, #8
 8002f56:	d1ee      	bne.n	8002f36 <HAL_RCC_ClockConfig+0x232>
 8002f58:	e02d      	b.n	8002fb6 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d123      	bne.n	8002faa <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002f62:	e00a      	b.n	8002f7a <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f64:	f7fd fb9c 	bl	80006a0 <HAL_GetTick>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	1ad3      	subs	r3, r2, r3
 8002f6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d901      	bls.n	8002f7a <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8002f76:	2303      	movs	r3, #3
 8002f78:	e0a8      	b.n	80030cc <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002f7a:	4b04      	ldr	r3, [pc, #16]	; (8002f8c <HAL_RCC_ClockConfig+0x288>)
 8002f7c:	69db      	ldr	r3, [r3, #28]
 8002f7e:	f003 030c 	and.w	r3, r3, #12
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d1ee      	bne.n	8002f64 <HAL_RCC_ClockConfig+0x260>
 8002f86:	e016      	b.n	8002fb6 <HAL_RCC_ClockConfig+0x2b2>
 8002f88:	40022000 	.word	0x40022000
 8002f8c:	46020c00 	.word	0x46020c00
 8002f90:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f94:	f7fd fb84 	bl	80006a0 <HAL_GetTick>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	1ad3      	subs	r3, r2, r3
 8002f9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d901      	bls.n	8002faa <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8002fa6:	2303      	movs	r3, #3
 8002fa8:	e090      	b.n	80030cc <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002faa:	4b4a      	ldr	r3, [pc, #296]	; (80030d4 <HAL_RCC_ClockConfig+0x3d0>)
 8002fac:	69db      	ldr	r3, [r3, #28]
 8002fae:	f003 030c 	and.w	r3, r3, #12
 8002fb2:	2b04      	cmp	r3, #4
 8002fb4:	d1ee      	bne.n	8002f94 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 0302 	and.w	r3, r3, #2
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d010      	beq.n	8002fe4 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	689a      	ldr	r2, [r3, #8]
 8002fc6:	4b43      	ldr	r3, [pc, #268]	; (80030d4 <HAL_RCC_ClockConfig+0x3d0>)
 8002fc8:	6a1b      	ldr	r3, [r3, #32]
 8002fca:	f003 030f 	and.w	r3, r3, #15
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	d208      	bcs.n	8002fe4 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8002fd2:	4b40      	ldr	r3, [pc, #256]	; (80030d4 <HAL_RCC_ClockConfig+0x3d0>)
 8002fd4:	6a1b      	ldr	r3, [r3, #32]
 8002fd6:	f023 020f 	bic.w	r2, r3, #15
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	493d      	ldr	r1, [pc, #244]	; (80030d4 <HAL_RCC_ClockConfig+0x3d0>)
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002fe4:	4b3c      	ldr	r3, [pc, #240]	; (80030d8 <HAL_RCC_ClockConfig+0x3d4>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f003 030f 	and.w	r3, r3, #15
 8002fec:	683a      	ldr	r2, [r7, #0]
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d210      	bcs.n	8003014 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ff2:	4b39      	ldr	r3, [pc, #228]	; (80030d8 <HAL_RCC_ClockConfig+0x3d4>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f023 020f 	bic.w	r2, r3, #15
 8002ffa:	4937      	ldr	r1, [pc, #220]	; (80030d8 <HAL_RCC_ClockConfig+0x3d4>)
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	4313      	orrs	r3, r2
 8003000:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003002:	4b35      	ldr	r3, [pc, #212]	; (80030d8 <HAL_RCC_ClockConfig+0x3d4>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 030f 	and.w	r3, r3, #15
 800300a:	683a      	ldr	r2, [r7, #0]
 800300c:	429a      	cmp	r2, r3
 800300e:	d001      	beq.n	8003014 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	e05b      	b.n	80030cc <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 0304 	and.w	r3, r3, #4
 800301c:	2b00      	cmp	r3, #0
 800301e:	d010      	beq.n	8003042 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	68da      	ldr	r2, [r3, #12]
 8003024:	4b2b      	ldr	r3, [pc, #172]	; (80030d4 <HAL_RCC_ClockConfig+0x3d0>)
 8003026:	6a1b      	ldr	r3, [r3, #32]
 8003028:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800302c:	429a      	cmp	r2, r3
 800302e:	d208      	bcs.n	8003042 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8003030:	4b28      	ldr	r3, [pc, #160]	; (80030d4 <HAL_RCC_ClockConfig+0x3d0>)
 8003032:	6a1b      	ldr	r3, [r3, #32]
 8003034:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	4925      	ldr	r1, [pc, #148]	; (80030d4 <HAL_RCC_ClockConfig+0x3d0>)
 800303e:	4313      	orrs	r3, r2
 8003040:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 0308 	and.w	r3, r3, #8
 800304a:	2b00      	cmp	r3, #0
 800304c:	d012      	beq.n	8003074 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	691a      	ldr	r2, [r3, #16]
 8003052:	4b20      	ldr	r3, [pc, #128]	; (80030d4 <HAL_RCC_ClockConfig+0x3d0>)
 8003054:	6a1b      	ldr	r3, [r3, #32]
 8003056:	091b      	lsrs	r3, r3, #4
 8003058:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800305c:	429a      	cmp	r2, r3
 800305e:	d209      	bcs.n	8003074 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8003060:	4b1c      	ldr	r3, [pc, #112]	; (80030d4 <HAL_RCC_ClockConfig+0x3d0>)
 8003062:	6a1b      	ldr	r3, [r3, #32]
 8003064:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	691b      	ldr	r3, [r3, #16]
 800306c:	011b      	lsls	r3, r3, #4
 800306e:	4919      	ldr	r1, [pc, #100]	; (80030d4 <HAL_RCC_ClockConfig+0x3d0>)
 8003070:	4313      	orrs	r3, r2
 8003072:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 0310 	and.w	r3, r3, #16
 800307c:	2b00      	cmp	r3, #0
 800307e:	d010      	beq.n	80030a2 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	695a      	ldr	r2, [r3, #20]
 8003084:	4b13      	ldr	r3, [pc, #76]	; (80030d4 <HAL_RCC_ClockConfig+0x3d0>)
 8003086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003088:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800308c:	429a      	cmp	r2, r3
 800308e:	d208      	bcs.n	80030a2 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8003090:	4b10      	ldr	r3, [pc, #64]	; (80030d4 <HAL_RCC_ClockConfig+0x3d0>)
 8003092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003094:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	695b      	ldr	r3, [r3, #20]
 800309c:	490d      	ldr	r1, [pc, #52]	; (80030d4 <HAL_RCC_ClockConfig+0x3d0>)
 800309e:	4313      	orrs	r3, r2
 80030a0:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80030a2:	f000 f821 	bl	80030e8 <HAL_RCC_GetSysClockFreq>
 80030a6:	4602      	mov	r2, r0
 80030a8:	4b0a      	ldr	r3, [pc, #40]	; (80030d4 <HAL_RCC_ClockConfig+0x3d0>)
 80030aa:	6a1b      	ldr	r3, [r3, #32]
 80030ac:	f003 030f 	and.w	r3, r3, #15
 80030b0:	490a      	ldr	r1, [pc, #40]	; (80030dc <HAL_RCC_ClockConfig+0x3d8>)
 80030b2:	5ccb      	ldrb	r3, [r1, r3]
 80030b4:	fa22 f303 	lsr.w	r3, r2, r3
 80030b8:	4a09      	ldr	r2, [pc, #36]	; (80030e0 <HAL_RCC_ClockConfig+0x3dc>)
 80030ba:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80030bc:	4b09      	ldr	r3, [pc, #36]	; (80030e4 <HAL_RCC_ClockConfig+0x3e0>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4618      	mov	r0, r3
 80030c2:	f7fd faa3 	bl	800060c <HAL_InitTick>
 80030c6:	4603      	mov	r3, r0
 80030c8:	73fb      	strb	r3, [r7, #15]

  return status;
 80030ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	3718      	adds	r7, #24
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}
 80030d4:	46020c00 	.word	0x46020c00
 80030d8:	40022000 	.word	0x40022000
 80030dc:	0800c3c8 	.word	0x0800c3c8
 80030e0:	20000024 	.word	0x20000024
 80030e4:	20000000 	.word	0x20000000

080030e8 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b08b      	sub	sp, #44	; 0x2c
 80030ec:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80030ee:	2300      	movs	r3, #0
 80030f0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 80030f2:	2300      	movs	r3, #0
 80030f4:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030f6:	4b7b      	ldr	r3, [pc, #492]	; (80032e4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80030f8:	69db      	ldr	r3, [r3, #28]
 80030fa:	f003 030c 	and.w	r3, r3, #12
 80030fe:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003100:	4b78      	ldr	r3, [pc, #480]	; (80032e4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8003102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003104:	f003 0303 	and.w	r3, r3, #3
 8003108:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800310a:	69bb      	ldr	r3, [r7, #24]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d005      	beq.n	800311c <HAL_RCC_GetSysClockFreq+0x34>
 8003110:	69bb      	ldr	r3, [r7, #24]
 8003112:	2b0c      	cmp	r3, #12
 8003114:	d121      	bne.n	800315a <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	2b01      	cmp	r3, #1
 800311a:	d11e      	bne.n	800315a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 800311c:	4b71      	ldr	r3, [pc, #452]	; (80032e4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003124:	2b00      	cmp	r3, #0
 8003126:	d107      	bne.n	8003138 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8003128:	4b6e      	ldr	r3, [pc, #440]	; (80032e4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800312a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800312e:	0b1b      	lsrs	r3, r3, #12
 8003130:	f003 030f 	and.w	r3, r3, #15
 8003134:	627b      	str	r3, [r7, #36]	; 0x24
 8003136:	e005      	b.n	8003144 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8003138:	4b6a      	ldr	r3, [pc, #424]	; (80032e4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	0f1b      	lsrs	r3, r3, #28
 800313e:	f003 030f 	and.w	r3, r3, #15
 8003142:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003144:	4a68      	ldr	r2, [pc, #416]	; (80032e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003148:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800314c:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800314e:	69bb      	ldr	r3, [r7, #24]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d110      	bne.n	8003176 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003156:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003158:	e00d      	b.n	8003176 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800315a:	4b62      	ldr	r3, [pc, #392]	; (80032e4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800315c:	69db      	ldr	r3, [r3, #28]
 800315e:	f003 030c 	and.w	r3, r3, #12
 8003162:	2b04      	cmp	r3, #4
 8003164:	d102      	bne.n	800316c <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003166:	4b61      	ldr	r3, [pc, #388]	; (80032ec <HAL_RCC_GetSysClockFreq+0x204>)
 8003168:	623b      	str	r3, [r7, #32]
 800316a:	e004      	b.n	8003176 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800316c:	69bb      	ldr	r3, [r7, #24]
 800316e:	2b08      	cmp	r3, #8
 8003170:	d101      	bne.n	8003176 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003172:	4b5e      	ldr	r3, [pc, #376]	; (80032ec <HAL_RCC_GetSysClockFreq+0x204>)
 8003174:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003176:	69bb      	ldr	r3, [r7, #24]
 8003178:	2b0c      	cmp	r3, #12
 800317a:	f040 80ac 	bne.w	80032d6 <HAL_RCC_GetSysClockFreq+0x1ee>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800317e:	4b59      	ldr	r3, [pc, #356]	; (80032e4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8003180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003182:	f003 0303 	and.w	r3, r3, #3
 8003186:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8003188:	4b56      	ldr	r3, [pc, #344]	; (80032e4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800318a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800318c:	0a1b      	lsrs	r3, r3, #8
 800318e:	f003 030f 	and.w	r3, r3, #15
 8003192:	3301      	adds	r3, #1
 8003194:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8003196:	4b53      	ldr	r3, [pc, #332]	; (80032e4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8003198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800319a:	091b      	lsrs	r3, r3, #4
 800319c:	f003 0301 	and.w	r3, r3, #1
 80031a0:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80031a2:	4b50      	ldr	r3, [pc, #320]	; (80032e4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80031a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031a6:	08db      	lsrs	r3, r3, #3
 80031a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80031ac:	68ba      	ldr	r2, [r7, #8]
 80031ae:	fb02 f303 	mul.w	r3, r2, r3
 80031b2:	ee07 3a90 	vmov	s15, r3
 80031b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031ba:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    if (pllm != 0U)
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	f000 8086 	beq.w	80032d2 <HAL_RCC_GetSysClockFreq+0x1ea>
    {
      switch (pllsource)
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	2b02      	cmp	r3, #2
 80031ca:	d003      	beq.n	80031d4 <HAL_RCC_GetSysClockFreq+0xec>
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	2b03      	cmp	r3, #3
 80031d0:	d022      	beq.n	8003218 <HAL_RCC_GetSysClockFreq+0x130>
 80031d2:	e043      	b.n	800325c <HAL_RCC_GetSysClockFreq+0x174>
      {
        case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	ee07 3a90 	vmov	s15, r3
 80031da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031de:	eddf 6a44 	vldr	s13, [pc, #272]	; 80032f0 <HAL_RCC_GetSysClockFreq+0x208>
 80031e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031e6:	4b3f      	ldr	r3, [pc, #252]	; (80032e4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80031e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031ee:	ee07 3a90 	vmov	s15, r3
 80031f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80031f6:	ed97 6a01 	vldr	s12, [r7, #4]
 80031fa:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80032f4 <HAL_RCC_GetSysClockFreq+0x20c>
 80031fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003202:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003206:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800320a:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800320e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003212:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8003216:	e046      	b.n	80032a6 <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	ee07 3a90 	vmov	s15, r3
 800321e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003222:	eddf 6a33 	vldr	s13, [pc, #204]	; 80032f0 <HAL_RCC_GetSysClockFreq+0x208>
 8003226:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800322a:	4b2e      	ldr	r3, [pc, #184]	; (80032e4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800322c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800322e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003232:	ee07 3a90 	vmov	s15, r3
 8003236:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800323a:	ed97 6a01 	vldr	s12, [r7, #4]
 800323e:	eddf 5a2d 	vldr	s11, [pc, #180]	; 80032f4 <HAL_RCC_GetSysClockFreq+0x20c>
 8003242:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003246:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800324a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800324e:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003252:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003256:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 800325a:	e024      	b.n	80032a6 <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        default:
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800325c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800325e:	ee07 3a90 	vmov	s15, r3
 8003262:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	ee07 3a90 	vmov	s15, r3
 800326c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003270:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003274:	4b1b      	ldr	r3, [pc, #108]	; (80032e4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8003276:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003278:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800327c:	ee07 3a90 	vmov	s15, r3
 8003280:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003284:	ed97 6a01 	vldr	s12, [r7, #4]
 8003288:	eddf 5a1a 	vldr	s11, [pc, #104]	; 80032f4 <HAL_RCC_GetSysClockFreq+0x20c>
 800328c:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003290:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003294:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003298:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800329c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032a0:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 80032a4:	bf00      	nop
      }

      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 80032a6:	4b0f      	ldr	r3, [pc, #60]	; (80032e4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80032a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032aa:	0e1b      	lsrs	r3, r3, #24
 80032ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80032b0:	3301      	adds	r3, #1
 80032b2:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	ee07 3a90 	vmov	s15, r3
 80032ba:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80032be:	edd7 6a07 	vldr	s13, [r7, #28]
 80032c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80032c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80032ca:	ee17 3a90 	vmov	r3, s15
 80032ce:	623b      	str	r3, [r7, #32]
 80032d0:	e001      	b.n	80032d6 <HAL_RCC_GetSysClockFreq+0x1ee>
    }
    else
    {
      sysclockfreq = 0;
 80032d2:	2300      	movs	r3, #0
 80032d4:	623b      	str	r3, [r7, #32]
    }
  }

  return sysclockfreq;
 80032d6:	6a3b      	ldr	r3, [r7, #32]
}
 80032d8:	4618      	mov	r0, r3
 80032da:	372c      	adds	r7, #44	; 0x2c
 80032dc:	46bd      	mov	sp, r7
 80032de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e2:	4770      	bx	lr
 80032e4:	46020c00 	.word	0x46020c00
 80032e8:	0800c3e0 	.word	0x0800c3e0
 80032ec:	00f42400 	.word	0x00f42400
 80032f0:	4b742400 	.word	0x4b742400
 80032f4:	46000000 	.word	0x46000000

080032f8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80032fc:	f7ff fef4 	bl	80030e8 <HAL_RCC_GetSysClockFreq>
 8003300:	4602      	mov	r2, r0
 8003302:	4b07      	ldr	r3, [pc, #28]	; (8003320 <HAL_RCC_GetHCLKFreq+0x28>)
 8003304:	6a1b      	ldr	r3, [r3, #32]
 8003306:	f003 030f 	and.w	r3, r3, #15
 800330a:	4906      	ldr	r1, [pc, #24]	; (8003324 <HAL_RCC_GetHCLKFreq+0x2c>)
 800330c:	5ccb      	ldrb	r3, [r1, r3]
 800330e:	fa22 f303 	lsr.w	r3, r2, r3
 8003312:	4a05      	ldr	r2, [pc, #20]	; (8003328 <HAL_RCC_GetHCLKFreq+0x30>)
 8003314:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8003316:	4b04      	ldr	r3, [pc, #16]	; (8003328 <HAL_RCC_GetHCLKFreq+0x30>)
 8003318:	681b      	ldr	r3, [r3, #0]
}
 800331a:	4618      	mov	r0, r3
 800331c:	bd80      	pop	{r7, pc}
 800331e:	bf00      	nop
 8003320:	46020c00 	.word	0x46020c00
 8003324:	0800c3c8 	.word	0x0800c3c8
 8003328:	20000024 	.word	0x20000024

0800332c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8003330:	f7ff ffe2 	bl	80032f8 <HAL_RCC_GetHCLKFreq>
 8003334:	4602      	mov	r2, r0
 8003336:	4b05      	ldr	r3, [pc, #20]	; (800334c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003338:	6a1b      	ldr	r3, [r3, #32]
 800333a:	091b      	lsrs	r3, r3, #4
 800333c:	f003 0307 	and.w	r3, r3, #7
 8003340:	4903      	ldr	r1, [pc, #12]	; (8003350 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003342:	5ccb      	ldrb	r3, [r1, r3]
 8003344:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003348:	4618      	mov	r0, r3
 800334a:	bd80      	pop	{r7, pc}
 800334c:	46020c00 	.word	0x46020c00
 8003350:	0800c3d8 	.word	0x0800c3d8

08003354 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8003358:	f7ff ffce 	bl	80032f8 <HAL_RCC_GetHCLKFreq>
 800335c:	4602      	mov	r2, r0
 800335e:	4b05      	ldr	r3, [pc, #20]	; (8003374 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003360:	6a1b      	ldr	r3, [r3, #32]
 8003362:	0a1b      	lsrs	r3, r3, #8
 8003364:	f003 0307 	and.w	r3, r3, #7
 8003368:	4903      	ldr	r1, [pc, #12]	; (8003378 <HAL_RCC_GetPCLK2Freq+0x24>)
 800336a:	5ccb      	ldrb	r3, [r1, r3]
 800336c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003370:	4618      	mov	r0, r3
 8003372:	bd80      	pop	{r7, pc}
 8003374:	46020c00 	.word	0x46020c00
 8003378:	0800c3d8 	.word	0x0800c3d8

0800337c <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8003380:	f7ff ffba 	bl	80032f8 <HAL_RCC_GetHCLKFreq>
 8003384:	4602      	mov	r2, r0
 8003386:	4b05      	ldr	r3, [pc, #20]	; (800339c <HAL_RCC_GetPCLK3Freq+0x20>)
 8003388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800338a:	091b      	lsrs	r3, r3, #4
 800338c:	f003 0307 	and.w	r3, r3, #7
 8003390:	4903      	ldr	r1, [pc, #12]	; (80033a0 <HAL_RCC_GetPCLK3Freq+0x24>)
 8003392:	5ccb      	ldrb	r3, [r1, r3]
 8003394:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003398:	4618      	mov	r0, r3
 800339a:	bd80      	pop	{r7, pc}
 800339c:	46020c00 	.word	0x46020c00
 80033a0:	0800c3d8 	.word	0x0800c3d8

080033a4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b086      	sub	sp, #24
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 80033ac:	4b3e      	ldr	r3, [pc, #248]	; (80034a8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80033ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033b2:	f003 0304 	and.w	r3, r3, #4
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d003      	beq.n	80033c2 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80033ba:	f7fe fd49 	bl	8001e50 <HAL_PWREx_GetVoltageRange>
 80033be:	6178      	str	r0, [r7, #20]
 80033c0:	e019      	b.n	80033f6 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80033c2:	4b39      	ldr	r3, [pc, #228]	; (80034a8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80033c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033c8:	4a37      	ldr	r2, [pc, #220]	; (80034a8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80033ca:	f043 0304 	orr.w	r3, r3, #4
 80033ce:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80033d2:	4b35      	ldr	r3, [pc, #212]	; (80034a8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80033d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033d8:	f003 0304 	and.w	r3, r3, #4
 80033dc:	60fb      	str	r3, [r7, #12]
 80033de:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80033e0:	f7fe fd36 	bl	8001e50 <HAL_PWREx_GetVoltageRange>
 80033e4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80033e6:	4b30      	ldr	r3, [pc, #192]	; (80034a8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80033e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033ec:	4a2e      	ldr	r2, [pc, #184]	; (80034a8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80033ee:	f023 0304 	bic.w	r3, r3, #4
 80033f2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80033fc:	d003      	beq.n	8003406 <RCC_SetFlashLatencyFromMSIRange+0x62>
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003404:	d109      	bne.n	800341a <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800340c:	d202      	bcs.n	8003414 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 800340e:	2301      	movs	r3, #1
 8003410:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8003412:	e033      	b.n	800347c <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8003414:	2300      	movs	r3, #0
 8003416:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8003418:	e030      	b.n	800347c <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003420:	d208      	bcs.n	8003434 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003428:	d102      	bne.n	8003430 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 800342a:	2303      	movs	r3, #3
 800342c:	613b      	str	r3, [r7, #16]
 800342e:	e025      	b.n	800347c <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	e035      	b.n	80034a0 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800343a:	d90f      	bls.n	800345c <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d109      	bne.n	8003456 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003448:	d902      	bls.n	8003450 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 800344a:	2300      	movs	r3, #0
 800344c:	613b      	str	r3, [r7, #16]
 800344e:	e015      	b.n	800347c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8003450:	2301      	movs	r3, #1
 8003452:	613b      	str	r3, [r7, #16]
 8003454:	e012      	b.n	800347c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8003456:	2300      	movs	r3, #0
 8003458:	613b      	str	r3, [r7, #16]
 800345a:	e00f      	b.n	800347c <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003462:	d109      	bne.n	8003478 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800346a:	d102      	bne.n	8003472 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 800346c:	2301      	movs	r3, #1
 800346e:	613b      	str	r3, [r7, #16]
 8003470:	e004      	b.n	800347c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8003472:	2302      	movs	r3, #2
 8003474:	613b      	str	r3, [r7, #16]
 8003476:	e001      	b.n	800347c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8003478:	2301      	movs	r3, #1
 800347a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800347c:	4b0b      	ldr	r3, [pc, #44]	; (80034ac <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f023 020f 	bic.w	r2, r3, #15
 8003484:	4909      	ldr	r1, [pc, #36]	; (80034ac <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	4313      	orrs	r3, r2
 800348a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800348c:	4b07      	ldr	r3, [pc, #28]	; (80034ac <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 030f 	and.w	r3, r3, #15
 8003494:	693a      	ldr	r2, [r7, #16]
 8003496:	429a      	cmp	r2, r3
 8003498:	d001      	beq.n	800349e <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e000      	b.n	80034a0 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 800349e:	2300      	movs	r3, #0
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	3718      	adds	r7, #24
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}
 80034a8:	46020c00 	.word	0x46020c00
 80034ac:	40022000 	.word	0x40022000

080034b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 80034b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034b4:	b0c4      	sub	sp, #272	; 0x110
 80034b6:	af00      	add	r7, sp, #0
 80034b8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80034bc:	2300      	movs	r3, #0
 80034be:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80034c2:	2300      	movs	r3, #0
 80034c4:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80034c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034d0:	f002 0401 	and.w	r4, r2, #1
 80034d4:	2500      	movs	r5, #0
 80034d6:	ea54 0305 	orrs.w	r3, r4, r5
 80034da:	d00b      	beq.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 80034dc:	4bd5      	ldr	r3, [pc, #852]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80034de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034e2:	f023 0103 	bic.w	r1, r3, #3
 80034e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034ec:	4ad1      	ldr	r2, [pc, #836]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80034ee:	430b      	orrs	r3, r1
 80034f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80034f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034fc:	f002 0802 	and.w	r8, r2, #2
 8003500:	f04f 0900 	mov.w	r9, #0
 8003504:	ea58 0309 	orrs.w	r3, r8, r9
 8003508:	d00b      	beq.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800350a:	4bca      	ldr	r3, [pc, #808]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800350c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003510:	f023 010c 	bic.w	r1, r3, #12
 8003514:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003518:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800351a:	4ac6      	ldr	r2, [pc, #792]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800351c:	430b      	orrs	r3, r1
 800351e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003522:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800352a:	f002 0a04 	and.w	sl, r2, #4
 800352e:	f04f 0b00 	mov.w	fp, #0
 8003532:	ea5a 030b 	orrs.w	r3, sl, fp
 8003536:	d00b      	beq.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8003538:	4bbe      	ldr	r3, [pc, #760]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800353a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800353e:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8003542:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003546:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003548:	4aba      	ldr	r2, [pc, #744]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800354a:	430b      	orrs	r3, r1
 800354c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003550:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003558:	f002 0308 	and.w	r3, r2, #8
 800355c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003560:	2300      	movs	r3, #0
 8003562:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003566:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800356a:	460b      	mov	r3, r1
 800356c:	4313      	orrs	r3, r2
 800356e:	d00b      	beq.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8003570:	4bb0      	ldr	r3, [pc, #704]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003572:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003576:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800357a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800357e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003580:	4aac      	ldr	r2, [pc, #688]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003582:	430b      	orrs	r3, r1
 8003584:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003588:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800358c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003590:	f002 0310 	and.w	r3, r2, #16
 8003594:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003598:	2300      	movs	r3, #0
 800359a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800359e:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80035a2:	460b      	mov	r3, r1
 80035a4:	4313      	orrs	r3, r2
 80035a6:	d00b      	beq.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 80035a8:	4ba2      	ldr	r3, [pc, #648]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80035aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80035ae:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80035b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80035b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035b8:	4a9e      	ldr	r2, [pc, #632]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80035ba:	430b      	orrs	r3, r1
 80035bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }
#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80035c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80035c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035c8:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80035cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80035d0:	2300      	movs	r3, #0
 80035d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80035d6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80035da:	460b      	mov	r3, r1
 80035dc:	4313      	orrs	r3, r2
 80035de:	d00b      	beq.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 80035e0:	4b94      	ldr	r3, [pc, #592]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80035e2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80035e6:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80035ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80035ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035f0:	4a90      	ldr	r2, [pc, #576]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80035f2:	430b      	orrs	r3, r1
 80035f4:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80035f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80035fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003600:	f002 0320 	and.w	r3, r2, #32
 8003604:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003608:	2300      	movs	r3, #0
 800360a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800360e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003612:	460b      	mov	r3, r1
 8003614:	4313      	orrs	r3, r2
 8003616:	d00b      	beq.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8003618:	4b86      	ldr	r3, [pc, #536]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800361a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800361e:	f023 0107 	bic.w	r1, r3, #7
 8003622:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003626:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003628:	4a82      	ldr	r2, [pc, #520]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800362a:	430b      	orrs	r3, r1
 800362c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003630:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003638:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800363c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003640:	2300      	movs	r3, #0
 8003642:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003646:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800364a:	460b      	mov	r3, r1
 800364c:	4313      	orrs	r3, r2
 800364e:	d00b      	beq.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8003650:	4b78      	ldr	r3, [pc, #480]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003652:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003656:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 800365a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800365e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003660:	4a74      	ldr	r2, [pc, #464]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003662:	430b      	orrs	r3, r1
 8003664:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003668:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800366c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003670:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8003674:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003678:	2300      	movs	r3, #0
 800367a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800367e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8003682:	460b      	mov	r3, r1
 8003684:	4313      	orrs	r3, r2
 8003686:	d00b      	beq.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8003688:	4b6a      	ldr	r3, [pc, #424]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800368a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800368e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003692:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003696:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003698:	4a66      	ldr	r2, [pc, #408]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800369a:	430b      	orrs	r3, r1
 800369c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80036a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036a8:	f402 7380 	and.w	r3, r2, #256	; 0x100
 80036ac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80036b0:	2300      	movs	r3, #0
 80036b2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80036b6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80036ba:	460b      	mov	r3, r1
 80036bc:	4313      	orrs	r3, r2
 80036be:	d00b      	beq.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 80036c0:	4b5c      	ldr	r3, [pc, #368]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80036c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80036c6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80036ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036d0:	4a58      	ldr	r2, [pc, #352]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80036d2:	430b      	orrs	r3, r1
 80036d4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80036d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036e0:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80036e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80036e8:	2300      	movs	r3, #0
 80036ea:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80036ee:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80036f2:	460b      	mov	r3, r1
 80036f4:	4313      	orrs	r3, r2
 80036f6:	d00b      	beq.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 80036f8:	4b4e      	ldr	r3, [pc, #312]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80036fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80036fe:	f423 4140 	bic.w	r1, r3, #49152	; 0xc000
 8003702:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003706:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003708:	4a4a      	ldr	r2, [pc, #296]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800370a:	430b      	orrs	r3, r1
 800370c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

#if defined(I2C5)
  /*-------------------------- I2C5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C5) == RCC_PERIPHCLK_I2C5)
 8003710:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003718:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800371c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003720:	2300      	movs	r3, #0
 8003722:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003726:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800372a:	460b      	mov	r3, r1
 800372c:	4313      	orrs	r3, r2
 800372e:	d00b      	beq.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C5CLKSOURCE(pPeriphClkInit->I2c5ClockSelection));

    /* Configure the I2C5 clock source */
    __HAL_RCC_I2C5_CONFIG(pPeriphClkInit->I2c5ClockSelection);
 8003730:	4b40      	ldr	r3, [pc, #256]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003732:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003736:	f023 7140 	bic.w	r1, r3, #50331648	; 0x3000000
 800373a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800373e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003740:	4a3c      	ldr	r2, [pc, #240]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003742:	430b      	orrs	r3, r1
 8003744:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
#endif /* I2C5 */

#if defined(I2C6)
  /*-------------------------- I2C6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C6) == RCC_PERIPHCLK_I2C6)
 8003748:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800374c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003750:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8003754:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003758:	2300      	movs	r3, #0
 800375a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800375e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003762:	460b      	mov	r3, r1
 8003764:	4313      	orrs	r3, r2
 8003766:	d00c      	beq.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C6CLKSOURCE(pPeriphClkInit->I2c6ClockSelection));

    /* Configure the I2C6 clock source */
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
 8003768:	4b32      	ldr	r3, [pc, #200]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800376a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800376e:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8003772:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003776:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800377a:	4a2e      	ldr	r2, [pc, #184]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800377c:	430b      	orrs	r3, r1
 800377e:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003782:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800378a:	f402 7300 	and.w	r3, r2, #512	; 0x200
 800378e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003792:	2300      	movs	r3, #0
 8003794:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003798:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800379c:	460b      	mov	r3, r1
 800379e:	4313      	orrs	r3, r2
 80037a0:	d00c      	beq.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x30c>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 80037a2:	4b24      	ldr	r3, [pc, #144]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80037a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80037a8:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 80037ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037b4:	4a1f      	ldr	r2, [pc, #124]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80037b6:	430b      	orrs	r3, r1
 80037b8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80037bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037c4:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80037c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80037cc:	2300      	movs	r3, #0
 80037ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80037d2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80037d6:	460b      	mov	r3, r1
 80037d8:	4313      	orrs	r3, r2
 80037da:	d00c      	beq.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 80037dc:	4b15      	ldr	r3, [pc, #84]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80037de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80037e2:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 80037e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037ee:	4a11      	ldr	r2, [pc, #68]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80037f0:	430b      	orrs	r3, r1
 80037f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 80037f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037fe:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8003802:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003806:	2300      	movs	r3, #0
 8003808:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800380c:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8003810:	460b      	mov	r3, r1
 8003812:	4313      	orrs	r3, r2
 8003814:	d010      	beq.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x388>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8003816:	4b07      	ldr	r3, [pc, #28]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003818:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800381c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003820:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003824:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003828:	4a02      	ldr	r2, [pc, #8]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800382a:	430b      	orrs	r3, r1
 800382c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003830:	e002      	b.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x388>
 8003832:	bf00      	nop
 8003834:	46020c00 	.word	0x46020c00
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003838:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800383c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003840:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8003844:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003848:	2300      	movs	r3, #0
 800384a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800384e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8003852:	460b      	mov	r3, r1
 8003854:	4313      	orrs	r3, r2
 8003856:	d04c      	beq.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8003858:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800385c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003860:	2b80      	cmp	r3, #128	; 0x80
 8003862:	d02d      	beq.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8003864:	2b80      	cmp	r3, #128	; 0x80
 8003866:	d827      	bhi.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8003868:	2b60      	cmp	r3, #96	; 0x60
 800386a:	d02b      	beq.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x414>
 800386c:	2b60      	cmp	r3, #96	; 0x60
 800386e:	d823      	bhi.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8003870:	2b40      	cmp	r3, #64	; 0x40
 8003872:	d006      	beq.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 8003874:	2b40      	cmp	r3, #64	; 0x40
 8003876:	d81f      	bhi.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8003878:	2b00      	cmp	r3, #0
 800387a:	d009      	beq.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800387c:	2b20      	cmp	r3, #32
 800387e:	d011      	beq.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8003880:	e01a      	b.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003882:	4bbe      	ldr	r3, [pc, #760]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003886:	4abd      	ldr	r2, [pc, #756]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003888:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800388c:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 800388e:	e01a      	b.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003890:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003894:	3308      	adds	r3, #8
 8003896:	4618      	mov	r0, r3
 8003898:	f002 fc5c 	bl	8006154 <RCCEx_PLL2_Config>
 800389c:	4603      	mov	r3, r0
 800389e:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        /* SAI1 clock source config set later after clock selection check */
        break;
 80038a2:	e010      	b.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80038a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80038a8:	332c      	adds	r3, #44	; 0x2c
 80038aa:	4618      	mov	r0, r3
 80038ac:	f002 fcea 	bl	8006284 <RCCEx_PLL3_Config>
 80038b0:	4603      	mov	r3, r0
 80038b2:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        /* SAI1 clock source config set later after clock selection check */
        break;
 80038b6:	e006      	b.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x416>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 80038be:	e002      	b.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 80038c0:	bf00      	nop
 80038c2:	e000      	b.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 80038c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038c6:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d10d      	bne.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 80038ce:	4bab      	ldr	r3, [pc, #684]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80038d0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80038d4:	f023 01e0 	bic.w	r1, r3, #224	; 0xe0
 80038d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80038dc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80038e0:	4aa6      	ldr	r2, [pc, #664]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80038e2:	430b      	orrs	r3, r1
 80038e4:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80038e8:	e003      	b.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038ea:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 80038ee:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80038f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80038f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038fa:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80038fe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003902:	2300      	movs	r3, #0
 8003904:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003908:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800390c:	460b      	mov	r3, r1
 800390e:	4313      	orrs	r3, r2
 8003910:	d053      	beq.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8003912:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003916:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800391a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800391e:	d033      	beq.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
 8003920:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003924:	d82c      	bhi.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8003926:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800392a:	d02f      	beq.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
 800392c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003930:	d826      	bhi.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8003932:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003936:	d008      	beq.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x49a>
 8003938:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800393c:	d820      	bhi.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800393e:	2b00      	cmp	r3, #0
 8003940:	d00a      	beq.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003942:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003946:	d011      	beq.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003948:	e01a      	b.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800394a:	4b8c      	ldr	r3, [pc, #560]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800394c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800394e:	4a8b      	ldr	r2, [pc, #556]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003950:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003954:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003956:	e01a      	b.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003958:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800395c:	3308      	adds	r3, #8
 800395e:	4618      	mov	r0, r3
 8003960:	f002 fbf8 	bl	8006154 <RCCEx_PLL2_Config>
 8003964:	4603      	mov	r3, r0
 8003966:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800396a:	e010      	b.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800396c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003970:	332c      	adds	r3, #44	; 0x2c
 8003972:	4618      	mov	r0, r3
 8003974:	f002 fc86 	bl	8006284 <RCCEx_PLL3_Config>
 8003978:	4603      	mov	r3, r0
 800397a:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800397e:	e006      	b.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x4de>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 8003986:	e002      	b.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 8003988:	bf00      	nop
 800398a:	e000      	b.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 800398c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800398e:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8003992:	2b00      	cmp	r3, #0
 8003994:	d10d      	bne.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8003996:	4b79      	ldr	r3, [pc, #484]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003998:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800399c:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 80039a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80039a4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80039a8:	4a74      	ldr	r2, [pc, #464]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039aa:	430b      	orrs	r3, r1
 80039ac:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80039b0:	e003      	b.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x50a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039b2:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 80039b6:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 80039ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80039be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039c2:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80039c6:	67bb      	str	r3, [r7, #120]	; 0x78
 80039c8:	2300      	movs	r3, #0
 80039ca:	67fb      	str	r3, [r7, #124]	; 0x7c
 80039cc:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80039d0:	460b      	mov	r3, r1
 80039d2:	4313      	orrs	r3, r2
 80039d4:	d046      	beq.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 80039d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80039da:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80039de:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80039e2:	d028      	beq.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x586>
 80039e4:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80039e8:	d821      	bhi.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x57e>
 80039ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80039ee:	d022      	beq.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x586>
 80039f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80039f4:	d81b      	bhi.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x57e>
 80039f6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80039fa:	d01c      	beq.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x586>
 80039fc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003a00:	d815      	bhi.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x57e>
 8003a02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a06:	d008      	beq.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x56a>
 8003a08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a0c:	d80f      	bhi.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x57e>
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d011      	beq.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x586>
 8003a12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a16:	d00e      	beq.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x586>
 8003a18:	e009      	b.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x57e>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003a1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a1e:	3308      	adds	r3, #8
 8003a20:	4618      	mov	r0, r3
 8003a22:	f002 fb97 	bl	8006154 <RCCEx_PLL2_Config>
 8003a26:	4603      	mov	r3, r0
 8003a28:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 8003a2c:	e004      	b.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x588>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 8003a34:	e000      	b.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x588>
        break;
 8003a36:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a38:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d10d      	bne.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8003a40:	4b4e      	ldr	r3, [pc, #312]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a42:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003a46:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8003a4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a4e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003a52:	4a4a      	ldr	r2, [pc, #296]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a54:	430b      	orrs	r3, r1
 8003a56:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003a5a:	e003      	b.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a5c:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8003a60:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8003a64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a6c:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8003a70:	673b      	str	r3, [r7, #112]	; 0x70
 8003a72:	2300      	movs	r3, #0
 8003a74:	677b      	str	r3, [r7, #116]	; 0x74
 8003a76:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8003a7a:	460b      	mov	r3, r1
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	d03f      	beq.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8003a80:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a88:	2b04      	cmp	r3, #4
 8003a8a:	d81e      	bhi.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x61a>
 8003a8c:	a201      	add	r2, pc, #4	; (adr r2, 8003a94 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003a8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a92:	bf00      	nop
 8003a94:	08003ad3 	.word	0x08003ad3
 8003a98:	08003aa9 	.word	0x08003aa9
 8003a9c:	08003ab7 	.word	0x08003ab7
 8003aa0:	08003ad3 	.word	0x08003ad3
 8003aa4:	08003ad3 	.word	0x08003ad3
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003aa8:	4b34      	ldr	r3, [pc, #208]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aac:	4a33      	ldr	r2, [pc, #204]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003aae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ab2:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8003ab4:	e00e      	b.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x624>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003ab6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003aba:	332c      	adds	r3, #44	; 0x2c
 8003abc:	4618      	mov	r0, r3
 8003abe:	f002 fbe1 	bl	8006284 <RCCEx_PLL3_Config>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 8003ac8:	e004      	b.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x624>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 8003ad0:	e000      	b.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x624>
        break;
 8003ad2:	bf00      	nop
    }
    if (ret == HAL_OK)
 8003ad4:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d10d      	bne.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8003adc:	4b27      	ldr	r3, [pc, #156]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ade:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003ae2:	f023 0107 	bic.w	r1, r3, #7
 8003ae6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003aea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003aee:	4a23      	ldr	r2, [pc, #140]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003af0:	430b      	orrs	r3, r1
 8003af2:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8003af6:	e003      	b.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x650>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003af8:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8003afc:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8003b00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b08:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8003b0c:	66bb      	str	r3, [r7, #104]	; 0x68
 8003b0e:	2300      	movs	r3, #0
 8003b10:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003b12:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8003b16:	460b      	mov	r3, r1
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	d04c      	beq.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x706>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8003b1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b20:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b24:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003b28:	d02a      	beq.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
 8003b2a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003b2e:	d821      	bhi.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
 8003b30:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003b34:	d026      	beq.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
 8003b36:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003b3a:	d81b      	bhi.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
 8003b3c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003b40:	d00e      	beq.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 8003b42:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003b46:	d815      	bhi.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d01d      	beq.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
 8003b4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b50:	d110      	bne.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003b52:	4b0a      	ldr	r3, [pc, #40]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b56:	4a09      	ldr	r2, [pc, #36]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b5c:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8003b5e:	e014      	b.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x6da>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003b60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b64:	332c      	adds	r3, #44	; 0x2c
 8003b66:	4618      	mov	r0, r3
 8003b68:	f002 fb8c 	bl	8006284 <RCCEx_PLL3_Config>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 8003b72:	e00a      	b.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x6da>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 8003b7a:	e006      	b.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x6da>
 8003b7c:	46020c00 	.word	0x46020c00
        break;
 8003b80:	bf00      	nop
 8003b82:	e002      	b.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x6da>
        break;
 8003b84:	bf00      	nop
 8003b86:	e000      	b.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x6da>
        break;
 8003b88:	bf00      	nop
    }
    if (ret == HAL_OK)
 8003b8a:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d10d      	bne.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8003b92:	4baf      	ldr	r3, [pc, #700]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8003b94:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003b98:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8003b9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ba0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ba4:	4aaa      	ldr	r2, [pc, #680]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8003ba6:	430b      	orrs	r3, r1
 8003ba8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003bac:	e003      	b.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x706>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bae:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8003bb2:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003bb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bbe:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8003bc2:	663b      	str	r3, [r7, #96]	; 0x60
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	667b      	str	r3, [r7, #100]	; 0x64
 8003bc8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8003bcc:	460b      	mov	r3, r1
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	f000 80b5 	beq.w	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x88e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	f887 3109 	strb.w	r3, [r7, #265]	; 0x109
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bda:	4b9d      	ldr	r3, [pc, #628]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8003bdc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003be0:	f003 0304 	and.w	r3, r3, #4
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d113      	bne.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x760>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003be8:	4b99      	ldr	r3, [pc, #612]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8003bea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bee:	4a98      	ldr	r2, [pc, #608]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8003bf0:	f043 0304 	orr.w	r3, r3, #4
 8003bf4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8003bf8:	4b95      	ldr	r3, [pc, #596]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8003bfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bfe:	f003 0304 	and.w	r3, r3, #4
 8003c02:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003c06:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
      pwrclkchanged = SET;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	f887 3109 	strb.w	r3, [r7, #265]	; 0x109
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8003c10:	4b90      	ldr	r3, [pc, #576]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x9a4>)
 8003c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c14:	4a8f      	ldr	r2, [pc, #572]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x9a4>)
 8003c16:	f043 0301 	orr.w	r3, r3, #1
 8003c1a:	6293      	str	r3, [r2, #40]	; 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003c1c:	f7fc fd40 	bl	80006a0 <HAL_GetTick>
 8003c20:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003c24:	e00b      	b.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x78e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c26:	f7fc fd3b 	bl	80006a0 <HAL_GetTick>
 8003c2a:	4602      	mov	r2, r0
 8003c2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003c30:	1ad3      	subs	r3, r2, r3
 8003c32:	2b02      	cmp	r3, #2
 8003c34:	d903      	bls.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x78e>
      {
        ret = HAL_TIMEOUT;
 8003c36:	2303      	movs	r3, #3
 8003c38:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 8003c3c:	e005      	b.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x79a>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003c3e:	4b85      	ldr	r3, [pc, #532]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x9a4>)
 8003c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c42:	f003 0301 	and.w	r3, r3, #1
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d0ed      	beq.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x776>
      }
    }

    if (ret == HAL_OK)
 8003c4a:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d165      	bne.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x86e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003c52:	4b7f      	ldr	r3, [pc, #508]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8003c54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003c58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c5c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8003c60:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d023      	beq.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x800>
 8003c68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c6c:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 8003c70:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d01b      	beq.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x800>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003c78:	4b75      	ldr	r3, [pc, #468]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8003c7a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003c7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c82:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003c86:	4b72      	ldr	r3, [pc, #456]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8003c88:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003c8c:	4a70      	ldr	r2, [pc, #448]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8003c8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c92:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003c96:	4b6e      	ldr	r3, [pc, #440]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8003c98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003c9c:	4a6c      	ldr	r2, [pc, #432]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8003c9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ca2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003ca6:	4a6a      	ldr	r2, [pc, #424]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8003ca8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003cac:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003cb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003cb4:	f003 0301 	and.w	r3, r3, #1
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d019      	beq.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x840>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cbc:	f7fc fcf0 	bl	80006a0 <HAL_GetTick>
 8003cc0:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003cc4:	e00d      	b.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x832>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cc6:	f7fc fceb 	bl	80006a0 <HAL_GetTick>
 8003cca:	4602      	mov	r2, r0
 8003ccc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003cd0:	1ad2      	subs	r2, r2, r3
 8003cd2:	f241 3388 	movw	r3, #5000	; 0x1388
 8003cd6:	429a      	cmp	r2, r3
 8003cd8:	d903      	bls.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x832>
          {
            ret = HAL_TIMEOUT;
 8003cda:	2303      	movs	r3, #3
 8003cdc:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
            break;
 8003ce0:	e006      	b.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x840>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ce2:	4b5b      	ldr	r3, [pc, #364]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8003ce4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003ce8:	f003 0302 	and.w	r3, r3, #2
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d0ea      	beq.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x816>
          }
        }
      }

      if (ret == HAL_OK)
 8003cf0:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d10d      	bne.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x864>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8003cf8:	4b55      	ldr	r3, [pc, #340]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8003cfa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003cfe:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003d02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d06:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8003d0a:	4a51      	ldr	r2, [pc, #324]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8003d0c:	430b      	orrs	r3, r1
 8003d0e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003d12:	e008      	b.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x876>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003d14:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8003d18:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
 8003d1c:	e003      	b.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x876>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d1e:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8003d22:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003d26:	f897 3109 	ldrb.w	r3, [r7, #265]	; 0x109
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	d107      	bne.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x88e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d2e:	4b48      	ldr	r3, [pc, #288]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8003d30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d34:	4a46      	ldr	r2, [pc, #280]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8003d36:	f023 0304 	bic.w	r3, r3, #4
 8003d3a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8003d3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d46:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8003d4a:	65bb      	str	r3, [r7, #88]	; 0x58
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d50:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8003d54:	460b      	mov	r3, r1
 8003d56:	4313      	orrs	r3, r2
 8003d58:	d042      	beq.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x930>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8003d5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d5e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003d62:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003d66:	d022      	beq.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 8003d68:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003d6c:	d81b      	bhi.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
 8003d6e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d72:	d011      	beq.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
 8003d74:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d78:	d815      	bhi.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d019      	beq.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x902>
 8003d7e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003d82:	d110      	bne.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003d84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d88:	3308      	adds	r3, #8
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f002 f9e2 	bl	8006154 <RCCEx_PLL2_Config>
 8003d90:	4603      	mov	r3, r0
 8003d92:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 8003d96:	e00d      	b.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x904>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d98:	4b2d      	ldr	r3, [pc, #180]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8003d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d9c:	4a2c      	ldr	r2, [pc, #176]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8003d9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003da2:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8003da4:	e006      	b.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x904>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 8003dac:	e002      	b.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x904>
        break;
 8003dae:	bf00      	nop
 8003db0:	e000      	b.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x904>
        break;
 8003db2:	bf00      	nop
    }
    if (ret == HAL_OK)
 8003db4:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d10d      	bne.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x928>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8003dbc:	4b24      	ldr	r3, [pc, #144]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8003dbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003dc2:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8003dc6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003dca:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003dce:	4a20      	ldr	r2, [pc, #128]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8003dd0:	430b      	orrs	r3, r1
 8003dd2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003dd6:	e003      	b.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x930>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dd8:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8003ddc:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003de0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003de8:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8003dec:	653b      	str	r3, [r7, #80]	; 0x50
 8003dee:	2300      	movs	r3, #0
 8003df0:	657b      	str	r3, [r7, #84]	; 0x54
 8003df2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8003df6:	460b      	mov	r3, r1
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	d031      	beq.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8003dfc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e00:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003e04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e08:	d00b      	beq.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x972>
 8003e0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e0e:	d804      	bhi.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d008      	beq.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x976>
 8003e14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e18:	d007      	beq.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x97a>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 8003e20:	e004      	b.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x97c>
        break;
 8003e22:	bf00      	nop
 8003e24:	e002      	b.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x97c>
        break;
 8003e26:	bf00      	nop
 8003e28:	e000      	b.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x97c>
        break;
 8003e2a:	bf00      	nop
    }
    if (ret == HAL_OK)
 8003e2c:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d111      	bne.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8003e34:	4b06      	ldr	r3, [pc, #24]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8003e36:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003e3a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003e3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e42:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003e46:	4a02      	ldr	r2, [pc, #8]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8003e48:	430b      	orrs	r3, r1
 8003e4a:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8003e4e:	e007      	b.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
 8003e50:	46020c00 	.word	0x46020c00
 8003e54:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e58:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8003e5c:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }
  }
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 8003e60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e68:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8003e6c:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e6e:	2300      	movs	r3, #0
 8003e70:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e72:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8003e76:	460b      	mov	r3, r1
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	d00c      	beq.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x9e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 8003e7c:	4bb2      	ldr	r3, [pc, #712]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8003e7e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003e82:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 8003e86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e8a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003e8e:	4aae      	ldr	r2, [pc, #696]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8003e90:	430b      	orrs	r3, r1
 8003e92:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8003e96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e9e:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8003ea2:	643b      	str	r3, [r7, #64]	; 0x40
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	647b      	str	r3, [r7, #68]	; 0x44
 8003ea8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8003eac:	460b      	mov	r3, r1
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	d019      	beq.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0xa36>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8003eb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003eb6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003eba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ebe:	d105      	bne.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0xa1c>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003ec0:	4ba1      	ldr	r3, [pc, #644]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8003ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ec4:	4aa0      	ldr	r2, [pc, #640]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8003ec6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003eca:	6293      	str	r3, [r2, #40]	; 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8003ecc:	4b9e      	ldr	r3, [pc, #632]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8003ece:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003ed2:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8003ed6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003eda:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003ede:	4a9a      	ldr	r2, [pc, #616]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8003ee0:	430b      	orrs	r3, r1
 8003ee2:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8003ee6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eee:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8003ef2:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ef8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8003efc:	460b      	mov	r3, r1
 8003efe:	4313      	orrs	r3, r2
 8003f00:	d00c      	beq.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0xa6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8003f02:	4b91      	ldr	r3, [pc, #580]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8003f04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003f08:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003f0c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f10:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8003f14:	4a8c      	ldr	r2, [pc, #560]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8003f16:	430b      	orrs	r3, r1
 8003f18:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8003f1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f24:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8003f28:	633b      	str	r3, [r7, #48]	; 0x30
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	637b      	str	r3, [r7, #52]	; 0x34
 8003f2e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8003f32:	460b      	mov	r3, r1
 8003f34:	4313      	orrs	r3, r2
 8003f36:	d00c      	beq.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8003f38:	4b83      	ldr	r3, [pc, #524]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8003f3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003f3e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003f42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f46:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8003f4a:	4a7f      	ldr	r2, [pc, #508]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8003f4c:	430b      	orrs	r3, r1
 8003f4e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8003f52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f5a:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8003f5e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f60:	2300      	movs	r3, #0
 8003f62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f64:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8003f68:	460b      	mov	r3, r1
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	d00c      	beq.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0xad8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8003f6e:	4b76      	ldr	r3, [pc, #472]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8003f70:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003f74:	f023 0218 	bic.w	r2, r3, #24
 8003f78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f7c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8003f80:	4971      	ldr	r1, [pc, #452]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8003f82:	4313      	orrs	r3, r2
 8003f84:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003f88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f90:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 8003f94:	623b      	str	r3, [r7, #32]
 8003f96:	2300      	movs	r3, #0
 8003f98:	627b      	str	r3, [r7, #36]	; 0x24
 8003f9a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003f9e:	460b      	mov	r3, r1
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	d032      	beq.n	800400a <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8003fa4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003fa8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003fac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003fb0:	d105      	bne.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fb2:	4b65      	ldr	r3, [pc, #404]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8003fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fb6:	4a64      	ldr	r2, [pc, #400]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8003fb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fbc:	6293      	str	r3, [r2, #40]	; 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8003fbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003fc2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003fc6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003fca:	d108      	bne.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0xb2e>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003fcc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003fd0:	3308      	adds	r3, #8
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f002 f8be 	bl	8006154 <RCCEx_PLL2_Config>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
    }
    if (ret == HAL_OK)
 8003fde:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d10d      	bne.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0xb52>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8003fe6:	4b58      	ldr	r3, [pc, #352]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8003fe8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003fec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ff0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ff4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003ff8:	4953      	ldr	r1, [pc, #332]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8004000:	e003      	b.n	800400a <HAL_RCCEx_PeriphCLKConfig+0xb5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004002:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8004006:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }
  }

#if defined(HSPI1)
  /*-------------------------- HSPIx kernel clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSPI) == RCC_PERIPHCLK_HSPI)
 800400a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800400e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004012:	2100      	movs	r1, #0
 8004014:	61b9      	str	r1, [r7, #24]
 8004016:	f003 0301 	and.w	r3, r3, #1
 800401a:	61fb      	str	r3, [r7, #28]
 800401c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004020:	460b      	mov	r3, r1
 8004022:	4313      	orrs	r3, r2
 8004024:	d04a      	beq.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0xc0c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_HSPICLKSOURCE(pPeriphClkInit->HspiClockSelection));

    switch (pPeriphClkInit->HspiClockSelection)
 8004026:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800402a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800402e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004032:	d01e      	beq.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0xbc2>
 8004034:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004038:	d825      	bhi.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
 800403a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800403e:	d00e      	beq.n	800405e <HAL_RCCEx_PeriphCLKConfig+0xbae>
 8004040:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004044:	d81f      	bhi.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
 8004046:	2b00      	cmp	r3, #0
 8004048:	d021      	beq.n	800408e <HAL_RCCEx_PeriphCLKConfig+0xbde>
 800404a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800404e:	d11a      	bne.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
        /* HSPI kernel clock source config set later after clock selection check */
        break;

      case RCC_HSPICLKSOURCE_PLL1:  /* PLL1 is used as clock source for HSPI kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004050:	4b3d      	ldr	r3, [pc, #244]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8004052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004054:	4a3c      	ldr	r2, [pc, #240]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8004056:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800405a:	6293      	str	r3, [r2, #40]	; 0x28
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800405c:	e018      	b.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0xbe0>

      case RCC_HSPICLKSOURCE_PLL2:  /* PLL2 is used as clock source for HSPI kernel clock*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800405e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004062:	3308      	adds	r3, #8
 8004064:	4618      	mov	r0, r3
 8004066:	f002 f875 	bl	8006154 <RCCEx_PLL2_Config>
 800406a:	4603      	mov	r3, r0
 800406c:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 8004070:	e00e      	b.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0xbe0>

      case RCC_HSPICLKSOURCE_PLL3:  /* PLL3 is used as clock source for HSPI kernel clock*/
        /* PLL3 input clock, parameters M, N & R configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004072:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004076:	332c      	adds	r3, #44	; 0x2c
 8004078:	4618      	mov	r0, r3
 800407a:	f002 f903 	bl	8006284 <RCCEx_PLL3_Config>
 800407e:	4603      	mov	r3, r0
 8004080:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 8004084:	e004      	b.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0xbe0>

      default:
        ret = HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 800408c:	e000      	b.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0xbe0>
        break;
 800408e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004090:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8004094:	2b00      	cmp	r3, #0
 8004096:	d10d      	bne.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0xc04>
    {
      /* Set the source of HSPI kernel clock*/
      __HAL_RCC_HSPI_CONFIG(pPeriphClkInit->HspiClockSelection);
 8004098:	4b2b      	ldr	r3, [pc, #172]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800409a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800409e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80040a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80040a6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80040aa:	4927      	ldr	r1, [pc, #156]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80040ac:	4313      	orrs	r3, r2
 80040ae:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 80040b2:	e003      	b.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0xc0c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040b4:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 80040b8:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 80040bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80040c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040c4:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 80040c8:	613b      	str	r3, [r7, #16]
 80040ca:	2300      	movs	r3, #0
 80040cc:	617b      	str	r3, [r7, #20]
 80040ce:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80040d2:	460b      	mov	r3, r1
 80040d4:	4313      	orrs	r3, r2
 80040d6:	d03d      	beq.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0xca4>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 80040d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80040dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040e0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80040e4:	d00e      	beq.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 80040e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80040ea:	d815      	bhi.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d017      	beq.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80040f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80040f4:	d110      	bne.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0xc68>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040f6:	4b14      	ldr	r3, [pc, #80]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80040f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040fa:	4a13      	ldr	r2, [pc, #76]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80040fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004100:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8004102:	e00e      	b.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0xc72>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004104:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004108:	3308      	adds	r3, #8
 800410a:	4618      	mov	r0, r3
 800410c:	f002 f822 	bl	8006154 <RCCEx_PLL2_Config>
 8004110:	4603      	mov	r3, r0
 8004112:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8004116:	e004      	b.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0xc72>
      default:
        ret = HAL_ERROR;
 8004118:	2301      	movs	r3, #1
 800411a:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 800411e:	e000      	b.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0xc72>
        break;
 8004120:	bf00      	nop
    }
    if (ret == HAL_OK)
 8004122:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8004126:	2b00      	cmp	r3, #0
 8004128:	d110      	bne.n	800414c <HAL_RCCEx_PeriphCLKConfig+0xc9c>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 800412a:	4b07      	ldr	r3, [pc, #28]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800412c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004130:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004134:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004138:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800413c:	4902      	ldr	r1, [pc, #8]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800413e:	4313      	orrs	r3, r2
 8004140:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8004144:	e006      	b.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0xca4>
 8004146:	bf00      	nop
 8004148:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800414c:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8004150:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8004154:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800415c:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8004160:	60bb      	str	r3, [r7, #8]
 8004162:	2300      	movs	r3, #0
 8004164:	60fb      	str	r3, [r7, #12]
 8004166:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800416a:	460b      	mov	r3, r1
 800416c:	4313      	orrs	r3, r2
 800416e:	d00c      	beq.n	800418a <HAL_RCCEx_PeriphCLKConfig+0xcda>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8004170:	4b2c      	ldr	r3, [pc, #176]	; (8004224 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8004172:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004176:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800417a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800417e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004182:	4928      	ldr	r1, [pc, #160]	; (8004224 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8004184:	4313      	orrs	r3, r2
 8004186:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
#endif /* defined(DSI) */

#if defined(USB_OTG_HS)

  /*-------------------------- USB PHY clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBPHY) == RCC_PERIPHCLK_USBPHY)
 800418a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800418e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004192:	2100      	movs	r1, #0
 8004194:	6039      	str	r1, [r7, #0]
 8004196:	f003 0308 	and.w	r3, r3, #8
 800419a:	607b      	str	r3, [r7, #4]
 800419c:	e9d7 1200 	ldrd	r1, r2, [r7]
 80041a0:	460b      	mov	r3, r1
 80041a2:	4313      	orrs	r3, r2
 80041a4:	d036      	beq.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBPHYCLKSOURCE(pPeriphClkInit->UsbPhyClockSelection));

    switch (pPeriphClkInit->UsbPhyClockSelection)
 80041a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041aa:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80041ae:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80041b2:	d00d      	beq.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 80041b4:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80041b8:	d811      	bhi.n	80041de <HAL_RCCEx_PeriphCLKConfig+0xd2e>
 80041ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80041be:	d012      	beq.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80041c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80041c4:	d80b      	bhi.n	80041de <HAL_RCCEx_PeriphCLKConfig+0xd2e>
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d00d      	beq.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80041ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041ce:	d106      	bne.n	80041de <HAL_RCCEx_PeriphCLKConfig+0xd2e>
        break;

      case RCC_USBPHYCLKSOURCE_PLL1:      /* PLL1 P divider clock selected as USB PHY clock */
      case RCC_USBPHYCLKSOURCE_PLL1_DIV2: /* PLL1 P divider clock div 2 selected as USB PHY clock */
        /* Enable P Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80041d0:	4b14      	ldr	r3, [pc, #80]	; (8004224 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 80041d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041d4:	4a13      	ldr	r2, [pc, #76]	; (8004224 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 80041d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041da:	6293      	str	r3, [r2, #40]	; 0x28
        /* USB-PHY clock source config set later after clock selection check */
        break;
 80041dc:	e004      	b.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0xd38>

      default:
        ret = HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 80041e4:	e000      	b.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0xd38>
        break;
 80041e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041e8:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d10d      	bne.n	800420c <HAL_RCCEx_PeriphCLKConfig+0xd5c>
    {
      /* Set the source of USBPHY clock*/
      __HAL_RCC_USBPHY_CONFIG(pPeriphClkInit->UsbPhyClockSelection);
 80041f0:	4b0c      	ldr	r3, [pc, #48]	; (8004224 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 80041f2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80041f6:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80041fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041fe:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8004202:	4908      	ldr	r1, [pc, #32]	; (8004224 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8004204:	4313      	orrs	r3, r2
 8004206:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 800420a:	e003      	b.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0xd64>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800420c:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8004210:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8004214:	f897 310a 	ldrb.w	r3, [r7, #266]	; 0x10a
}
 8004218:	4618      	mov	r0, r3
 800421a:	f507 7788 	add.w	r7, r7, #272	; 0x110
 800421e:	46bd      	mov	sp, r7
 8004220:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004224:	46020c00 	.word	0x46020c00

08004228 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8004228:	b480      	push	{r7}
 800422a:	b089      	sub	sp, #36	; 0x24
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8004230:	4bad      	ldr	r3, [pc, #692]	; (80044e8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004232:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004234:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004238:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800423a:	4bab      	ldr	r3, [pc, #684]	; (80044e8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800423c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800423e:	f003 0303 	and.w	r3, r3, #3
 8004242:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8004244:	4ba8      	ldr	r3, [pc, #672]	; (80044e8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004248:	0a1b      	lsrs	r3, r3, #8
 800424a:	f003 030f 	and.w	r3, r3, #15
 800424e:	3301      	adds	r3, #1
 8004250:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8004252:	4ba5      	ldr	r3, [pc, #660]	; (80044e8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004256:	091b      	lsrs	r3, r3, #4
 8004258:	f003 0301 	and.w	r3, r3, #1
 800425c:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800425e:	4ba2      	ldr	r3, [pc, #648]	; (80044e8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004262:	08db      	lsrs	r3, r3, #3
 8004264:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004268:	68fa      	ldr	r2, [r7, #12]
 800426a:	fb02 f303 	mul.w	r3, r2, r3
 800426e:	ee07 3a90 	vmov	s15, r3
 8004272:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004276:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	2b00      	cmp	r3, #0
 800427e:	f000 8123 	beq.w	80044c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
  {
    switch (pll1source)
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	2b03      	cmp	r3, #3
 8004286:	d062      	beq.n	800434e <HAL_RCCEx_GetPLL1ClockFreq+0x126>
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	2b03      	cmp	r3, #3
 800428c:	f200 8081 	bhi.w	8004392 <HAL_RCCEx_GetPLL1ClockFreq+0x16a>
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	2b01      	cmp	r3, #1
 8004294:	d024      	beq.n	80042e0 <HAL_RCCEx_GetPLL1ClockFreq+0xb8>
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	2b02      	cmp	r3, #2
 800429a:	d17a      	bne.n	8004392 <HAL_RCCEx_GetPLL1ClockFreq+0x16a>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	ee07 3a90 	vmov	s15, r3
 80042a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042a6:	eddf 6a91 	vldr	s13, [pc, #580]	; 80044ec <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 80042aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042ae:	4b8e      	ldr	r3, [pc, #568]	; (80044e8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80042b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042b6:	ee07 3a90 	vmov	s15, r3
 80042ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80042be:	ed97 6a02 	vldr	s12, [r7, #8]
 80042c2:	eddf 5a8b 	vldr	s11, [pc, #556]	; 80044f0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 80042c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80042ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80042ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80042d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80042d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80042de:	e08f      	b.n	8004400 <HAL_RCCEx_GetPLL1ClockFreq+0x1d8>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80042e0:	4b81      	ldr	r3, [pc, #516]	; (80044e8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d005      	beq.n	80042f8 <HAL_RCCEx_GetPLL1ClockFreq+0xd0>
 80042ec:	4b7e      	ldr	r3, [pc, #504]	; (80044e8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	0f1b      	lsrs	r3, r3, #28
 80042f2:	f003 030f 	and.w	r3, r3, #15
 80042f6:	e006      	b.n	8004306 <HAL_RCCEx_GetPLL1ClockFreq+0xde>
 80042f8:	4b7b      	ldr	r3, [pc, #492]	; (80044e8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80042fa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80042fe:	041b      	lsls	r3, r3, #16
 8004300:	0f1b      	lsrs	r3, r3, #28
 8004302:	f003 030f 	and.w	r3, r3, #15
 8004306:	4a7b      	ldr	r2, [pc, #492]	; (80044f4 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>)
 8004308:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800430c:	ee07 3a90 	vmov	s15, r3
 8004310:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	ee07 3a90 	vmov	s15, r3
 800431a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800431e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004322:	69bb      	ldr	r3, [r7, #24]
 8004324:	ee07 3a90 	vmov	s15, r3
 8004328:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800432c:	ed97 6a02 	vldr	s12, [r7, #8]
 8004330:	eddf 5a6f 	vldr	s11, [pc, #444]	; 80044f0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8004334:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004338:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800433c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004340:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8004344:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004348:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800434c:	e058      	b.n	8004400 <HAL_RCCEx_GetPLL1ClockFreq+0x1d8>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	ee07 3a90 	vmov	s15, r3
 8004354:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004358:	eddf 6a64 	vldr	s13, [pc, #400]	; 80044ec <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 800435c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004360:	4b61      	ldr	r3, [pc, #388]	; (80044e8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004362:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004364:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004368:	ee07 3a90 	vmov	s15, r3
 800436c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004370:	ed97 6a02 	vldr	s12, [r7, #8]
 8004374:	eddf 5a5e 	vldr	s11, [pc, #376]	; 80044f0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8004378:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800437c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004380:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004384:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004388:	ee67 7a27 	vmul.f32	s15, s14, s15
 800438c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004390:	e036      	b.n	8004400 <HAL_RCCEx_GetPLL1ClockFreq+0x1d8>
      default:
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8004392:	4b55      	ldr	r3, [pc, #340]	; (80044e8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800439a:	2b00      	cmp	r3, #0
 800439c:	d005      	beq.n	80043aa <HAL_RCCEx_GetPLL1ClockFreq+0x182>
 800439e:	4b52      	ldr	r3, [pc, #328]	; (80044e8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	0f1b      	lsrs	r3, r3, #28
 80043a4:	f003 030f 	and.w	r3, r3, #15
 80043a8:	e006      	b.n	80043b8 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
 80043aa:	4b4f      	ldr	r3, [pc, #316]	; (80044e8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80043ac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80043b0:	041b      	lsls	r3, r3, #16
 80043b2:	0f1b      	lsrs	r3, r3, #28
 80043b4:	f003 030f 	and.w	r3, r3, #15
 80043b8:	4a4e      	ldr	r2, [pc, #312]	; (80044f4 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>)
 80043ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043be:	ee07 3a90 	vmov	s15, r3
 80043c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	ee07 3a90 	vmov	s15, r3
 80043cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 80043d4:	69bb      	ldr	r3, [r7, #24]
 80043d6:	ee07 3a90 	vmov	s15, r3
 80043da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043de:	ed97 6a02 	vldr	s12, [r7, #8]
 80043e2:	eddf 5a43 	vldr	s11, [pc, #268]	; 80044f0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 80043e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80043f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80043f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80043fe:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8004400:	4b39      	ldr	r3, [pc, #228]	; (80044e8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004404:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004408:	2b00      	cmp	r3, #0
 800440a:	d017      	beq.n	800443c <HAL_RCCEx_GetPLL1ClockFreq+0x214>
    {
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800440c:	4b36      	ldr	r3, [pc, #216]	; (80044e8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800440e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004410:	0a5b      	lsrs	r3, r3, #9
 8004412:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004416:	ee07 3a90 	vmov	s15, r3
 800441a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 800441e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004422:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004426:	edd7 6a07 	vldr	s13, [r7, #28]
 800442a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800442e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004432:	ee17 2a90 	vmov	r2, s15
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	601a      	str	r2, [r3, #0]
 800443a:	e002      	b.n	8004442 <HAL_RCCEx_GetPLL1ClockFreq+0x21a>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_P_Frequency = 0U;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2200      	movs	r2, #0
 8004440:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8004442:	4b29      	ldr	r3, [pc, #164]	; (80044e8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800444a:	2b00      	cmp	r3, #0
 800444c:	d017      	beq.n	800447e <HAL_RCCEx_GetPLL1ClockFreq+0x256>
    {
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800444e:	4b26      	ldr	r3, [pc, #152]	; (80044e8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004450:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004452:	0c1b      	lsrs	r3, r3, #16
 8004454:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004458:	ee07 3a90 	vmov	s15, r3
 800445c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8004460:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004464:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004468:	edd7 6a07 	vldr	s13, [r7, #28]
 800446c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004470:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004474:	ee17 2a90 	vmov	r2, s15
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	605a      	str	r2, [r3, #4]
 800447c:	e002      	b.n	8004484 <HAL_RCCEx_GetPLL1ClockFreq+0x25c>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2200      	movs	r2, #0
 8004482:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8004484:	4b18      	ldr	r3, [pc, #96]	; (80044e8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004488:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800448c:	2b00      	cmp	r3, #0
 800448e:	d017      	beq.n	80044c0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
    {
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004490:	4b15      	ldr	r3, [pc, #84]	; (80044e8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004492:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004494:	0e1b      	lsrs	r3, r3, #24
 8004496:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800449a:	ee07 3a90 	vmov	s15, r3
 800449e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 80044a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80044a6:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80044aa:	edd7 6a07 	vldr	s13, [r7, #28]
 80044ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80044b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80044b6:	ee17 2a90 	vmov	r2, s15
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80044be:	e00c      	b.n	80044da <HAL_RCCEx_GetPLL1ClockFreq+0x2b2>
      PLL1_Clocks->PLL1_R_Frequency = 0U;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2200      	movs	r2, #0
 80044c4:	609a      	str	r2, [r3, #8]
}
 80044c6:	e008      	b.n	80044da <HAL_RCCEx_GetPLL1ClockFreq+0x2b2>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2200      	movs	r2, #0
 80044cc:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2200      	movs	r2, #0
 80044d2:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2200      	movs	r2, #0
 80044d8:	609a      	str	r2, [r3, #8]
}
 80044da:	bf00      	nop
 80044dc:	3724      	adds	r7, #36	; 0x24
 80044de:	46bd      	mov	sp, r7
 80044e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e4:	4770      	bx	lr
 80044e6:	bf00      	nop
 80044e8:	46020c00 	.word	0x46020c00
 80044ec:	4b742400 	.word	0x4b742400
 80044f0:	46000000 	.word	0x46000000
 80044f4:	0800c3e0 	.word	0x0800c3e0

080044f8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b089      	sub	sp, #36	; 0x24
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8004500:	4bad      	ldr	r3, [pc, #692]	; (80047b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004502:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004504:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004508:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800450a:	4bab      	ldr	r3, [pc, #684]	; (80047b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800450c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800450e:	f003 0303 	and.w	r3, r3, #3
 8004512:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8004514:	4ba8      	ldr	r3, [pc, #672]	; (80047b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004518:	0a1b      	lsrs	r3, r3, #8
 800451a:	f003 030f 	and.w	r3, r3, #15
 800451e:	3301      	adds	r3, #1
 8004520:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8004522:	4ba5      	ldr	r3, [pc, #660]	; (80047b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004526:	091b      	lsrs	r3, r3, #4
 8004528:	f003 0301 	and.w	r3, r3, #1
 800452c:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800452e:	4ba2      	ldr	r3, [pc, #648]	; (80047b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004532:	08db      	lsrs	r3, r3, #3
 8004534:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004538:	68fa      	ldr	r2, [r7, #12]
 800453a:	fb02 f303 	mul.w	r3, r2, r3
 800453e:	ee07 3a90 	vmov	s15, r3
 8004542:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004546:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	2b00      	cmp	r3, #0
 800454e:	f000 8123 	beq.w	8004798 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
  {
    switch (pll2source)
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	2b03      	cmp	r3, #3
 8004556:	d062      	beq.n	800461e <HAL_RCCEx_GetPLL2ClockFreq+0x126>
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	2b03      	cmp	r3, #3
 800455c:	f200 8081 	bhi.w	8004662 <HAL_RCCEx_GetPLL2ClockFreq+0x16a>
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	2b01      	cmp	r3, #1
 8004564:	d024      	beq.n	80045b0 <HAL_RCCEx_GetPLL2ClockFreq+0xb8>
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	2b02      	cmp	r3, #2
 800456a:	d17a      	bne.n	8004662 <HAL_RCCEx_GetPLL2ClockFreq+0x16a>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	ee07 3a90 	vmov	s15, r3
 8004572:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004576:	eddf 6a91 	vldr	s13, [pc, #580]	; 80047bc <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 800457a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800457e:	4b8e      	ldr	r3, [pc, #568]	; (80047b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004580:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004582:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004586:	ee07 3a90 	vmov	s15, r3
 800458a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 800458e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004592:	eddf 5a8b 	vldr	s11, [pc, #556]	; 80047c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8004596:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800459a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 800459e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80045a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80045a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80045ae:	e08f      	b.n	80046d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 80045b0:	4b81      	ldr	r3, [pc, #516]	; (80047b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d005      	beq.n	80045c8 <HAL_RCCEx_GetPLL2ClockFreq+0xd0>
 80045bc:	4b7e      	ldr	r3, [pc, #504]	; (80047b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	0f1b      	lsrs	r3, r3, #28
 80045c2:	f003 030f 	and.w	r3, r3, #15
 80045c6:	e006      	b.n	80045d6 <HAL_RCCEx_GetPLL2ClockFreq+0xde>
 80045c8:	4b7b      	ldr	r3, [pc, #492]	; (80047b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80045ca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80045ce:	041b      	lsls	r3, r3, #16
 80045d0:	0f1b      	lsrs	r3, r3, #28
 80045d2:	f003 030f 	and.w	r3, r3, #15
 80045d6:	4a7b      	ldr	r2, [pc, #492]	; (80047c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>)
 80045d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045dc:	ee07 3a90 	vmov	s15, r3
 80045e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	ee07 3a90 	vmov	s15, r3
 80045ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 80045f2:	69bb      	ldr	r3, [r7, #24]
 80045f4:	ee07 3a90 	vmov	s15, r3
 80045f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045fc:	ed97 6a02 	vldr	s12, [r7, #8]
 8004600:	eddf 5a6f 	vldr	s11, [pc, #444]	; 80047c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8004604:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004608:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800460c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004610:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8004614:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004618:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800461c:	e058      	b.n	80046d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	ee07 3a90 	vmov	s15, r3
 8004624:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004628:	eddf 6a64 	vldr	s13, [pc, #400]	; 80047bc <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 800462c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004630:	4b61      	ldr	r3, [pc, #388]	; (80047b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004632:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004634:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004638:	ee07 3a90 	vmov	s15, r3
 800463c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8004640:	ed97 6a02 	vldr	s12, [r7, #8]
 8004644:	eddf 5a5e 	vldr	s11, [pc, #376]	; 80047c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8004648:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800464c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8004650:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004654:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8004658:	ee67 7a27 	vmul.f32	s15, s14, s15
 800465c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004660:	e036      	b.n	80046d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>

      default:
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8004662:	4b55      	ldr	r3, [pc, #340]	; (80047b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800466a:	2b00      	cmp	r3, #0
 800466c:	d005      	beq.n	800467a <HAL_RCCEx_GetPLL2ClockFreq+0x182>
 800466e:	4b52      	ldr	r3, [pc, #328]	; (80047b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	0f1b      	lsrs	r3, r3, #28
 8004674:	f003 030f 	and.w	r3, r3, #15
 8004678:	e006      	b.n	8004688 <HAL_RCCEx_GetPLL2ClockFreq+0x190>
 800467a:	4b4f      	ldr	r3, [pc, #316]	; (80047b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800467c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004680:	041b      	lsls	r3, r3, #16
 8004682:	0f1b      	lsrs	r3, r3, #28
 8004684:	f003 030f 	and.w	r3, r3, #15
 8004688:	4a4e      	ldr	r2, [pc, #312]	; (80047c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>)
 800468a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800468e:	ee07 3a90 	vmov	s15, r3
 8004692:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	ee07 3a90 	vmov	s15, r3
 800469c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 80046a4:	69bb      	ldr	r3, [r7, #24]
 80046a6:	ee07 3a90 	vmov	s15, r3
 80046aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80046b2:	eddf 5a43 	vldr	s11, [pc, #268]	; 80047c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 80046b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80046c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 80046c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80046ce:	bf00      	nop
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 80046d0:	4b39      	ldr	r3, [pc, #228]	; (80047b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80046d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d017      	beq.n	800470c <HAL_RCCEx_GetPLL2ClockFreq+0x214>
    {
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80046dc:	4b36      	ldr	r3, [pc, #216]	; (80047b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80046de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046e0:	0a5b      	lsrs	r3, r3, #9
 80046e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046e6:	ee07 3a90 	vmov	s15, r3
 80046ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 80046ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80046f2:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80046f6:	edd7 6a07 	vldr	s13, [r7, #28]
 80046fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004702:	ee17 2a90 	vmov	r2, s15
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	601a      	str	r2, [r3, #0]
 800470a:	e002      	b.n	8004712 <HAL_RCCEx_GetPLL2ClockFreq+0x21a>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_P_Frequency = 0U;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2200      	movs	r2, #0
 8004710:	601a      	str	r2, [r3, #0]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8004712:	4b29      	ldr	r3, [pc, #164]	; (80047b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004716:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800471a:	2b00      	cmp	r3, #0
 800471c:	d017      	beq.n	800474e <HAL_RCCEx_GetPLL2ClockFreq+0x256>
    {
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800471e:	4b26      	ldr	r3, [pc, #152]	; (80047b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004720:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004722:	0c1b      	lsrs	r3, r3, #16
 8004724:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004728:	ee07 3a90 	vmov	s15, r3
 800472c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8004730:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004734:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004738:	edd7 6a07 	vldr	s13, [r7, #28]
 800473c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004740:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004744:	ee17 2a90 	vmov	r2, s15
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	605a      	str	r2, [r3, #4]
 800474c:	e002      	b.n	8004754 <HAL_RCCEx_GetPLL2ClockFreq+0x25c>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2200      	movs	r2, #0
 8004752:	605a      	str	r2, [r3, #4]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8004754:	4b18      	ldr	r3, [pc, #96]	; (80047b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004758:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800475c:	2b00      	cmp	r3, #0
 800475e:	d017      	beq.n	8004790 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
    {
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004760:	4b15      	ldr	r3, [pc, #84]	; (80047b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004762:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004764:	0e1b      	lsrs	r3, r3, #24
 8004766:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800476a:	ee07 3a90 	vmov	s15, r3
 800476e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8004772:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004776:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800477a:	edd7 6a07 	vldr	s13, [r7, #28]
 800477e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004782:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004786:	ee17 2a90 	vmov	r2, s15
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800478e:	e00c      	b.n	80047aa <HAL_RCCEx_GetPLL2ClockFreq+0x2b2>
      PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2200      	movs	r2, #0
 8004794:	609a      	str	r2, [r3, #8]
}
 8004796:	e008      	b.n	80047aa <HAL_RCCEx_GetPLL2ClockFreq+0x2b2>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2200      	movs	r2, #0
 800479c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2200      	movs	r2, #0
 80047a2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2200      	movs	r2, #0
 80047a8:	609a      	str	r2, [r3, #8]
}
 80047aa:	bf00      	nop
 80047ac:	3724      	adds	r7, #36	; 0x24
 80047ae:	46bd      	mov	sp, r7
 80047b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b4:	4770      	bx	lr
 80047b6:	bf00      	nop
 80047b8:	46020c00 	.word	0x46020c00
 80047bc:	4b742400 	.word	0x4b742400
 80047c0:	46000000 	.word	0x46000000
 80047c4:	0800c3e0 	.word	0x0800c3e0

080047c8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b089      	sub	sp, #36	; 0x24
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 80047d0:	4bad      	ldr	r3, [pc, #692]	; (8004a88 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80047d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047d8:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 80047da:	4bab      	ldr	r3, [pc, #684]	; (8004a88 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80047dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047de:	f003 0303 	and.w	r3, r3, #3
 80047e2:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 80047e4:	4ba8      	ldr	r3, [pc, #672]	; (8004a88 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80047e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047e8:	0a1b      	lsrs	r3, r3, #8
 80047ea:	f003 030f 	and.w	r3, r3, #15
 80047ee:	3301      	adds	r3, #1
 80047f0:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 80047f2:	4ba5      	ldr	r3, [pc, #660]	; (8004a88 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80047f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047f6:	091b      	lsrs	r3, r3, #4
 80047f8:	f003 0301 	and.w	r3, r3, #1
 80047fc:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 80047fe:	4ba2      	ldr	r3, [pc, #648]	; (8004a88 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004800:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004802:	08db      	lsrs	r3, r3, #3
 8004804:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004808:	68fa      	ldr	r2, [r7, #12]
 800480a:	fb02 f303 	mul.w	r3, r2, r3
 800480e:	ee07 3a90 	vmov	s15, r3
 8004812:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004816:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	2b00      	cmp	r3, #0
 800481e:	f000 8123 	beq.w	8004a68 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
  {
    switch (pll3source)
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	2b03      	cmp	r3, #3
 8004826:	d062      	beq.n	80048ee <HAL_RCCEx_GetPLL3ClockFreq+0x126>
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	2b03      	cmp	r3, #3
 800482c:	f200 8081 	bhi.w	8004932 <HAL_RCCEx_GetPLL3ClockFreq+0x16a>
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	2b01      	cmp	r3, #1
 8004834:	d024      	beq.n	8004880 <HAL_RCCEx_GetPLL3ClockFreq+0xb8>
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	2b02      	cmp	r3, #2
 800483a:	d17a      	bne.n	8004932 <HAL_RCCEx_GetPLL3ClockFreq+0x16a>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	ee07 3a90 	vmov	s15, r3
 8004842:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004846:	eddf 6a91 	vldr	s13, [pc, #580]	; 8004a8c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 800484a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800484e:	4b8e      	ldr	r3, [pc, #568]	; (8004a88 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004852:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004856:	ee07 3a90 	vmov	s15, r3
 800485a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 800485e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004862:	eddf 5a8b 	vldr	s11, [pc, #556]	; 8004a90 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8004866:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800486a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 800486e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004872:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8004876:	ee67 7a27 	vmul.f32	s15, s14, s15
 800487a:	edc7 7a07 	vstr	s15, [r7, #28]

        break;
 800487e:	e08f      	b.n	80049a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8004880:	4b81      	ldr	r3, [pc, #516]	; (8004a88 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004882:	689b      	ldr	r3, [r3, #8]
 8004884:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004888:	2b00      	cmp	r3, #0
 800488a:	d005      	beq.n	8004898 <HAL_RCCEx_GetPLL3ClockFreq+0xd0>
 800488c:	4b7e      	ldr	r3, [pc, #504]	; (8004a88 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	0f1b      	lsrs	r3, r3, #28
 8004892:	f003 030f 	and.w	r3, r3, #15
 8004896:	e006      	b.n	80048a6 <HAL_RCCEx_GetPLL3ClockFreq+0xde>
 8004898:	4b7b      	ldr	r3, [pc, #492]	; (8004a88 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800489a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800489e:	041b      	lsls	r3, r3, #16
 80048a0:	0f1b      	lsrs	r3, r3, #28
 80048a2:	f003 030f 	and.w	r3, r3, #15
 80048a6:	4a7b      	ldr	r2, [pc, #492]	; (8004a94 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>)
 80048a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048ac:	ee07 3a90 	vmov	s15, r3
 80048b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	ee07 3a90 	vmov	s15, r3
 80048ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 80048c2:	69bb      	ldr	r3, [r7, #24]
 80048c4:	ee07 3a90 	vmov	s15, r3
 80048c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048cc:	ed97 6a02 	vldr	s12, [r7, #8]
 80048d0:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8004a90 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 80048d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048dc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80048e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048e8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80048ec:	e058      	b.n	80049a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	ee07 3a90 	vmov	s15, r3
 80048f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048f8:	eddf 6a64 	vldr	s13, [pc, #400]	; 8004a8c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 80048fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004900:	4b61      	ldr	r3, [pc, #388]	; (8004a88 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004902:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004904:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004908:	ee07 3a90 	vmov	s15, r3
 800490c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8004910:	ed97 6a02 	vldr	s12, [r7, #8]
 8004914:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8004a90 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8004918:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800491c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8004920:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004924:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8004928:	ee67 7a27 	vmul.f32	s15, s14, s15
 800492c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004930:	e036      	b.n	80049a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>

      default:
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8004932:	4b55      	ldr	r3, [pc, #340]	; (8004a88 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800493a:	2b00      	cmp	r3, #0
 800493c:	d005      	beq.n	800494a <HAL_RCCEx_GetPLL3ClockFreq+0x182>
 800493e:	4b52      	ldr	r3, [pc, #328]	; (8004a88 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	0f1b      	lsrs	r3, r3, #28
 8004944:	f003 030f 	and.w	r3, r3, #15
 8004948:	e006      	b.n	8004958 <HAL_RCCEx_GetPLL3ClockFreq+0x190>
 800494a:	4b4f      	ldr	r3, [pc, #316]	; (8004a88 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800494c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004950:	041b      	lsls	r3, r3, #16
 8004952:	0f1b      	lsrs	r3, r3, #28
 8004954:	f003 030f 	and.w	r3, r3, #15
 8004958:	4a4e      	ldr	r2, [pc, #312]	; (8004a94 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>)
 800495a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800495e:	ee07 3a90 	vmov	s15, r3
 8004962:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	ee07 3a90 	vmov	s15, r3
 800496c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004970:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004974:	69bb      	ldr	r3, [r7, #24]
 8004976:	ee07 3a90 	vmov	s15, r3
 800497a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800497e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004982:	eddf 5a43 	vldr	s11, [pc, #268]	; 8004a90 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8004986:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800498a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800498e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004992:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8004996:	ee67 7a27 	vmul.f32	s15, s14, s15
 800499a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800499e:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 80049a0:	4b39      	ldr	r3, [pc, #228]	; (8004a88 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80049a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d017      	beq.n	80049dc <HAL_RCCEx_GetPLL3ClockFreq+0x214>
    {
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80049ac:	4b36      	ldr	r3, [pc, #216]	; (8004a88 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80049ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049b0:	0a5b      	lsrs	r3, r3, #9
 80049b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049b6:	ee07 3a90 	vmov	s15, r3
 80049ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 80049be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80049c2:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80049c6:	edd7 6a07 	vldr	s13, [r7, #28]
 80049ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049d2:	ee17 2a90 	vmov	r2, s15
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	601a      	str	r2, [r3, #0]
 80049da:	e002      	b.n	80049e2 <HAL_RCCEx_GetPLL3ClockFreq+0x21a>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_P_Frequency = 0U;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2200      	movs	r2, #0
 80049e0:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 80049e2:	4b29      	ldr	r3, [pc, #164]	; (8004a88 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80049e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d017      	beq.n	8004a1e <HAL_RCCEx_GetPLL3ClockFreq+0x256>
    {
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80049ee:	4b26      	ldr	r3, [pc, #152]	; (8004a88 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80049f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049f2:	0c1b      	lsrs	r3, r3, #16
 80049f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049f8:	ee07 3a90 	vmov	s15, r3
 80049fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8004a00:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004a04:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004a08:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a14:	ee17 2a90 	vmov	r2, s15
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	605a      	str	r2, [r3, #4]
 8004a1c:	e002      	b.n	8004a24 <HAL_RCCEx_GetPLL3ClockFreq+0x25c>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2200      	movs	r2, #0
 8004a22:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8004a24:	4b18      	ldr	r3, [pc, #96]	; (8004a88 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a28:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d017      	beq.n	8004a60 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
    {
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004a30:	4b15      	ldr	r3, [pc, #84]	; (8004a88 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004a32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a34:	0e1b      	lsrs	r3, r3, #24
 8004a36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a3a:	ee07 3a90 	vmov	s15, r3
 8004a3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 8004a42:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004a46:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004a4a:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a56:	ee17 2a90 	vmov	r2, s15
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	609a      	str	r2, [r3, #8]
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 8004a5e:	e00c      	b.n	8004a7a <HAL_RCCEx_GetPLL3ClockFreq+0x2b2>
      PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2200      	movs	r2, #0
 8004a64:	609a      	str	r2, [r3, #8]
}
 8004a66:	e008      	b.n	8004a7a <HAL_RCCEx_GetPLL3ClockFreq+0x2b2>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2200      	movs	r2, #0
 8004a72:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2200      	movs	r2, #0
 8004a78:	609a      	str	r2, [r3, #8]
}
 8004a7a:	bf00      	nop
 8004a7c:	3724      	adds	r7, #36	; 0x24
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a84:	4770      	bx	lr
 8004a86:	bf00      	nop
 8004a88:	46020c00 	.word	0x46020c00
 8004a8c:	4b742400 	.word	0x4b742400
 8004a90:	46000000 	.word	0x46000000
 8004a94:	0800c3e0 	.word	0x0800c3e0

08004a98 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b08e      	sub	sp, #56	; 0x38
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8004aa2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004aa6:	f5a2 2180 	sub.w	r1, r2, #262144	; 0x40000
 8004aaa:	430b      	orrs	r3, r1
 8004aac:	d145      	bne.n	8004b3a <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8004aae:	4ba7      	ldr	r3, [pc, #668]	; (8004d4c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004ab0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004ab4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ab8:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8004aba:	4ba4      	ldr	r3, [pc, #656]	; (8004d4c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004abc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004ac0:	f003 0302 	and.w	r3, r3, #2
 8004ac4:	2b02      	cmp	r3, #2
 8004ac6:	d108      	bne.n	8004ada <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8004ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ace:	d104      	bne.n	8004ada <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8004ad0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ad4:	637b      	str	r3, [r7, #52]	; 0x34
 8004ad6:	f001 bb31 	b.w	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8004ada:	4b9c      	ldr	r3, [pc, #624]	; (8004d4c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004adc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004ae0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ae4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ae8:	d114      	bne.n	8004b14 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8004aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004af0:	d110      	bne.n	8004b14 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004af2:	4b96      	ldr	r3, [pc, #600]	; (8004d4c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004af4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004af8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004afc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b00:	d103      	bne.n	8004b0a <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 8004b02:	23fa      	movs	r3, #250	; 0xfa
 8004b04:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004b06:	f001 bb19 	b.w	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = LSI_VALUE;
 8004b0a:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8004b0e:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004b10:	f001 bb14 	b.w	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8004b14:	4b8d      	ldr	r3, [pc, #564]	; (8004d4c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b1c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004b20:	d107      	bne.n	8004b32 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8004b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b24:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b28:	d103      	bne.n	8004b32 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 8004b2a:	4b89      	ldr	r3, [pc, #548]	; (8004d50 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8004b2c:	637b      	str	r3, [r7, #52]	; 0x34
 8004b2e:	f001 bb05 	b.w	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8004b32:	2300      	movs	r3, #0
 8004b34:	637b      	str	r3, [r7, #52]	; 0x34
 8004b36:	f001 bb01 	b.w	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8004b3a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b3e:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8004b42:	430b      	orrs	r3, r1
 8004b44:	d151      	bne.n	8004bea <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8004b46:	4b81      	ldr	r3, [pc, #516]	; (8004d4c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004b48:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004b4c:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8004b50:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8004b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b54:	2b80      	cmp	r3, #128	; 0x80
 8004b56:	d035      	beq.n	8004bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8004b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b5a:	2b80      	cmp	r3, #128	; 0x80
 8004b5c:	d841      	bhi.n	8004be2 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8004b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b60:	2b60      	cmp	r3, #96	; 0x60
 8004b62:	d02a      	beq.n	8004bba <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8004b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b66:	2b60      	cmp	r3, #96	; 0x60
 8004b68:	d83b      	bhi.n	8004be2 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8004b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b6c:	2b40      	cmp	r3, #64	; 0x40
 8004b6e:	d009      	beq.n	8004b84 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8004b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b72:	2b40      	cmp	r3, #64	; 0x40
 8004b74:	d835      	bhi.n	8004be2 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8004b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d00c      	beq.n	8004b96 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8004b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b7e:	2b20      	cmp	r3, #32
 8004b80:	d012      	beq.n	8004ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8004b82:	e02e      	b.n	8004be2 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004b84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b88:	4618      	mov	r0, r3
 8004b8a:	f7ff fb4d 	bl	8004228 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8004b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b90:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004b92:	f001 bad3 	b.w	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004b96:	f107 0318 	add.w	r3, r7, #24
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	f7ff fcac 	bl	80044f8 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8004ba0:	69bb      	ldr	r3, [r7, #24]
 8004ba2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004ba4:	f001 baca 	b.w	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004ba8:	f107 030c 	add.w	r3, r7, #12
 8004bac:	4618      	mov	r0, r3
 8004bae:	f7ff fe0b 	bl	80047c8 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004bb6:	f001 bac1 	b.w	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8004bba:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004bbe:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004bc0:	f001 babc 	b.w	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004bc4:	4b61      	ldr	r3, [pc, #388]	; (8004d4c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bcc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bd0:	d103      	bne.n	8004bda <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 8004bd2:	4b60      	ldr	r3, [pc, #384]	; (8004d54 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8004bd4:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004bd6:	f001 bab1 	b.w	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004bde:	f001 baad 	b.w	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default :
      {
        frequency = 0U;
 8004be2:	2300      	movs	r3, #0
 8004be4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004be6:	f001 baa9 	b.w	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8004bea:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004bee:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8004bf2:	430b      	orrs	r3, r1
 8004bf4:	d158      	bne.n	8004ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8004bf6:	4b55      	ldr	r3, [pc, #340]	; (8004d4c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004bf8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004bfc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004c00:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8004c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c08:	d03b      	beq.n	8004c82 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8004c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c10:	d846      	bhi.n	8004ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8004c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c14:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c18:	d02e      	beq.n	8004c78 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 8004c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c1c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c20:	d83e      	bhi.n	8004ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8004c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c28:	d00b      	beq.n	8004c42 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 8004c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c30:	d836      	bhi.n	8004ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8004c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d00d      	beq.n	8004c54 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8004c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c3e:	d012      	beq.n	8004c66 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8004c40:	e02e      	b.n	8004ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004c42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c46:	4618      	mov	r0, r3
 8004c48:	f7ff faee 	bl	8004228 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8004c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c4e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004c50:	f001 ba74 	b.w	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004c54:	f107 0318 	add.w	r3, r7, #24
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f7ff fc4d 	bl	80044f8 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8004c5e:	69bb      	ldr	r3, [r7, #24]
 8004c60:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004c62:	f001 ba6b 	b.w	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004c66:	f107 030c 	add.w	r3, r7, #12
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f7ff fdac 	bl	80047c8 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004c74:	f001 ba62 	b.w	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8004c78:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004c7c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004c7e:	f001 ba5d 	b.w	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004c82:	4b32      	ldr	r3, [pc, #200]	; (8004d4c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c8e:	d103      	bne.n	8004c98 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 8004c90:	4b30      	ldr	r3, [pc, #192]	; (8004d54 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8004c92:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004c94:	f001 ba52 	b.w	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004c9c:	f001 ba4e 	b.w	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default :

        frequency = 0U;
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004ca4:	f001 ba4a 	b.w	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#endif /* SAI2 */
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 8004ca8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004cac:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8004cb0:	430b      	orrs	r3, r1
 8004cb2:	d126      	bne.n	8004d02 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 8004cb4:	4b25      	ldr	r3, [pc, #148]	; (8004d4c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004cb6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004cba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004cbe:	633b      	str	r3, [r7, #48]	; 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 8004cc0:	4b22      	ldr	r3, [pc, #136]	; (8004d4c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ccc:	d106      	bne.n	8004cdc <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8004cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d103      	bne.n	8004cdc <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 8004cd4:	4b1f      	ldr	r3, [pc, #124]	; (8004d54 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8004cd6:	637b      	str	r3, [r7, #52]	; 0x34
 8004cd8:	f001 ba30 	b.w	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 8004cdc:	4b1b      	ldr	r3, [pc, #108]	; (8004d4c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ce4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ce8:	d107      	bne.n	8004cfa <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 8004cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004cf0:	d103      	bne.n	8004cfa <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 8004cf2:	4b19      	ldr	r3, [pc, #100]	; (8004d58 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8004cf4:	637b      	str	r3, [r7, #52]	; 0x34
 8004cf6:	f001 ba21 	b.w	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	637b      	str	r3, [r7, #52]	; 0x34
 8004cfe:	f001 ba1d 	b.w	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 8004d02:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d06:	f5a2 1180 	sub.w	r1, r2, #1048576	; 0x100000
 8004d0a:	430b      	orrs	r3, r1
 8004d0c:	d16e      	bne.n	8004dec <HAL_RCCEx_GetPeriphCLKFreq+0x354>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8004d0e:	4b0f      	ldr	r3, [pc, #60]	; (8004d4c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004d10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004d14:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8004d18:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8004d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d1c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004d20:	d03d      	beq.n	8004d9e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8004d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d24:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004d28:	d85c      	bhi.n	8004de4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8004d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d2c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d30:	d014      	beq.n	8004d5c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 8004d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d34:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d38:	d854      	bhi.n	8004de4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8004d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d01f      	beq.n	8004d80 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 8004d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d42:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004d46:	d012      	beq.n	8004d6e <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8004d48:	e04c      	b.n	8004de4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8004d4a:	bf00      	nop
 8004d4c:	46020c00 	.word	0x46020c00
 8004d50:	0007a120 	.word	0x0007a120
 8004d54:	00f42400 	.word	0x00f42400
 8004d58:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004d5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d60:	4618      	mov	r0, r3
 8004d62:	f7ff fa61 	bl	8004228 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8004d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d68:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004d6a:	f001 b9e7 	b.w	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004d6e:	f107 0318 	add.w	r3, r7, #24
 8004d72:	4618      	mov	r0, r3
 8004d74:	f7ff fbc0 	bl	80044f8 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8004d78:	69fb      	ldr	r3, [r7, #28]
 8004d7a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004d7c:	f001 b9de 	b.w	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8004d80:	4ba7      	ldr	r3, [pc, #668]	; (8005020 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d8c:	d103      	bne.n	8004d96 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 8004d8e:	4ba5      	ldr	r3, [pc, #660]	; (8005024 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004d90:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004d92:	f001 b9d3 	b.w	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8004d96:	2300      	movs	r3, #0
 8004d98:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004d9a:	f001 b9cf 	b.w	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004d9e:	4ba0      	ldr	r3, [pc, #640]	; (8005020 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f003 0320 	and.w	r3, r3, #32
 8004da6:	2b20      	cmp	r3, #32
 8004da8:	d118      	bne.n	8004ddc <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004daa:	4b9d      	ldr	r3, [pc, #628]	; (8005020 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d005      	beq.n	8004dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8004db6:	4b9a      	ldr	r3, [pc, #616]	; (8005020 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	0e1b      	lsrs	r3, r3, #24
 8004dbc:	f003 030f 	and.w	r3, r3, #15
 8004dc0:	e006      	b.n	8004dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8004dc2:	4b97      	ldr	r3, [pc, #604]	; (8005020 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004dc4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004dc8:	041b      	lsls	r3, r3, #16
 8004dca:	0e1b      	lsrs	r3, r3, #24
 8004dcc:	f003 030f 	and.w	r3, r3, #15
 8004dd0:	4a95      	ldr	r2, [pc, #596]	; (8005028 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004dd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004dd6:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004dd8:	f001 b9b0 	b.w	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8004ddc:	2300      	movs	r3, #0
 8004dde:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004de0:	f001 b9ac 	b.w	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default :

        frequency = 0U;
 8004de4:	2300      	movs	r3, #0
 8004de6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004de8:	f001 b9a8 	b.w	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8004dec:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004df0:	f5a2 1100 	sub.w	r1, r2, #2097152	; 0x200000
 8004df4:	430b      	orrs	r3, r1
 8004df6:	d17f      	bne.n	8004ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8004df8:	4b89      	ldr	r3, [pc, #548]	; (8005020 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004dfa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004dfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e02:	633b      	str	r3, [r7, #48]	; 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8004e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d165      	bne.n	8004ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8004e0a:	4b85      	ldr	r3, [pc, #532]	; (8005020 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004e0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004e10:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8004e14:	633b      	str	r3, [r7, #48]	; 0x30

      switch (srcclk)
 8004e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e18:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004e1c:	d034      	beq.n	8004e88 <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
 8004e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e20:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004e24:	d853      	bhi.n	8004ece <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 8004e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e28:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e2c:	d00b      	beq.n	8004e46 <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 8004e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e30:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e34:	d84b      	bhi.n	8004ece <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 8004e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d016      	beq.n	8004e6a <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 8004e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e3e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e42:	d009      	beq.n	8004e58 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8004e44:	e043      	b.n	8004ece <HAL_RCCEx_GetPeriphCLKFreq+0x436>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004e46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	f7ff f9ec 	bl	8004228 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e52:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8004e54:	f001 b972 	b.w	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004e58:	f107 0318 	add.w	r3, r7, #24
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	f7ff fb4b 	bl	80044f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004e62:	69fb      	ldr	r3, [r7, #28]
 8004e64:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8004e66:	f001 b969 	b.w	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8004e6a:	4b6d      	ldr	r3, [pc, #436]	; (8005020 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e76:	d103      	bne.n	8004e80 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
          {
            frequency = HSI48_VALUE;
 8004e78:	4b6a      	ldr	r3, [pc, #424]	; (8005024 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004e7a:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8004e7c:	f001 b95e 	b.w	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
            frequency = 0U;
 8004e80:	2300      	movs	r3, #0
 8004e82:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8004e84:	f001 b95a 	b.w	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004e88:	4b65      	ldr	r3, [pc, #404]	; (8005020 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f003 0320 	and.w	r3, r3, #32
 8004e90:	2b20      	cmp	r3, #32
 8004e92:	d118      	bne.n	8004ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004e94:	4b62      	ldr	r3, [pc, #392]	; (8005020 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004e96:	689b      	ldr	r3, [r3, #8]
 8004e98:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d005      	beq.n	8004eac <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 8004ea0:	4b5f      	ldr	r3, [pc, #380]	; (8005020 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004ea2:	689b      	ldr	r3, [r3, #8]
 8004ea4:	0e1b      	lsrs	r3, r3, #24
 8004ea6:	f003 030f 	and.w	r3, r3, #15
 8004eaa:	e006      	b.n	8004eba <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8004eac:	4b5c      	ldr	r3, [pc, #368]	; (8005020 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004eae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004eb2:	041b      	lsls	r3, r3, #16
 8004eb4:	0e1b      	lsrs	r3, r3, #24
 8004eb6:	f003 030f 	and.w	r3, r3, #15
 8004eba:	4a5b      	ldr	r2, [pc, #364]	; (8005028 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004ebc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ec0:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8004ec2:	f001 b93b 	b.w	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
            frequency = 0U;
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8004eca:	f001 b937 	b.w	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
        }
        default :
        {
          frequency = 0U;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8004ed2:	f001 b933 	b.w	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 8004ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ed8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004edc:	d108      	bne.n	8004ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004ede:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f7ff f9a0 	bl	8004228 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8004ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eea:	637b      	str	r3, [r7, #52]	; 0x34
 8004eec:	f001 b926 	b.w	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else
    {
      frequency = 0U;
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	637b      	str	r3, [r7, #52]	; 0x34
 8004ef4:	f001 b922 	b.w	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8004ef8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004efc:	1e51      	subs	r1, r2, #1
 8004efe:	430b      	orrs	r3, r1
 8004f00:	d136      	bne.n	8004f70 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8004f02:	4b47      	ldr	r3, [pc, #284]	; (8005020 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004f04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004f08:	f003 0303 	and.w	r3, r3, #3
 8004f0c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8004f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d104      	bne.n	8004f1e <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8004f14:	f7fe fa1e 	bl	8003354 <HAL_RCC_GetPCLK2Freq>
 8004f18:	6378      	str	r0, [r7, #52]	; 0x34
 8004f1a:	f001 b90f 	b.w	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8004f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	d104      	bne.n	8004f2e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004f24:	f7fe f8e0 	bl	80030e8 <HAL_RCC_GetSysClockFreq>
 8004f28:	6378      	str	r0, [r7, #52]	; 0x34
 8004f2a:	f001 b907 	b.w	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8004f2e:	4b3c      	ldr	r3, [pc, #240]	; (8005020 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f3a:	d106      	bne.n	8004f4a <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 8004f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f3e:	2b02      	cmp	r3, #2
 8004f40:	d103      	bne.n	8004f4a <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HSI_VALUE;
 8004f42:	4b3a      	ldr	r3, [pc, #232]	; (800502c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8004f44:	637b      	str	r3, [r7, #52]	; 0x34
 8004f46:	f001 b8f9 	b.w	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8004f4a:	4b35      	ldr	r3, [pc, #212]	; (8005020 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004f4c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004f50:	f003 0302 	and.w	r3, r3, #2
 8004f54:	2b02      	cmp	r3, #2
 8004f56:	d107      	bne.n	8004f68 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8004f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f5a:	2b03      	cmp	r3, #3
 8004f5c:	d104      	bne.n	8004f68 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = LSE_VALUE;
 8004f5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f62:	637b      	str	r3, [r7, #52]	; 0x34
 8004f64:	f001 b8ea 	b.w	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 8004f68:	2300      	movs	r3, #0
 8004f6a:	637b      	str	r3, [r7, #52]	; 0x34
 8004f6c:	f001 b8e6 	b.w	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 8004f70:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f74:	1e91      	subs	r1, r2, #2
 8004f76:	430b      	orrs	r3, r1
 8004f78:	d136      	bne.n	8004fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8004f7a:	4b29      	ldr	r3, [pc, #164]	; (8005020 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004f7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004f80:	f003 030c 	and.w	r3, r3, #12
 8004f84:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8004f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d104      	bne.n	8004f96 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004f8c:	f7fe f9ce 	bl	800332c <HAL_RCC_GetPCLK1Freq>
 8004f90:	6378      	str	r0, [r7, #52]	; 0x34
 8004f92:	f001 b8d3 	b.w	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8004f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f98:	2b04      	cmp	r3, #4
 8004f9a:	d104      	bne.n	8004fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004f9c:	f7fe f8a4 	bl	80030e8 <HAL_RCC_GetSysClockFreq>
 8004fa0:	6378      	str	r0, [r7, #52]	; 0x34
 8004fa2:	f001 b8cb 	b.w	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8004fa6:	4b1e      	ldr	r3, [pc, #120]	; (8005020 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fb2:	d106      	bne.n	8004fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8004fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fb6:	2b08      	cmp	r3, #8
 8004fb8:	d103      	bne.n	8004fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HSI_VALUE;
 8004fba:	4b1c      	ldr	r3, [pc, #112]	; (800502c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8004fbc:	637b      	str	r3, [r7, #52]	; 0x34
 8004fbe:	f001 b8bd 	b.w	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8004fc2:	4b17      	ldr	r3, [pc, #92]	; (8005020 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004fc4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004fc8:	f003 0302 	and.w	r3, r3, #2
 8004fcc:	2b02      	cmp	r3, #2
 8004fce:	d107      	bne.n	8004fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 8004fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fd2:	2b0c      	cmp	r3, #12
 8004fd4:	d104      	bne.n	8004fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = LSE_VALUE;
 8004fd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004fda:	637b      	str	r3, [r7, #52]	; 0x34
 8004fdc:	f001 b8ae 	b.w	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	637b      	str	r3, [r7, #52]	; 0x34
 8004fe4:	f001 b8aa 	b.w	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8004fe8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004fec:	1f11      	subs	r1, r2, #4
 8004fee:	430b      	orrs	r3, r1
 8004ff0:	d13f      	bne.n	8005072 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8004ff2:	4b0b      	ldr	r3, [pc, #44]	; (8005020 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004ff4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004ff8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004ffc:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8004ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005000:	2b00      	cmp	r3, #0
 8005002:	d104      	bne.n	800500e <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005004:	f7fe f992 	bl	800332c <HAL_RCC_GetPCLK1Freq>
 8005008:	6378      	str	r0, [r7, #52]	; 0x34
 800500a:	f001 b897 	b.w	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 800500e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005010:	2b10      	cmp	r3, #16
 8005012:	d10d      	bne.n	8005030 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005014:	f7fe f868 	bl	80030e8 <HAL_RCC_GetSysClockFreq>
 8005018:	6378      	str	r0, [r7, #52]	; 0x34
 800501a:	f001 b88f 	b.w	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
 800501e:	bf00      	nop
 8005020:	46020c00 	.word	0x46020c00
 8005024:	02dc6c00 	.word	0x02dc6c00
 8005028:	0800c3e0 	.word	0x0800c3e0
 800502c:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8005030:	4ba8      	ldr	r3, [pc, #672]	; (80052d4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005038:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800503c:	d106      	bne.n	800504c <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 800503e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005040:	2b20      	cmp	r3, #32
 8005042:	d103      	bne.n	800504c <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HSI_VALUE;
 8005044:	4ba4      	ldr	r3, [pc, #656]	; (80052d8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005046:	637b      	str	r3, [r7, #52]	; 0x34
 8005048:	f001 b878 	b.w	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800504c:	4ba1      	ldr	r3, [pc, #644]	; (80052d4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800504e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005052:	f003 0302 	and.w	r3, r3, #2
 8005056:	2b02      	cmp	r3, #2
 8005058:	d107      	bne.n	800506a <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800505a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800505c:	2b30      	cmp	r3, #48	; 0x30
 800505e:	d104      	bne.n	800506a <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = LSE_VALUE;
 8005060:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005064:	637b      	str	r3, [r7, #52]	; 0x34
 8005066:	f001 b869 	b.w	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 800506a:	2300      	movs	r3, #0
 800506c:	637b      	str	r3, [r7, #52]	; 0x34
 800506e:	f001 b865 	b.w	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 8005072:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005076:	f1a2 0108 	sub.w	r1, r2, #8
 800507a:	430b      	orrs	r3, r1
 800507c:	d136      	bne.n	80050ec <HAL_RCCEx_GetPeriphCLKFreq+0x654>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800507e:	4b95      	ldr	r3, [pc, #596]	; (80052d4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005080:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005084:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005088:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 800508a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800508c:	2b00      	cmp	r3, #0
 800508e:	d104      	bne.n	800509a <HAL_RCCEx_GetPeriphCLKFreq+0x602>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005090:	f7fe f94c 	bl	800332c <HAL_RCC_GetPCLK1Freq>
 8005094:	6378      	str	r0, [r7, #52]	; 0x34
 8005096:	f001 b851 	b.w	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 800509a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800509c:	2b40      	cmp	r3, #64	; 0x40
 800509e:	d104      	bne.n	80050aa <HAL_RCCEx_GetPeriphCLKFreq+0x612>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80050a0:	f7fe f822 	bl	80030e8 <HAL_RCC_GetSysClockFreq>
 80050a4:	6378      	str	r0, [r7, #52]	; 0x34
 80050a6:	f001 b849 	b.w	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 80050aa:	4b8a      	ldr	r3, [pc, #552]	; (80052d4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050b6:	d106      	bne.n	80050c6 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 80050b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ba:	2b80      	cmp	r3, #128	; 0x80
 80050bc:	d103      	bne.n	80050c6 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HSI_VALUE;
 80050be:	4b86      	ldr	r3, [pc, #536]	; (80052d8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80050c0:	637b      	str	r3, [r7, #52]	; 0x34
 80050c2:	f001 b83b 	b.w	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 80050c6:	4b83      	ldr	r3, [pc, #524]	; (80052d4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80050c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80050cc:	f003 0302 	and.w	r3, r3, #2
 80050d0:	2b02      	cmp	r3, #2
 80050d2:	d107      	bne.n	80050e4 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 80050d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050d6:	2bc0      	cmp	r3, #192	; 0xc0
 80050d8:	d104      	bne.n	80050e4 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
    {
      frequency = LSE_VALUE;
 80050da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050de:	637b      	str	r3, [r7, #52]	; 0x34
 80050e0:	f001 b82c 	b.w	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 80050e4:	2300      	movs	r3, #0
 80050e6:	637b      	str	r3, [r7, #52]	; 0x34
 80050e8:	f001 b828 	b.w	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 80050ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80050f0:	f1a2 0110 	sub.w	r1, r2, #16
 80050f4:	430b      	orrs	r3, r1
 80050f6:	d139      	bne.n	800516c <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80050f8:	4b76      	ldr	r3, [pc, #472]	; (80052d4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80050fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80050fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005102:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8005104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005106:	2b00      	cmp	r3, #0
 8005108:	d104      	bne.n	8005114 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800510a:	f7fe f90f 	bl	800332c <HAL_RCC_GetPCLK1Freq>
 800510e:	6378      	str	r0, [r7, #52]	; 0x34
 8005110:	f001 b814 	b.w	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8005114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005116:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800511a:	d104      	bne.n	8005126 <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800511c:	f7fd ffe4 	bl	80030e8 <HAL_RCC_GetSysClockFreq>
 8005120:	6378      	str	r0, [r7, #52]	; 0x34
 8005122:	f001 b80b 	b.w	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8005126:	4b6b      	ldr	r3, [pc, #428]	; (80052d4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800512e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005132:	d107      	bne.n	8005144 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 8005134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005136:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800513a:	d103      	bne.n	8005144 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = HSI_VALUE;
 800513c:	4b66      	ldr	r3, [pc, #408]	; (80052d8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800513e:	637b      	str	r3, [r7, #52]	; 0x34
 8005140:	f000 bffc 	b.w	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8005144:	4b63      	ldr	r3, [pc, #396]	; (80052d4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005146:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800514a:	f003 0302 	and.w	r3, r3, #2
 800514e:	2b02      	cmp	r3, #2
 8005150:	d108      	bne.n	8005164 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 8005152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005154:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005158:	d104      	bne.n	8005164 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = LSE_VALUE;
 800515a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800515e:	637b      	str	r3, [r7, #52]	; 0x34
 8005160:	f000 bfec 	b.w	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8005164:	2300      	movs	r3, #0
 8005166:	637b      	str	r3, [r7, #52]	; 0x34
 8005168:	f000 bfe8 	b.w	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#if defined(USART6)
  else if (PeriphClk == RCC_PERIPHCLK_USART6)
 800516c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005170:	f102 4160 	add.w	r1, r2, #3758096384	; 0xe0000000
 8005174:	430b      	orrs	r3, r1
 8005176:	d139      	bne.n	80051ec <HAL_RCCEx_GetPeriphCLKFreq+0x754>
  {
    /* Get the current USART6 source */
    srcclk = __HAL_RCC_GET_USART6_SOURCE();
 8005178:	4b56      	ldr	r3, [pc, #344]	; (80052d4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800517a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800517e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005182:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 8005184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005186:	2b00      	cmp	r3, #0
 8005188:	d104      	bne.n	8005194 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800518a:	f7fe f8cf 	bl	800332c <HAL_RCC_GetPCLK1Freq>
 800518e:	6378      	str	r0, [r7, #52]	; 0x34
 8005190:	f000 bfd4 	b.w	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_USART6CLKSOURCE_SYSCLK)
 8005194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005196:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800519a:	d104      	bne.n	80051a6 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800519c:	f7fd ffa4 	bl	80030e8 <HAL_RCC_GetSysClockFreq>
 80051a0:	6378      	str	r0, [r7, #52]	; 0x34
 80051a2:	f000 bfcb 	b.w	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 80051a6:	4b4b      	ldr	r3, [pc, #300]	; (80052d4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051b2:	d107      	bne.n	80051c4 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 80051b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80051ba:	d103      	bne.n	80051c4 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
    {
      frequency = HSI_VALUE;
 80051bc:	4b46      	ldr	r3, [pc, #280]	; (80052d8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80051be:	637b      	str	r3, [r7, #52]	; 0x34
 80051c0:	f000 bfbc 	b.w	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 80051c4:	4b43      	ldr	r3, [pc, #268]	; (80052d4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80051c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80051ca:	f003 0302 	and.w	r3, r3, #2
 80051ce:	2b02      	cmp	r3, #2
 80051d0:	d108      	bne.n	80051e4 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
 80051d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051d4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80051d8:	d104      	bne.n	80051e4 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
    {
      frequency = LSE_VALUE;
 80051da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051de:	637b      	str	r3, [r7, #52]	; 0x34
 80051e0:	f000 bfac 	b.w	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 80051e4:	2300      	movs	r3, #0
 80051e6:	637b      	str	r3, [r7, #52]	; 0x34
 80051e8:	f000 bfa8 	b.w	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 80051ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80051f0:	f1a2 0120 	sub.w	r1, r2, #32
 80051f4:	430b      	orrs	r3, r1
 80051f6:	d158      	bne.n	80052aa <HAL_RCCEx_GetPeriphCLKFreq+0x812>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80051f8:	4b36      	ldr	r3, [pc, #216]	; (80052d4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80051fa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80051fe:	f003 0307 	and.w	r3, r3, #7
 8005202:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8005204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005206:	2b00      	cmp	r3, #0
 8005208:	d104      	bne.n	8005214 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 800520a:	f7fe f8b7 	bl	800337c <HAL_RCC_GetPCLK3Freq>
 800520e:	6378      	str	r0, [r7, #52]	; 0x34
 8005210:	f000 bf94 	b.w	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8005214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005216:	2b01      	cmp	r3, #1
 8005218:	d104      	bne.n	8005224 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800521a:	f7fd ff65 	bl	80030e8 <HAL_RCC_GetSysClockFreq>
 800521e:	6378      	str	r0, [r7, #52]	; 0x34
 8005220:	f000 bf8c 	b.w	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8005224:	4b2b      	ldr	r3, [pc, #172]	; (80052d4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800522c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005230:	d106      	bne.n	8005240 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 8005232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005234:	2b02      	cmp	r3, #2
 8005236:	d103      	bne.n	8005240 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      frequency = HSI_VALUE;
 8005238:	4b27      	ldr	r3, [pc, #156]	; (80052d8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800523a:	637b      	str	r3, [r7, #52]	; 0x34
 800523c:	f000 bf7e 	b.w	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8005240:	4b24      	ldr	r3, [pc, #144]	; (80052d4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005242:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005246:	f003 0302 	and.w	r3, r3, #2
 800524a:	2b02      	cmp	r3, #2
 800524c:	d107      	bne.n	800525e <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 800524e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005250:	2b03      	cmp	r3, #3
 8005252:	d104      	bne.n	800525e <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
    {
      frequency = LSE_VALUE;
 8005254:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005258:	637b      	str	r3, [r7, #52]	; 0x34
 800525a:	f000 bf6f 	b.w	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 800525e:	4b1d      	ldr	r3, [pc, #116]	; (80052d4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f003 0320 	and.w	r3, r3, #32
 8005266:	2b20      	cmp	r3, #32
 8005268:	d11b      	bne.n	80052a2 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 800526a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800526c:	2b04      	cmp	r3, #4
 800526e:	d118      	bne.n	80052a2 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005270:	4b18      	ldr	r3, [pc, #96]	; (80052d4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005272:	689b      	ldr	r3, [r3, #8]
 8005274:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005278:	2b00      	cmp	r3, #0
 800527a:	d005      	beq.n	8005288 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
 800527c:	4b15      	ldr	r3, [pc, #84]	; (80052d4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800527e:	689b      	ldr	r3, [r3, #8]
 8005280:	0e1b      	lsrs	r3, r3, #24
 8005282:	f003 030f 	and.w	r3, r3, #15
 8005286:	e006      	b.n	8005296 <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
 8005288:	4b12      	ldr	r3, [pc, #72]	; (80052d4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800528a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800528e:	041b      	lsls	r3, r3, #16
 8005290:	0e1b      	lsrs	r3, r3, #24
 8005292:	f003 030f 	and.w	r3, r3, #15
 8005296:	4a11      	ldr	r2, [pc, #68]	; (80052dc <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8005298:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800529c:	637b      	str	r3, [r7, #52]	; 0x34
 800529e:	f000 bf4d 	b.w	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 80052a2:	2300      	movs	r3, #0
 80052a4:	637b      	str	r3, [r7, #52]	; 0x34
 80052a6:	f000 bf49 	b.w	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 80052aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80052ae:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 80052b2:	430b      	orrs	r3, r1
 80052b4:	d172      	bne.n	800539c <HAL_RCCEx_GetPeriphCLKFreq+0x904>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 80052b6:	4b07      	ldr	r3, [pc, #28]	; (80052d4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80052b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80052bc:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80052c0:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 80052c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052c8:	d10a      	bne.n	80052e0 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80052ca:	f7fd ff0d 	bl	80030e8 <HAL_RCC_GetSysClockFreq>
 80052ce:	6378      	str	r0, [r7, #52]	; 0x34
 80052d0:	f000 bf34 	b.w	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
 80052d4:	46020c00 	.word	0x46020c00
 80052d8:	00f42400 	.word	0x00f42400
 80052dc:	0800c3e0 	.word	0x0800c3e0
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 80052e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052e6:	d108      	bne.n	80052fa <HAL_RCCEx_GetPeriphCLKFreq+0x862>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80052e8:	f107 0318 	add.w	r3, r7, #24
 80052ec:	4618      	mov	r0, r3
 80052ee:	f7ff f903 	bl	80044f8 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 80052f2:	6a3b      	ldr	r3, [r7, #32]
 80052f4:	637b      	str	r3, [r7, #52]	; 0x34
 80052f6:	f000 bf21 	b.w	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 80052fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d104      	bne.n	800530a <HAL_RCCEx_GetPeriphCLKFreq+0x872>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 8005300:	f7fd fffa 	bl	80032f8 <HAL_RCC_GetHCLKFreq>
 8005304:	6378      	str	r0, [r7, #52]	; 0x34
 8005306:	f000 bf19 	b.w	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 800530a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800530c:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8005310:	d122      	bne.n	8005358 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005312:	4bb0      	ldr	r3, [pc, #704]	; (80055d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f003 0320 	and.w	r3, r3, #32
 800531a:	2b20      	cmp	r3, #32
 800531c:	d118      	bne.n	8005350 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800531e:	4bad      	ldr	r3, [pc, #692]	; (80055d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8005320:	689b      	ldr	r3, [r3, #8]
 8005322:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005326:	2b00      	cmp	r3, #0
 8005328:	d005      	beq.n	8005336 <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
 800532a:	4baa      	ldr	r3, [pc, #680]	; (80055d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800532c:	689b      	ldr	r3, [r3, #8]
 800532e:	0e1b      	lsrs	r3, r3, #24
 8005330:	f003 030f 	and.w	r3, r3, #15
 8005334:	e006      	b.n	8005344 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 8005336:	4ba7      	ldr	r3, [pc, #668]	; (80055d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8005338:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800533c:	041b      	lsls	r3, r3, #16
 800533e:	0e1b      	lsrs	r3, r3, #24
 8005340:	f003 030f 	and.w	r3, r3, #15
 8005344:	4aa4      	ldr	r2, [pc, #656]	; (80055d8 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 8005346:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800534a:	637b      	str	r3, [r7, #52]	; 0x34
 800534c:	f000 bef6 	b.w	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = 0U;
 8005350:	2300      	movs	r3, #0
 8005352:	637b      	str	r3, [r7, #52]	; 0x34
 8005354:	f000 bef2 	b.w	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8005358:	4b9e      	ldr	r3, [pc, #632]	; (80055d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005360:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005364:	d107      	bne.n	8005376 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8005366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005368:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800536c:	d103      	bne.n	8005376 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    {
      frequency = HSE_VALUE;
 800536e:	4b9b      	ldr	r3, [pc, #620]	; (80055dc <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 8005370:	637b      	str	r3, [r7, #52]	; 0x34
 8005372:	f000 bee3 	b.w	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8005376:	4b97      	ldr	r3, [pc, #604]	; (80055d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800537e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005382:	d107      	bne.n	8005394 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
 8005384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005386:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800538a:	d103      	bne.n	8005394 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
    {
      frequency = HSI_VALUE;
 800538c:	4b93      	ldr	r3, [pc, #588]	; (80055dc <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800538e:	637b      	str	r3, [r7, #52]	; 0x34
 8005390:	f000 bed4 	b.w	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 8005394:	2300      	movs	r3, #0
 8005396:	637b      	str	r3, [r7, #52]	; 0x34
 8005398:	f000 bed0 	b.w	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 800539c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80053a0:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 80053a4:	430b      	orrs	r3, r1
 80053a6:	d158      	bne.n	800545a <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 80053a8:	4b8a      	ldr	r3, [pc, #552]	; (80055d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 80053aa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80053ae:	f003 0307 	and.w	r3, r3, #7
 80053b2:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80053b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053b6:	2b04      	cmp	r3, #4
 80053b8:	d84b      	bhi.n	8005452 <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
 80053ba:	a201      	add	r2, pc, #4	; (adr r2, 80053c0 <HAL_RCCEx_GetPeriphCLKFreq+0x928>)
 80053bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053c0:	080053f9 	.word	0x080053f9
 80053c4:	080053d5 	.word	0x080053d5
 80053c8:	080053e7 	.word	0x080053e7
 80053cc:	08005403 	.word	0x08005403
 80053d0:	0800540d 	.word	0x0800540d
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80053d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80053d8:	4618      	mov	r0, r3
 80053da:	f7fe ff25 	bl	8004228 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80053de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80053e2:	f000 beab 	b.w	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80053e6:	f107 030c 	add.w	r3, r7, #12
 80053ea:	4618      	mov	r0, r3
 80053ec:	f7ff f9ec 	bl	80047c8 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 80053f0:	693b      	ldr	r3, [r7, #16]
 80053f2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80053f4:	f000 bea2 	b.w	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 80053f8:	f7fd ff7e 	bl	80032f8 <HAL_RCC_GetHCLKFreq>
 80053fc:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80053fe:	f000 be9d 	b.w	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8005402:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005406:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005408:	f000 be98 	b.w	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800540c:	4b71      	ldr	r3, [pc, #452]	; (80055d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f003 0320 	and.w	r3, r3, #32
 8005414:	2b20      	cmp	r3, #32
 8005416:	d118      	bne.n	800544a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005418:	4b6e      	ldr	r3, [pc, #440]	; (80055d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800541a:	689b      	ldr	r3, [r3, #8]
 800541c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005420:	2b00      	cmp	r3, #0
 8005422:	d005      	beq.n	8005430 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 8005424:	4b6b      	ldr	r3, [pc, #428]	; (80055d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8005426:	689b      	ldr	r3, [r3, #8]
 8005428:	0e1b      	lsrs	r3, r3, #24
 800542a:	f003 030f 	and.w	r3, r3, #15
 800542e:	e006      	b.n	800543e <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 8005430:	4b68      	ldr	r3, [pc, #416]	; (80055d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8005432:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005436:	041b      	lsls	r3, r3, #16
 8005438:	0e1b      	lsrs	r3, r3, #24
 800543a:	f003 030f 	and.w	r3, r3, #15
 800543e:	4a66      	ldr	r2, [pc, #408]	; (80055d8 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 8005440:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005444:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005446:	f000 be79 	b.w	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 800544a:	2300      	movs	r3, #0
 800544c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800544e:	f000 be75 	b.w	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 8005452:	2300      	movs	r3, #0
 8005454:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005456:	f000 be71 	b.w	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 800545a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800545e:	f5a2 3100 	sub.w	r1, r2, #131072	; 0x20000
 8005462:	430b      	orrs	r3, r1
 8005464:	d167      	bne.n	8005536 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8005466:	4b5b      	ldr	r3, [pc, #364]	; (80055d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8005468:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800546c:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8005470:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8005472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005474:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005478:	d036      	beq.n	80054e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 800547a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800547c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005480:	d855      	bhi.n	800552e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 8005482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005484:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005488:	d029      	beq.n	80054de <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 800548a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800548c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005490:	d84d      	bhi.n	800552e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 8005492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005494:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005498:	d013      	beq.n	80054c2 <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
 800549a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800549c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80054a0:	d845      	bhi.n	800552e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 80054a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d015      	beq.n	80054d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>
 80054a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054ae:	d13e      	bne.n	800552e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80054b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80054b4:	4618      	mov	r0, r3
 80054b6:	f7fe feb7 	bl	8004228 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80054ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054bc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80054be:	f000 be3d 	b.w	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80054c2:	f107 030c 	add.w	r3, r7, #12
 80054c6:	4618      	mov	r0, r3
 80054c8:	f7ff f97e 	bl	80047c8 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 80054cc:	693b      	ldr	r3, [r7, #16]
 80054ce:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80054d0:	f000 be34 	b.w	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 80054d4:	f7fd ff10 	bl	80032f8 <HAL_RCC_GetHCLKFreq>
 80054d8:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80054da:	f000 be2f 	b.w	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80054de:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80054e2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80054e4:	f000 be2a 	b.w	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80054e8:	4b3a      	ldr	r3, [pc, #232]	; (80055d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f003 0320 	and.w	r3, r3, #32
 80054f0:	2b20      	cmp	r3, #32
 80054f2:	d118      	bne.n	8005526 <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80054f4:	4b37      	ldr	r3, [pc, #220]	; (80055d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 80054f6:	689b      	ldr	r3, [r3, #8]
 80054f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d005      	beq.n	800550c <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 8005500:	4b34      	ldr	r3, [pc, #208]	; (80055d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8005502:	689b      	ldr	r3, [r3, #8]
 8005504:	0e1b      	lsrs	r3, r3, #24
 8005506:	f003 030f 	and.w	r3, r3, #15
 800550a:	e006      	b.n	800551a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800550c:	4b31      	ldr	r3, [pc, #196]	; (80055d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800550e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005512:	041b      	lsls	r3, r3, #16
 8005514:	0e1b      	lsrs	r3, r3, #24
 8005516:	f003 030f 	and.w	r3, r3, #15
 800551a:	4a2f      	ldr	r2, [pc, #188]	; (80055d8 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800551c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005520:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005522:	f000 be0b 	b.w	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8005526:	2300      	movs	r3, #0
 8005528:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800552a:	f000 be07 	b.w	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 800552e:	2300      	movs	r3, #0
 8005530:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005532:	f000 be03 	b.w	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 8005536:	e9d7 2300 	ldrd	r2, r3, [r7]
 800553a:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 800553e:	430b      	orrs	r3, r1
 8005540:	d152      	bne.n	80055e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8005542:	4b24      	ldr	r3, [pc, #144]	; (80055d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8005544:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005548:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800554c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800554e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005550:	2b00      	cmp	r3, #0
 8005552:	d104      	bne.n	800555e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005554:	f7fd feea 	bl	800332c <HAL_RCC_GetPCLK1Freq>
 8005558:	6378      	str	r0, [r7, #52]	; 0x34
 800555a:	f000 bdef 	b.w	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800555e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005560:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005564:	d104      	bne.n	8005570 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005566:	f7fd fdbf 	bl	80030e8 <HAL_RCC_GetSysClockFreq>
 800556a:	6378      	str	r0, [r7, #52]	; 0x34
 800556c:	f000 bde6 	b.w	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8005570:	4b18      	ldr	r3, [pc, #96]	; (80055d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005578:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800557c:	d107      	bne.n	800558e <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
 800557e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005580:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005584:	d103      	bne.n	800558e <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
    {
      frequency = HSI_VALUE;
 8005586:	4b15      	ldr	r3, [pc, #84]	; (80055dc <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 8005588:	637b      	str	r3, [r7, #52]	; 0x34
 800558a:	f000 bdd7 	b.w	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 800558e:	4b11      	ldr	r3, [pc, #68]	; (80055d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f003 0320 	and.w	r3, r3, #32
 8005596:	2b20      	cmp	r3, #32
 8005598:	d122      	bne.n	80055e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
 800559a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800559c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80055a0:	d11e      	bne.n	80055e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80055a2:	4b0c      	ldr	r3, [pc, #48]	; (80055d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 80055a4:	689b      	ldr	r3, [r3, #8]
 80055a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d005      	beq.n	80055ba <HAL_RCCEx_GetPeriphCLKFreq+0xb22>
 80055ae:	4b09      	ldr	r3, [pc, #36]	; (80055d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 80055b0:	689b      	ldr	r3, [r3, #8]
 80055b2:	0e1b      	lsrs	r3, r3, #24
 80055b4:	f003 030f 	and.w	r3, r3, #15
 80055b8:	e006      	b.n	80055c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb30>
 80055ba:	4b06      	ldr	r3, [pc, #24]	; (80055d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 80055bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80055c0:	041b      	lsls	r3, r3, #16
 80055c2:	0e1b      	lsrs	r3, r3, #24
 80055c4:	f003 030f 	and.w	r3, r3, #15
 80055c8:	4a03      	ldr	r2, [pc, #12]	; (80055d8 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 80055ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055ce:	637b      	str	r3, [r7, #52]	; 0x34
 80055d0:	f000 bdb4 	b.w	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
 80055d4:	46020c00 	.word	0x46020c00
 80055d8:	0800c3e0 	.word	0x0800c3e0
 80055dc:	00f42400 	.word	0x00f42400
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 80055e0:	2300      	movs	r3, #0
 80055e2:	637b      	str	r3, [r7, #52]	; 0x34
 80055e4:	f000 bdaa 	b.w	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 80055e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80055ec:	f1a2 0180 	sub.w	r1, r2, #128	; 0x80
 80055f0:	430b      	orrs	r3, r1
 80055f2:	d14c      	bne.n	800568e <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80055f4:	4ba8      	ldr	r3, [pc, #672]	; (8005898 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80055f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80055fa:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80055fe:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8005600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005602:	2b00      	cmp	r3, #0
 8005604:	d104      	bne.n	8005610 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005606:	f7fd fe91 	bl	800332c <HAL_RCC_GetPCLK1Freq>
 800560a:	6378      	str	r0, [r7, #52]	; 0x34
 800560c:	f000 bd96 	b.w	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8005610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005612:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005616:	d104      	bne.n	8005622 <HAL_RCCEx_GetPeriphCLKFreq+0xb8a>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005618:	f7fd fd66 	bl	80030e8 <HAL_RCC_GetSysClockFreq>
 800561c:	6378      	str	r0, [r7, #52]	; 0x34
 800561e:	f000 bd8d 	b.w	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8005622:	4b9d      	ldr	r3, [pc, #628]	; (8005898 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800562a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800562e:	d107      	bne.n	8005640 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 8005630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005632:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005636:	d103      	bne.n	8005640 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
    {
      frequency = HSI_VALUE;
 8005638:	4b98      	ldr	r3, [pc, #608]	; (800589c <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800563a:	637b      	str	r3, [r7, #52]	; 0x34
 800563c:	f000 bd7e 	b.w	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 8005640:	4b95      	ldr	r3, [pc, #596]	; (8005898 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f003 0320 	and.w	r3, r3, #32
 8005648:	2b20      	cmp	r3, #32
 800564a:	d11c      	bne.n	8005686 <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
 800564c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800564e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005652:	d118      	bne.n	8005686 <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005654:	4b90      	ldr	r3, [pc, #576]	; (8005898 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8005656:	689b      	ldr	r3, [r3, #8]
 8005658:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800565c:	2b00      	cmp	r3, #0
 800565e:	d005      	beq.n	800566c <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 8005660:	4b8d      	ldr	r3, [pc, #564]	; (8005898 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8005662:	689b      	ldr	r3, [r3, #8]
 8005664:	0e1b      	lsrs	r3, r3, #24
 8005666:	f003 030f 	and.w	r3, r3, #15
 800566a:	e006      	b.n	800567a <HAL_RCCEx_GetPeriphCLKFreq+0xbe2>
 800566c:	4b8a      	ldr	r3, [pc, #552]	; (8005898 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800566e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005672:	041b      	lsls	r3, r3, #16
 8005674:	0e1b      	lsrs	r3, r3, #24
 8005676:	f003 030f 	and.w	r3, r3, #15
 800567a:	4a89      	ldr	r2, [pc, #548]	; (80058a0 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800567c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005680:	637b      	str	r3, [r7, #52]	; 0x34
 8005682:	f000 bd5b 	b.w	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 8005686:	2300      	movs	r3, #0
 8005688:	637b      	str	r3, [r7, #52]	; 0x34
 800568a:	f000 bd57 	b.w	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 800568e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005692:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8005696:	430b      	orrs	r3, r1
 8005698:	d158      	bne.n	800574c <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800569a:	4b7f      	ldr	r3, [pc, #508]	; (8005898 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800569c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80056a0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80056a4:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80056a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056a8:	2bc0      	cmp	r3, #192	; 0xc0
 80056aa:	d028      	beq.n	80056fe <HAL_RCCEx_GetPeriphCLKFreq+0xc66>
 80056ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ae:	2bc0      	cmp	r3, #192	; 0xc0
 80056b0:	d848      	bhi.n	8005744 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 80056b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056b4:	2b80      	cmp	r3, #128	; 0x80
 80056b6:	d00e      	beq.n	80056d6 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 80056b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ba:	2b80      	cmp	r3, #128	; 0x80
 80056bc:	d842      	bhi.n	8005744 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 80056be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d003      	beq.n	80056cc <HAL_RCCEx_GetPeriphCLKFreq+0xc34>
 80056c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056c6:	2b40      	cmp	r3, #64	; 0x40
 80056c8:	d014      	beq.n	80056f4 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 80056ca:	e03b      	b.n	8005744 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 80056cc:	f7fd fe56 	bl	800337c <HAL_RCC_GetPCLK3Freq>
 80056d0:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80056d2:	f000 bd33 	b.w	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80056d6:	4b70      	ldr	r3, [pc, #448]	; (8005898 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056e2:	d103      	bne.n	80056ec <HAL_RCCEx_GetPeriphCLKFreq+0xc54>
        {
          frequency = HSI_VALUE;
 80056e4:	4b6d      	ldr	r3, [pc, #436]	; (800589c <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 80056e6:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80056e8:	f000 bd28 	b.w	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 80056ec:	2300      	movs	r3, #0
 80056ee:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80056f0:	f000 bd24 	b.w	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 80056f4:	f7fd fcf8 	bl	80030e8 <HAL_RCC_GetSysClockFreq>
 80056f8:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80056fa:	f000 bd1f 	b.w	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80056fe:	4b66      	ldr	r3, [pc, #408]	; (8005898 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f003 0320 	and.w	r3, r3, #32
 8005706:	2b20      	cmp	r3, #32
 8005708:	d118      	bne.n	800573c <HAL_RCCEx_GetPeriphCLKFreq+0xca4>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800570a:	4b63      	ldr	r3, [pc, #396]	; (8005898 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800570c:	689b      	ldr	r3, [r3, #8]
 800570e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005712:	2b00      	cmp	r3, #0
 8005714:	d005      	beq.n	8005722 <HAL_RCCEx_GetPeriphCLKFreq+0xc8a>
 8005716:	4b60      	ldr	r3, [pc, #384]	; (8005898 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8005718:	689b      	ldr	r3, [r3, #8]
 800571a:	0e1b      	lsrs	r3, r3, #24
 800571c:	f003 030f 	and.w	r3, r3, #15
 8005720:	e006      	b.n	8005730 <HAL_RCCEx_GetPeriphCLKFreq+0xc98>
 8005722:	4b5d      	ldr	r3, [pc, #372]	; (8005898 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8005724:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005728:	041b      	lsls	r3, r3, #16
 800572a:	0e1b      	lsrs	r3, r3, #24
 800572c:	f003 030f 	and.w	r3, r3, #15
 8005730:	4a5b      	ldr	r2, [pc, #364]	; (80058a0 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 8005732:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005736:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005738:	f000 bd00 	b.w	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 800573c:	2300      	movs	r3, #0
 800573e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005740:	f000 bcfc 	b.w	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      default:
      {
        frequency = 0U;
 8005744:	2300      	movs	r3, #0
 8005746:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005748:	f000 bcf8 	b.w	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 800574c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005750:	f5a2 0180 	sub.w	r1, r2, #4194304	; 0x400000
 8005754:	430b      	orrs	r3, r1
 8005756:	d14c      	bne.n	80057f2 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8005758:	4b4f      	ldr	r3, [pc, #316]	; (8005898 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800575a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800575e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005762:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8005764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005766:	2b00      	cmp	r3, #0
 8005768:	d104      	bne.n	8005774 <HAL_RCCEx_GetPeriphCLKFreq+0xcdc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800576a:	f7fd fddf 	bl	800332c <HAL_RCC_GetPCLK1Freq>
 800576e:	6378      	str	r0, [r7, #52]	; 0x34
 8005770:	f000 bce4 	b.w	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8005774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005776:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800577a:	d104      	bne.n	8005786 <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800577c:	f7fd fcb4 	bl	80030e8 <HAL_RCC_GetSysClockFreq>
 8005780:	6378      	str	r0, [r7, #52]	; 0x34
 8005782:	f000 bcdb 	b.w	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8005786:	4b44      	ldr	r3, [pc, #272]	; (8005898 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800578e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005792:	d107      	bne.n	80057a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
 8005794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005796:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800579a:	d103      	bne.n	80057a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
    {
      frequency = HSI_VALUE;
 800579c:	4b3f      	ldr	r3, [pc, #252]	; (800589c <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800579e:	637b      	str	r3, [r7, #52]	; 0x34
 80057a0:	f000 bccc 	b.w	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 80057a4:	4b3c      	ldr	r3, [pc, #240]	; (8005898 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f003 0320 	and.w	r3, r3, #32
 80057ac:	2b20      	cmp	r3, #32
 80057ae:	d11c      	bne.n	80057ea <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
 80057b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057b2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80057b6:	d118      	bne.n	80057ea <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80057b8:	4b37      	ldr	r3, [pc, #220]	; (8005898 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80057ba:	689b      	ldr	r3, [r3, #8]
 80057bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d005      	beq.n	80057d0 <HAL_RCCEx_GetPeriphCLKFreq+0xd38>
 80057c4:	4b34      	ldr	r3, [pc, #208]	; (8005898 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80057c6:	689b      	ldr	r3, [r3, #8]
 80057c8:	0e1b      	lsrs	r3, r3, #24
 80057ca:	f003 030f 	and.w	r3, r3, #15
 80057ce:	e006      	b.n	80057de <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 80057d0:	4b31      	ldr	r3, [pc, #196]	; (8005898 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80057d2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80057d6:	041b      	lsls	r3, r3, #16
 80057d8:	0e1b      	lsrs	r3, r3, #24
 80057da:	f003 030f 	and.w	r3, r3, #15
 80057de:	4a30      	ldr	r2, [pc, #192]	; (80058a0 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 80057e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057e4:	637b      	str	r3, [r7, #52]	; 0x34
 80057e6:	f000 bca9 	b.w	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 80057ea:	2300      	movs	r3, #0
 80057ec:	637b      	str	r3, [r7, #52]	; 0x34
 80057ee:	f000 bca5 	b.w	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#if defined (I2C5)
  else if (PeriphClk == RCC_PERIPHCLK_I2C5)
 80057f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80057f6:	f102 4140 	add.w	r1, r2, #3221225472	; 0xc0000000
 80057fa:	430b      	orrs	r3, r1
 80057fc:	d152      	bne.n	80058a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0c>
  {
    /* Get the current I2C5 source */
    srcclk = __HAL_RCC_GET_I2C5_SOURCE();
 80057fe:	4b26      	ldr	r3, [pc, #152]	; (8005898 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8005800:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005804:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8005808:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C5CLKSOURCE_PCLK1)
 800580a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800580c:	2b00      	cmp	r3, #0
 800580e:	d104      	bne.n	800581a <HAL_RCCEx_GetPeriphCLKFreq+0xd82>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005810:	f7fd fd8c 	bl	800332c <HAL_RCC_GetPCLK1Freq>
 8005814:	6378      	str	r0, [r7, #52]	; 0x34
 8005816:	f000 bc91 	b.w	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_I2C5CLKSOURCE_SYSCLK)
 800581a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800581c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005820:	d104      	bne.n	800582c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005822:	f7fd fc61 	bl	80030e8 <HAL_RCC_GetSysClockFreq>
 8005826:	6378      	str	r0, [r7, #52]	; 0x34
 8005828:	f000 bc88 	b.w	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C5CLKSOURCE_HSI))
 800582c:	4b1a      	ldr	r3, [pc, #104]	; (8005898 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005834:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005838:	d107      	bne.n	800584a <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
 800583a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800583c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005840:	d103      	bne.n	800584a <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
    {
      frequency = HSI_VALUE;
 8005842:	4b16      	ldr	r3, [pc, #88]	; (800589c <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8005844:	637b      	str	r3, [r7, #52]	; 0x34
 8005846:	f000 bc79 	b.w	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C5CLKSOURCE_MSIK))
 800584a:	4b13      	ldr	r3, [pc, #76]	; (8005898 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f003 0320 	and.w	r3, r3, #32
 8005852:	2b20      	cmp	r3, #32
 8005854:	d11c      	bne.n	8005890 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 8005856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005858:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800585c:	d118      	bne.n	8005890 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800585e:	4b0e      	ldr	r3, [pc, #56]	; (8005898 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8005860:	689b      	ldr	r3, [r3, #8]
 8005862:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005866:	2b00      	cmp	r3, #0
 8005868:	d005      	beq.n	8005876 <HAL_RCCEx_GetPeriphCLKFreq+0xdde>
 800586a:	4b0b      	ldr	r3, [pc, #44]	; (8005898 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800586c:	689b      	ldr	r3, [r3, #8]
 800586e:	0e1b      	lsrs	r3, r3, #24
 8005870:	f003 030f 	and.w	r3, r3, #15
 8005874:	e006      	b.n	8005884 <HAL_RCCEx_GetPeriphCLKFreq+0xdec>
 8005876:	4b08      	ldr	r3, [pc, #32]	; (8005898 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8005878:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800587c:	041b      	lsls	r3, r3, #16
 800587e:	0e1b      	lsrs	r3, r3, #24
 8005880:	f003 030f 	and.w	r3, r3, #15
 8005884:	4a06      	ldr	r2, [pc, #24]	; (80058a0 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 8005886:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800588a:	637b      	str	r3, [r7, #52]	; 0x34
 800588c:	f000 bc56 	b.w	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for I2C5 */
    else
    {
      frequency = 0U;
 8005890:	2300      	movs	r3, #0
 8005892:	637b      	str	r3, [r7, #52]	; 0x34
 8005894:	f000 bc52 	b.w	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
 8005898:	46020c00 	.word	0x46020c00
 800589c:	00f42400 	.word	0x00f42400
 80058a0:	0800c3e0 	.word	0x0800c3e0
    }
  }
#endif /* I2C5 */
#if defined (I2C6)
  else if (PeriphClk == RCC_PERIPHCLK_I2C6)
 80058a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80058a8:	f102 4100 	add.w	r1, r2, #2147483648	; 0x80000000
 80058ac:	430b      	orrs	r3, r1
 80058ae:	d14a      	bne.n	8005946 <HAL_RCCEx_GetPeriphCLKFreq+0xeae>
  {
    /* Get the current I2C6 source */
    srcclk = __HAL_RCC_GET_I2C6_SOURCE();
 80058b0:	4ba5      	ldr	r3, [pc, #660]	; (8005b48 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80058b2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80058b6:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 80058ba:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C6CLKSOURCE_PCLK1)
 80058bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d104      	bne.n	80058cc <HAL_RCCEx_GetPeriphCLKFreq+0xe34>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80058c2:	f7fd fd33 	bl	800332c <HAL_RCC_GetPCLK1Freq>
 80058c6:	6378      	str	r0, [r7, #52]	; 0x34
 80058c8:	f000 bc38 	b.w	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_I2C6CLKSOURCE_SYSCLK)
 80058cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ce:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80058d2:	d104      	bne.n	80058de <HAL_RCCEx_GetPeriphCLKFreq+0xe46>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80058d4:	f7fd fc08 	bl	80030e8 <HAL_RCC_GetSysClockFreq>
 80058d8:	6378      	str	r0, [r7, #52]	; 0x34
 80058da:	f000 bc2f 	b.w	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C6CLKSOURCE_HSI))
 80058de:	4b9a      	ldr	r3, [pc, #616]	; (8005b48 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058ea:	d107      	bne.n	80058fc <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80058ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80058f2:	d103      	bne.n	80058fc <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
    {
      frequency = HSI_VALUE;
 80058f4:	4b95      	ldr	r3, [pc, #596]	; (8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 80058f6:	637b      	str	r3, [r7, #52]	; 0x34
 80058f8:	f000 bc20 	b.w	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C6CLKSOURCE_MSIK))
 80058fc:	4b92      	ldr	r3, [pc, #584]	; (8005b48 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f003 0320 	and.w	r3, r3, #32
 8005904:	2b20      	cmp	r3, #32
 8005906:	d11b      	bne.n	8005940 <HAL_RCCEx_GetPeriphCLKFreq+0xea8>
 8005908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800590a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800590e:	d117      	bne.n	8005940 <HAL_RCCEx_GetPeriphCLKFreq+0xea8>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005910:	4b8d      	ldr	r3, [pc, #564]	; (8005b48 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8005912:	689b      	ldr	r3, [r3, #8]
 8005914:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005918:	2b00      	cmp	r3, #0
 800591a:	d005      	beq.n	8005928 <HAL_RCCEx_GetPeriphCLKFreq+0xe90>
 800591c:	4b8a      	ldr	r3, [pc, #552]	; (8005b48 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800591e:	689b      	ldr	r3, [r3, #8]
 8005920:	0e1b      	lsrs	r3, r3, #24
 8005922:	f003 030f 	and.w	r3, r3, #15
 8005926:	e006      	b.n	8005936 <HAL_RCCEx_GetPeriphCLKFreq+0xe9e>
 8005928:	4b87      	ldr	r3, [pc, #540]	; (8005b48 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800592a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800592e:	041b      	lsls	r3, r3, #16
 8005930:	0e1b      	lsrs	r3, r3, #24
 8005932:	f003 030f 	and.w	r3, r3, #15
 8005936:	4a86      	ldr	r2, [pc, #536]	; (8005b50 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 8005938:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800593c:	637b      	str	r3, [r7, #52]	; 0x34
 800593e:	e3fd      	b.n	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for I2C6 */
    else
    {
      frequency = 0U;
 8005940:	2300      	movs	r3, #0
 8005942:	637b      	str	r3, [r7, #52]	; 0x34
 8005944:	e3fa      	b.n	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 8005946:	e9d7 2300 	ldrd	r2, r3, [r7]
 800594a:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800594e:	430b      	orrs	r3, r1
 8005950:	d164      	bne.n	8005a1c <HAL_RCCEx_GetPeriphCLKFreq+0xf84>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 8005952:	4b7d      	ldr	r3, [pc, #500]	; (8005b48 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8005954:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005958:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800595c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 800595e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005960:	2b00      	cmp	r3, #0
 8005962:	d120      	bne.n	80059a6 <HAL_RCCEx_GetPeriphCLKFreq+0xf0e>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005964:	4b78      	ldr	r3, [pc, #480]	; (8005b48 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f003 0320 	and.w	r3, r3, #32
 800596c:	2b20      	cmp	r3, #32
 800596e:	d117      	bne.n	80059a0 <HAL_RCCEx_GetPeriphCLKFreq+0xf08>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005970:	4b75      	ldr	r3, [pc, #468]	; (8005b48 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8005972:	689b      	ldr	r3, [r3, #8]
 8005974:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005978:	2b00      	cmp	r3, #0
 800597a:	d005      	beq.n	8005988 <HAL_RCCEx_GetPeriphCLKFreq+0xef0>
 800597c:	4b72      	ldr	r3, [pc, #456]	; (8005b48 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800597e:	689b      	ldr	r3, [r3, #8]
 8005980:	0e1b      	lsrs	r3, r3, #24
 8005982:	f003 030f 	and.w	r3, r3, #15
 8005986:	e006      	b.n	8005996 <HAL_RCCEx_GetPeriphCLKFreq+0xefe>
 8005988:	4b6f      	ldr	r3, [pc, #444]	; (8005b48 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800598a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800598e:	041b      	lsls	r3, r3, #16
 8005990:	0e1b      	lsrs	r3, r3, #24
 8005992:	f003 030f 	and.w	r3, r3, #15
 8005996:	4a6e      	ldr	r2, [pc, #440]	; (8005b50 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 8005998:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800599c:	637b      	str	r3, [r7, #52]	; 0x34
 800599e:	e3cd      	b.n	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = 0U;
 80059a0:	2300      	movs	r3, #0
 80059a2:	637b      	str	r3, [r7, #52]	; 0x34
 80059a4:	e3ca      	b.n	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 80059a6:	4b68      	ldr	r3, [pc, #416]	; (8005b48 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80059a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80059ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80059b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80059b4:	d112      	bne.n	80059dc <HAL_RCCEx_GetPeriphCLKFreq+0xf44>
 80059b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059bc:	d10e      	bne.n	80059dc <HAL_RCCEx_GetPeriphCLKFreq+0xf44>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80059be:	4b62      	ldr	r3, [pc, #392]	; (8005b48 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80059c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80059c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059c8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80059cc:	d102      	bne.n	80059d4 <HAL_RCCEx_GetPeriphCLKFreq+0xf3c>
      {
        frequency = LSI_VALUE / 128U;
 80059ce:	23fa      	movs	r3, #250	; 0xfa
 80059d0:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80059d2:	e3b3      	b.n	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = LSI_VALUE;
 80059d4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80059d8:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80059da:	e3af      	b.n	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 80059dc:	4b5a      	ldr	r3, [pc, #360]	; (8005b48 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059e8:	d106      	bne.n	80059f8 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
 80059ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059f0:	d102      	bne.n	80059f8 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
    {
      frequency = HSI_VALUE;
 80059f2:	4b56      	ldr	r3, [pc, #344]	; (8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 80059f4:	637b      	str	r3, [r7, #52]	; 0x34
 80059f6:	e3a1      	b.n	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 80059f8:	4b53      	ldr	r3, [pc, #332]	; (8005b48 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80059fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80059fe:	f003 0302 	and.w	r3, r3, #2
 8005a02:	2b02      	cmp	r3, #2
 8005a04:	d107      	bne.n	8005a16 <HAL_RCCEx_GetPeriphCLKFreq+0xf7e>
 8005a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a08:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a0c:	d103      	bne.n	8005a16 <HAL_RCCEx_GetPeriphCLKFreq+0xf7e>
    {
      frequency = LSE_VALUE;
 8005a0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a12:	637b      	str	r3, [r7, #52]	; 0x34
 8005a14:	e392      	b.n	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 8005a16:	2300      	movs	r3, #0
 8005a18:	637b      	str	r3, [r7, #52]	; 0x34
 8005a1a:	e38f      	b.n	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 8005a1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a20:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8005a24:	430b      	orrs	r3, r1
 8005a26:	d164      	bne.n	8005af2 <HAL_RCCEx_GetPeriphCLKFreq+0x105a>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8005a28:	4b47      	ldr	r3, [pc, #284]	; (8005b48 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8005a2a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005a2e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005a32:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 8005a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d120      	bne.n	8005a7c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005a3a:	4b43      	ldr	r3, [pc, #268]	; (8005b48 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f003 0320 	and.w	r3, r3, #32
 8005a42:	2b20      	cmp	r3, #32
 8005a44:	d117      	bne.n	8005a76 <HAL_RCCEx_GetPeriphCLKFreq+0xfde>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005a46:	4b40      	ldr	r3, [pc, #256]	; (8005b48 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8005a48:	689b      	ldr	r3, [r3, #8]
 8005a4a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d005      	beq.n	8005a5e <HAL_RCCEx_GetPeriphCLKFreq+0xfc6>
 8005a52:	4b3d      	ldr	r3, [pc, #244]	; (8005b48 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8005a54:	689b      	ldr	r3, [r3, #8]
 8005a56:	0e1b      	lsrs	r3, r3, #24
 8005a58:	f003 030f 	and.w	r3, r3, #15
 8005a5c:	e006      	b.n	8005a6c <HAL_RCCEx_GetPeriphCLKFreq+0xfd4>
 8005a5e:	4b3a      	ldr	r3, [pc, #232]	; (8005b48 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8005a60:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005a64:	041b      	lsls	r3, r3, #16
 8005a66:	0e1b      	lsrs	r3, r3, #24
 8005a68:	f003 030f 	and.w	r3, r3, #15
 8005a6c:	4a38      	ldr	r2, [pc, #224]	; (8005b50 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 8005a6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a72:	637b      	str	r3, [r7, #52]	; 0x34
 8005a74:	e362      	b.n	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = 0U;
 8005a76:	2300      	movs	r3, #0
 8005a78:	637b      	str	r3, [r7, #52]	; 0x34
 8005a7a:	e35f      	b.n	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8005a7c:	4b32      	ldr	r3, [pc, #200]	; (8005b48 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8005a7e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005a82:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a86:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a8a:	d112      	bne.n	8005ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x101a>
 8005a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a92:	d10e      	bne.n	8005ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x101a>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005a94:	4b2c      	ldr	r3, [pc, #176]	; (8005b48 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8005a96:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005a9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a9e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005aa2:	d102      	bne.n	8005aaa <HAL_RCCEx_GetPeriphCLKFreq+0x1012>
      {
        frequency = LSI_VALUE / 128U;
 8005aa4:	23fa      	movs	r3, #250	; 0xfa
 8005aa6:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005aa8:	e348      	b.n	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = LSI_VALUE;
 8005aaa:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005aae:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005ab0:	e344      	b.n	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8005ab2:	4b25      	ldr	r3, [pc, #148]	; (8005b48 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005aba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005abe:	d106      	bne.n	8005ace <HAL_RCCEx_GetPeriphCLKFreq+0x1036>
 8005ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ac2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ac6:	d102      	bne.n	8005ace <HAL_RCCEx_GetPeriphCLKFreq+0x1036>
    {
      frequency = HSI_VALUE;
 8005ac8:	4b20      	ldr	r3, [pc, #128]	; (8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8005aca:	637b      	str	r3, [r7, #52]	; 0x34
 8005acc:	e336      	b.n	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8005ace:	4b1e      	ldr	r3, [pc, #120]	; (8005b48 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8005ad0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005ad4:	f003 0302 	and.w	r3, r3, #2
 8005ad8:	2b02      	cmp	r3, #2
 8005ada:	d107      	bne.n	8005aec <HAL_RCCEx_GetPeriphCLKFreq+0x1054>
 8005adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ade:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005ae2:	d103      	bne.n	8005aec <HAL_RCCEx_GetPeriphCLKFreq+0x1054>
    {
      frequency = LSE_VALUE;
 8005ae4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ae8:	637b      	str	r3, [r7, #52]	; 0x34
 8005aea:	e327      	b.n	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 8005aec:	2300      	movs	r3, #0
 8005aee:	637b      	str	r3, [r7, #52]	; 0x34
 8005af0:	e324      	b.n	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8005af2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005af6:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8005afa:	430b      	orrs	r3, r1
 8005afc:	d14e      	bne.n	8005b9c <HAL_RCCEx_GetPeriphCLKFreq+0x1104>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8005afe:	4b12      	ldr	r3, [pc, #72]	; (8005b48 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8005b00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005b04:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8005b08:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8005b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d103      	bne.n	8005b18 <HAL_RCCEx_GetPeriphCLKFreq+0x1080>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005b10:	f7fd fc0c 	bl	800332c <HAL_RCC_GetPCLK1Freq>
 8005b14:	6378      	str	r0, [r7, #52]	; 0x34
 8005b16:	e311      	b.n	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8005b18:	4b0b      	ldr	r3, [pc, #44]	; (8005b48 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8005b1a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005b1e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b22:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b26:	d119      	bne.n	8005b5c <HAL_RCCEx_GetPeriphCLKFreq+0x10c4>
 8005b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b2a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005b2e:	d115      	bne.n	8005b5c <HAL_RCCEx_GetPeriphCLKFreq+0x10c4>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005b30:	4b05      	ldr	r3, [pc, #20]	; (8005b48 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8005b32:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005b36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b3a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005b3e:	d109      	bne.n	8005b54 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>
      {
        frequency = LSI_VALUE / 128U;
 8005b40:	23fa      	movs	r3, #250	; 0xfa
 8005b42:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005b44:	e2fa      	b.n	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
 8005b46:	bf00      	nop
 8005b48:	46020c00 	.word	0x46020c00
 8005b4c:	00f42400 	.word	0x00f42400
 8005b50:	0800c3e0 	.word	0x0800c3e0
      }
      else
      {
        frequency = LSI_VALUE;
 8005b54:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005b58:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005b5a:	e2ef      	b.n	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8005b5c:	4ba8      	ldr	r3, [pc, #672]	; (8005e00 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b68:	d106      	bne.n	8005b78 <HAL_RCCEx_GetPeriphCLKFreq+0x10e0>
 8005b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b6c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005b70:	d102      	bne.n	8005b78 <HAL_RCCEx_GetPeriphCLKFreq+0x10e0>
    {
      frequency = HSI_VALUE;
 8005b72:	4ba4      	ldr	r3, [pc, #656]	; (8005e04 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8005b74:	637b      	str	r3, [r7, #52]	; 0x34
 8005b76:	e2e1      	b.n	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8005b78:	4ba1      	ldr	r3, [pc, #644]	; (8005e00 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8005b7a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005b7e:	f003 0302 	and.w	r3, r3, #2
 8005b82:	2b02      	cmp	r3, #2
 8005b84:	d107      	bne.n	8005b96 <HAL_RCCEx_GetPeriphCLKFreq+0x10fe>
 8005b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b88:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005b8c:	d103      	bne.n	8005b96 <HAL_RCCEx_GetPeriphCLKFreq+0x10fe>
    {
      frequency = LSE_VALUE;
 8005b8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b92:	637b      	str	r3, [r7, #52]	; 0x34
 8005b94:	e2d2      	b.n	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 8005b96:	2300      	movs	r3, #0
 8005b98:	637b      	str	r3, [r7, #52]	; 0x34
 8005b9a:	e2cf      	b.n	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8005b9c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ba0:	f102 4178 	add.w	r1, r2, #4160749568	; 0xf8000000
 8005ba4:	430b      	orrs	r3, r1
 8005ba6:	d12d      	bne.n	8005c04 <HAL_RCCEx_GetPeriphCLKFreq+0x116c>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8005ba8:	4b95      	ldr	r3, [pc, #596]	; (8005e00 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8005baa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005bae:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8005bb2:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8005bb4:	4b92      	ldr	r3, [pc, #584]	; (8005e00 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bbc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005bc0:	d105      	bne.n	8005bce <HAL_RCCEx_GetPeriphCLKFreq+0x1136>
 8005bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d102      	bne.n	8005bce <HAL_RCCEx_GetPeriphCLKFreq+0x1136>
    {
      frequency = HSE_VALUE;
 8005bc8:	4b8e      	ldr	r3, [pc, #568]	; (8005e04 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8005bca:	637b      	str	r3, [r7, #52]	; 0x34
 8005bcc:	e2b6      	b.n	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 8005bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bd0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005bd4:	d107      	bne.n	8005be6 <HAL_RCCEx_GetPeriphCLKFreq+0x114e>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005bd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005bda:	4618      	mov	r0, r3
 8005bdc:	f7fe fb24 	bl	8004228 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8005be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005be2:	637b      	str	r3, [r7, #52]	; 0x34
 8005be4:	e2aa      	b.n	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 8005be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005be8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005bec:	d107      	bne.n	8005bfe <HAL_RCCEx_GetPeriphCLKFreq+0x1166>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005bee:	f107 0318 	add.w	r3, r7, #24
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	f7fe fc80 	bl	80044f8 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8005bf8:	69bb      	ldr	r3, [r7, #24]
 8005bfa:	637b      	str	r3, [r7, #52]	; 0x34
 8005bfc:	e29e      	b.n	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 8005bfe:	2300      	movs	r3, #0
 8005c00:	637b      	str	r3, [r7, #52]	; 0x34
 8005c02:	e29b      	b.n	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 8005c04:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c08:	f5a2 0100 	sub.w	r1, r2, #8388608	; 0x800000
 8005c0c:	430b      	orrs	r3, r1
 8005c0e:	d156      	bne.n	8005cbe <HAL_RCCEx_GetPeriphCLKFreq+0x1226>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8005c10:	4b7b      	ldr	r3, [pc, #492]	; (8005e00 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8005c12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005c16:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005c1a:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8005c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c1e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005c22:	d028      	beq.n	8005c76 <HAL_RCCEx_GetPeriphCLKFreq+0x11de>
 8005c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c26:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005c2a:	d845      	bhi.n	8005cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1220>
 8005c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c2e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005c32:	d013      	beq.n	8005c5c <HAL_RCCEx_GetPeriphCLKFreq+0x11c4>
 8005c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c36:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005c3a:	d83d      	bhi.n	8005cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1220>
 8005c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d004      	beq.n	8005c4c <HAL_RCCEx_GetPeriphCLKFreq+0x11b4>
 8005c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c44:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c48:	d004      	beq.n	8005c54 <HAL_RCCEx_GetPeriphCLKFreq+0x11bc>
 8005c4a:	e035      	b.n	8005cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1220>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 8005c4c:	f7fd fb82 	bl	8003354 <HAL_RCC_GetPCLK2Freq>
 8005c50:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005c52:	e273      	b.n	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8005c54:	f7fd fa48 	bl	80030e8 <HAL_RCC_GetSysClockFreq>
 8005c58:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005c5a:	e26f      	b.n	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005c5c:	4b68      	ldr	r3, [pc, #416]	; (8005e00 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c68:	d102      	bne.n	8005c70 <HAL_RCCEx_GetPeriphCLKFreq+0x11d8>
        {
          frequency = HSI_VALUE;
 8005c6a:	4b66      	ldr	r3, [pc, #408]	; (8005e04 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8005c6c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005c6e:	e265      	b.n	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8005c70:	2300      	movs	r3, #0
 8005c72:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005c74:	e262      	b.n	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005c76:	4b62      	ldr	r3, [pc, #392]	; (8005e00 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f003 0320 	and.w	r3, r3, #32
 8005c7e:	2b20      	cmp	r3, #32
 8005c80:	d117      	bne.n	8005cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x121a>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005c82:	4b5f      	ldr	r3, [pc, #380]	; (8005e00 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8005c84:	689b      	ldr	r3, [r3, #8]
 8005c86:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d005      	beq.n	8005c9a <HAL_RCCEx_GetPeriphCLKFreq+0x1202>
 8005c8e:	4b5c      	ldr	r3, [pc, #368]	; (8005e00 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8005c90:	689b      	ldr	r3, [r3, #8]
 8005c92:	0e1b      	lsrs	r3, r3, #24
 8005c94:	f003 030f 	and.w	r3, r3, #15
 8005c98:	e006      	b.n	8005ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x1210>
 8005c9a:	4b59      	ldr	r3, [pc, #356]	; (8005e00 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8005c9c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005ca0:	041b      	lsls	r3, r3, #16
 8005ca2:	0e1b      	lsrs	r3, r3, #24
 8005ca4:	f003 030f 	and.w	r3, r3, #15
 8005ca8:	4a57      	ldr	r2, [pc, #348]	; (8005e08 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 8005caa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005cae:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005cb0:	e244      	b.n	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005cb6:	e241      	b.n	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 8005cb8:	2300      	movs	r3, #0
 8005cba:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005cbc:	e23e      	b.n	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 8005cbe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005cc2:	f102 417f 	add.w	r1, r2, #4278190080	; 0xff000000
 8005cc6:	430b      	orrs	r3, r1
 8005cc8:	d156      	bne.n	8005d78 <HAL_RCCEx_GetPeriphCLKFreq+0x12e0>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8005cca:	4b4d      	ldr	r3, [pc, #308]	; (8005e00 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8005ccc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005cd0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005cd4:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8005cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cd8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005cdc:	d028      	beq.n	8005d30 <HAL_RCCEx_GetPeriphCLKFreq+0x1298>
 8005cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ce0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005ce4:	d845      	bhi.n	8005d72 <HAL_RCCEx_GetPeriphCLKFreq+0x12da>
 8005ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ce8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005cec:	d013      	beq.n	8005d16 <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
 8005cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cf0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005cf4:	d83d      	bhi.n	8005d72 <HAL_RCCEx_GetPeriphCLKFreq+0x12da>
 8005cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d004      	beq.n	8005d06 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
 8005cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cfe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d02:	d004      	beq.n	8005d0e <HAL_RCCEx_GetPeriphCLKFreq+0x1276>
 8005d04:	e035      	b.n	8005d72 <HAL_RCCEx_GetPeriphCLKFreq+0x12da>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 8005d06:	f7fd fb11 	bl	800332c <HAL_RCC_GetPCLK1Freq>
 8005d0a:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005d0c:	e216      	b.n	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8005d0e:	f7fd f9eb 	bl	80030e8 <HAL_RCC_GetSysClockFreq>
 8005d12:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005d14:	e212      	b.n	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005d16:	4b3a      	ldr	r3, [pc, #232]	; (8005e00 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d22:	d102      	bne.n	8005d2a <HAL_RCCEx_GetPeriphCLKFreq+0x1292>
        {
          frequency = HSI_VALUE;
 8005d24:	4b37      	ldr	r3, [pc, #220]	; (8005e04 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8005d26:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005d28:	e208      	b.n	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005d2e:	e205      	b.n	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005d30:	4b33      	ldr	r3, [pc, #204]	; (8005e00 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f003 0320 	and.w	r3, r3, #32
 8005d38:	2b20      	cmp	r3, #32
 8005d3a:	d117      	bne.n	8005d6c <HAL_RCCEx_GetPeriphCLKFreq+0x12d4>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005d3c:	4b30      	ldr	r3, [pc, #192]	; (8005e00 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8005d3e:	689b      	ldr	r3, [r3, #8]
 8005d40:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d005      	beq.n	8005d54 <HAL_RCCEx_GetPeriphCLKFreq+0x12bc>
 8005d48:	4b2d      	ldr	r3, [pc, #180]	; (8005e00 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8005d4a:	689b      	ldr	r3, [r3, #8]
 8005d4c:	0e1b      	lsrs	r3, r3, #24
 8005d4e:	f003 030f 	and.w	r3, r3, #15
 8005d52:	e006      	b.n	8005d62 <HAL_RCCEx_GetPeriphCLKFreq+0x12ca>
 8005d54:	4b2a      	ldr	r3, [pc, #168]	; (8005e00 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8005d56:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005d5a:	041b      	lsls	r3, r3, #16
 8005d5c:	0e1b      	lsrs	r3, r3, #24
 8005d5e:	f003 030f 	and.w	r3, r3, #15
 8005d62:	4a29      	ldr	r2, [pc, #164]	; (8005e08 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 8005d64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d68:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005d6a:	e1e7      	b.n	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005d70:	e1e4      	b.n	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 8005d72:	2300      	movs	r3, #0
 8005d74:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005d76:	e1e1      	b.n	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 8005d78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d7c:	f102 417e 	add.w	r1, r2, #4261412864	; 0xfe000000
 8005d80:	430b      	orrs	r3, r1
 8005d82:	d17c      	bne.n	8005e7e <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8005d84:	4b1e      	ldr	r3, [pc, #120]	; (8005e00 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8005d86:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005d8a:	f003 0318 	and.w	r3, r3, #24
 8005d8e:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8005d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d92:	2b18      	cmp	r3, #24
 8005d94:	d870      	bhi.n	8005e78 <HAL_RCCEx_GetPeriphCLKFreq+0x13e0>
 8005d96:	a201      	add	r2, pc, #4	; (adr r2, 8005d9c <HAL_RCCEx_GetPeriphCLKFreq+0x1304>)
 8005d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d9c:	08005e0d 	.word	0x08005e0d
 8005da0:	08005e79 	.word	0x08005e79
 8005da4:	08005e79 	.word	0x08005e79
 8005da8:	08005e79 	.word	0x08005e79
 8005dac:	08005e79 	.word	0x08005e79
 8005db0:	08005e79 	.word	0x08005e79
 8005db4:	08005e79 	.word	0x08005e79
 8005db8:	08005e79 	.word	0x08005e79
 8005dbc:	08005e15 	.word	0x08005e15
 8005dc0:	08005e79 	.word	0x08005e79
 8005dc4:	08005e79 	.word	0x08005e79
 8005dc8:	08005e79 	.word	0x08005e79
 8005dcc:	08005e79 	.word	0x08005e79
 8005dd0:	08005e79 	.word	0x08005e79
 8005dd4:	08005e79 	.word	0x08005e79
 8005dd8:	08005e79 	.word	0x08005e79
 8005ddc:	08005e1d 	.word	0x08005e1d
 8005de0:	08005e79 	.word	0x08005e79
 8005de4:	08005e79 	.word	0x08005e79
 8005de8:	08005e79 	.word	0x08005e79
 8005dec:	08005e79 	.word	0x08005e79
 8005df0:	08005e79 	.word	0x08005e79
 8005df4:	08005e79 	.word	0x08005e79
 8005df8:	08005e79 	.word	0x08005e79
 8005dfc:	08005e37 	.word	0x08005e37
 8005e00:	46020c00 	.word	0x46020c00
 8005e04:	00f42400 	.word	0x00f42400
 8005e08:	0800c3e0 	.word	0x0800c3e0
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 8005e0c:	f7fd fab6 	bl	800337c <HAL_RCC_GetPCLK3Freq>
 8005e10:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005e12:	e193      	b.n	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8005e14:	f7fd f968 	bl	80030e8 <HAL_RCC_GetSysClockFreq>
 8005e18:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005e1a:	e18f      	b.n	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005e1c:	4b9f      	ldr	r3, [pc, #636]	; (800609c <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e28:	d102      	bne.n	8005e30 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
        {
          frequency = HSI_VALUE;
 8005e2a:	4b9d      	ldr	r3, [pc, #628]	; (80060a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 8005e2c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005e2e:	e185      	b.n	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8005e30:	2300      	movs	r3, #0
 8005e32:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005e34:	e182      	b.n	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005e36:	4b99      	ldr	r3, [pc, #612]	; (800609c <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f003 0320 	and.w	r3, r3, #32
 8005e3e:	2b20      	cmp	r3, #32
 8005e40:	d117      	bne.n	8005e72 <HAL_RCCEx_GetPeriphCLKFreq+0x13da>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005e42:	4b96      	ldr	r3, [pc, #600]	; (800609c <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8005e44:	689b      	ldr	r3, [r3, #8]
 8005e46:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d005      	beq.n	8005e5a <HAL_RCCEx_GetPeriphCLKFreq+0x13c2>
 8005e4e:	4b93      	ldr	r3, [pc, #588]	; (800609c <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8005e50:	689b      	ldr	r3, [r3, #8]
 8005e52:	0e1b      	lsrs	r3, r3, #24
 8005e54:	f003 030f 	and.w	r3, r3, #15
 8005e58:	e006      	b.n	8005e68 <HAL_RCCEx_GetPeriphCLKFreq+0x13d0>
 8005e5a:	4b90      	ldr	r3, [pc, #576]	; (800609c <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8005e5c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005e60:	041b      	lsls	r3, r3, #16
 8005e62:	0e1b      	lsrs	r3, r3, #24
 8005e64:	f003 030f 	and.w	r3, r3, #15
 8005e68:	4a8e      	ldr	r2, [pc, #568]	; (80060a4 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8005e6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e6e:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005e70:	e164      	b.n	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8005e72:	2300      	movs	r3, #0
 8005e74:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005e76:	e161      	b.n	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 8005e78:	2300      	movs	r3, #0
 8005e7a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005e7c:	e15e      	b.n	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 8005e7e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005e82:	f102 417c 	add.w	r1, r2, #4227858432	; 0xfc000000
 8005e86:	430b      	orrs	r3, r1
 8005e88:	d155      	bne.n	8005f36 <HAL_RCCEx_GetPeriphCLKFreq+0x149e>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8005e8a:	4b84      	ldr	r3, [pc, #528]	; (800609c <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8005e8c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005e90:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005e94:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8005e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e98:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005e9c:	d013      	beq.n	8005ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x142e>
 8005e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ea0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005ea4:	d844      	bhi.n	8005f30 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>
 8005ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ea8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005eac:	d013      	beq.n	8005ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
 8005eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eb0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005eb4:	d83c      	bhi.n	8005f30 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>
 8005eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d014      	beq.n	8005ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x144e>
 8005ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ebe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ec2:	d014      	beq.n	8005eee <HAL_RCCEx_GetPeriphCLKFreq+0x1456>
 8005ec4:	e034      	b.n	8005f30 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005ec6:	f107 0318 	add.w	r3, r7, #24
 8005eca:	4618      	mov	r0, r3
 8005ecc:	f7fe fb14 	bl	80044f8 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8005ed0:	69fb      	ldr	r3, [r7, #28]
 8005ed2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005ed4:	e132      	b.n	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005ed6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005eda:	4618      	mov	r0, r3
 8005edc:	f7fe f9a4 	bl	8004228 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8005ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ee2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005ee4:	e12a      	b.n	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8005ee6:	f7fd f8ff 	bl	80030e8 <HAL_RCC_GetSysClockFreq>
 8005eea:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005eec:	e126      	b.n	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005eee:	4b6b      	ldr	r3, [pc, #428]	; (800609c <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f003 0320 	and.w	r3, r3, #32
 8005ef6:	2b20      	cmp	r3, #32
 8005ef8:	d117      	bne.n	8005f2a <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005efa:	4b68      	ldr	r3, [pc, #416]	; (800609c <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8005efc:	689b      	ldr	r3, [r3, #8]
 8005efe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d005      	beq.n	8005f12 <HAL_RCCEx_GetPeriphCLKFreq+0x147a>
 8005f06:	4b65      	ldr	r3, [pc, #404]	; (800609c <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8005f08:	689b      	ldr	r3, [r3, #8]
 8005f0a:	0e1b      	lsrs	r3, r3, #24
 8005f0c:	f003 030f 	and.w	r3, r3, #15
 8005f10:	e006      	b.n	8005f20 <HAL_RCCEx_GetPeriphCLKFreq+0x1488>
 8005f12:	4b62      	ldr	r3, [pc, #392]	; (800609c <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8005f14:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005f18:	041b      	lsls	r3, r3, #16
 8005f1a:	0e1b      	lsrs	r3, r3, #24
 8005f1c:	f003 030f 	and.w	r3, r3, #15
 8005f20:	4a60      	ldr	r2, [pc, #384]	; (80060a4 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8005f22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f26:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005f28:	e108      	b.n	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005f2e:	e105      	b.n	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 8005f30:	2300      	movs	r3, #0
 8005f32:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005f34:	e102      	b.n	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#if defined(HSPI1)

  else if (PeriphClk == RCC_PERIPHCLK_HSPI)
 8005f36:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f3a:	1e59      	subs	r1, r3, #1
 8005f3c:	ea52 0301 	orrs.w	r3, r2, r1
 8005f40:	d13c      	bne.n	8005fbc <HAL_RCCEx_GetPeriphCLKFreq+0x1524>
  {
    /* Get the current HSPI kernel source */
    srcclk = __HAL_RCC_GET_HSPI_SOURCE();
 8005f42:	4b56      	ldr	r3, [pc, #344]	; (800609c <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8005f44:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005f48:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8005f4c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8005f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f50:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005f54:	d027      	beq.n	8005fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x150e>
 8005f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f58:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005f5c:	d82b      	bhi.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x151e>
 8005f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f60:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005f64:	d017      	beq.n	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x14fe>
 8005f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f68:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005f6c:	d823      	bhi.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x151e>
 8005f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d004      	beq.n	8005f7e <HAL_RCCEx_GetPeriphCLKFreq+0x14e6>
 8005f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005f7a:	d004      	beq.n	8005f86 <HAL_RCCEx_GetPeriphCLKFreq+0x14ee>
 8005f7c:	e01b      	b.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x151e>
    {
      case RCC_HSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8005f7e:	f7fd f8b3 	bl	80030e8 <HAL_RCC_GetSysClockFreq>
 8005f82:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005f84:	e0da      	b.n	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_HSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005f86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	f7fe f94c 	bl	8004228 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8005f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f92:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005f94:	e0d2      	b.n	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_HSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005f96:	f107 0318 	add.w	r3, r7, #24
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f7fe faac 	bl	80044f8 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8005fa0:	69fb      	ldr	r3, [r7, #28]
 8005fa2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005fa4:	e0ca      	b.n	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      case RCC_HSPICLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005fa6:	f107 030c 	add.w	r3, r7, #12
 8005faa:	4618      	mov	r0, r3
 8005fac:	f7fe fc0c 	bl	80047c8 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 8005fb0:	697b      	ldr	r3, [r7, #20]
 8005fb2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005fb4:	e0c2      	b.n	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005fba:	e0bf      	b.n	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 8005fbc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005fc0:	f102 4170 	add.w	r1, r2, #4026531840	; 0xf0000000
 8005fc4:	430b      	orrs	r3, r1
 8005fc6:	d131      	bne.n	800602c <HAL_RCCEx_GetPeriphCLKFreq+0x1594>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 8005fc8:	4b34      	ldr	r3, [pc, #208]	; (800609c <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8005fca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005fce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005fd2:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 8005fd4:	4b31      	ldr	r3, [pc, #196]	; (800609c <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8005fd6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005fda:	f003 0302 	and.w	r3, r3, #2
 8005fde:	2b02      	cmp	r3, #2
 8005fe0:	d106      	bne.n	8005ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x1558>
 8005fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d103      	bne.n	8005ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x1558>
    {
      frequency = LSE_VALUE;
 8005fe8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005fec:	637b      	str	r3, [r7, #52]	; 0x34
 8005fee:	e0a5      	b.n	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8005ff0:	4b2a      	ldr	r3, [pc, #168]	; (800609c <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8005ff2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005ff6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ffa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ffe:	d112      	bne.n	8006026 <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
 8006000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006002:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006006:	d10e      	bne.n	8006026 <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006008:	4b24      	ldr	r3, [pc, #144]	; (800609c <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 800600a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800600e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006012:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006016:	d102      	bne.n	800601e <HAL_RCCEx_GetPeriphCLKFreq+0x1586>
      {
        frequency = LSI_VALUE / 128U;
 8006018:	23fa      	movs	r3, #250	; 0xfa
 800601a:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800601c:	e08e      	b.n	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = LSI_VALUE;
 800601e:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006022:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006024:	e08a      	b.n	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 8006026:	2300      	movs	r3, #0
 8006028:	637b      	str	r3, [r7, #52]	; 0x34
 800602a:	e087      	b.n	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 800602c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006030:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8006034:	430b      	orrs	r3, r1
 8006036:	d13b      	bne.n	80060b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1618>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8006038:	4b18      	ldr	r3, [pc, #96]	; (800609c <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 800603a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800603e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006042:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8006044:	4b15      	ldr	r3, [pc, #84]	; (800609c <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800604c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006050:	d105      	bne.n	800605e <HAL_RCCEx_GetPeriphCLKFreq+0x15c6>
 8006052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006054:	2b00      	cmp	r3, #0
 8006056:	d102      	bne.n	800605e <HAL_RCCEx_GetPeriphCLKFreq+0x15c6>
    {
      frequency = HSI48_VALUE;
 8006058:	4b13      	ldr	r3, [pc, #76]	; (80060a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 800605a:	637b      	str	r3, [r7, #52]	; 0x34
 800605c:	e06e      	b.n	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 800605e:	4b0f      	ldr	r3, [pc, #60]	; (800609c <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006066:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800606a:	d106      	bne.n	800607a <HAL_RCCEx_GetPeriphCLKFreq+0x15e2>
 800606c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800606e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006072:	d102      	bne.n	800607a <HAL_RCCEx_GetPeriphCLKFreq+0x15e2>
    {
      frequency = HSI48_VALUE >> 1U ;
 8006074:	4b0d      	ldr	r3, [pc, #52]	; (80060ac <HAL_RCCEx_GetPeriphCLKFreq+0x1614>)
 8006076:	637b      	str	r3, [r7, #52]	; 0x34
 8006078:	e060      	b.n	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 800607a:	4b08      	ldr	r3, [pc, #32]	; (800609c <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006082:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006086:	d106      	bne.n	8006096 <HAL_RCCEx_GetPeriphCLKFreq+0x15fe>
 8006088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800608a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800608e:	d102      	bne.n	8006096 <HAL_RCCEx_GetPeriphCLKFreq+0x15fe>
    {
      frequency = HSI_VALUE;
 8006090:	4b03      	ldr	r3, [pc, #12]	; (80060a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 8006092:	637b      	str	r3, [r7, #52]	; 0x34
 8006094:	e052      	b.n	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 8006096:	2300      	movs	r3, #0
 8006098:	637b      	str	r3, [r7, #52]	; 0x34
 800609a:	e04f      	b.n	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
 800609c:	46020c00 	.word	0x46020c00
 80060a0:	00f42400 	.word	0x00f42400
 80060a4:	0800c3e0 	.word	0x0800c3e0
 80060a8:	02dc6c00 	.word	0x02dc6c00
 80060ac:	016e3600 	.word	0x016e3600
  }
#endif /* defined(LTDC) */

#if defined(USB_OTG_HS)

  else if (PeriphClk == RCC_PERIPHCLK_USBPHY)
 80060b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80060b4:	f1a3 0108 	sub.w	r1, r3, #8
 80060b8:	ea52 0301 	orrs.w	r3, r2, r1
 80060bc:	d13c      	bne.n	8006138 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
  {
    /* Get the current USB_OTG_HS kernel source */
    srcclk = __HAL_RCC_GET_USBPHY_SOURCE();
 80060be:	4b22      	ldr	r3, [pc, #136]	; (8006148 <HAL_RCCEx_GetPeriphCLKFreq+0x16b0>)
 80060c0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80060c4:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80060c8:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE))
 80060ca:	4b1f      	ldr	r3, [pc, #124]	; (8006148 <HAL_RCCEx_GetPeriphCLKFreq+0x16b0>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060d2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80060d6:	d105      	bne.n	80060e4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
 80060d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d102      	bne.n	80060e4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    {
      frequency = HSE_VALUE;
 80060de:	4b1b      	ldr	r3, [pc, #108]	; (800614c <HAL_RCCEx_GetPeriphCLKFreq+0x16b4>)
 80060e0:	637b      	str	r3, [r7, #52]	; 0x34
 80060e2:	e02b      	b.n	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE_DIV2))
 80060e4:	4b18      	ldr	r3, [pc, #96]	; (8006148 <HAL_RCCEx_GetPeriphCLKFreq+0x16b0>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80060f0:	d106      	bne.n	8006100 <HAL_RCCEx_GetPeriphCLKFreq+0x1668>
 80060f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80060f8:	d102      	bne.n	8006100 <HAL_RCCEx_GetPeriphCLKFreq+0x1668>
    {
      frequency = HSE_VALUE >> 1U ;
 80060fa:	4b15      	ldr	r3, [pc, #84]	; (8006150 <HAL_RCCEx_GetPeriphCLKFreq+0x16b8>)
 80060fc:	637b      	str	r3, [r7, #52]	; 0x34
 80060fe:	e01d      	b.n	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1) /* PLL1P */
 8006100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006102:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006106:	d107      	bne.n	8006118 <HAL_RCCEx_GetPeriphCLKFreq+0x1680>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006108:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800610c:	4618      	mov	r0, r3
 800610e:	f7fe f88b 	bl	8004228 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8006112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006114:	637b      	str	r3, [r7, #52]	; 0x34
 8006116:	e011      	b.n	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1_DIV2) /* PLL1P_DIV2 */
 8006118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800611a:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800611e:	d108      	bne.n	8006132 <HAL_RCCEx_GetPeriphCLKFreq+0x169a>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006120:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006124:	4618      	mov	r0, r3
 8006126:	f7fe f87f 	bl	8004228 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = (pll1_clocks.PLL1_P_Frequency) / 2U;
 800612a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800612c:	085b      	lsrs	r3, r3, #1
 800612e:	637b      	str	r3, [r7, #52]	; 0x34
 8006130:	e004      	b.n	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for USB_OTG_HS */
    else
    {
      frequency = 0U;
 8006132:	2300      	movs	r3, #0
 8006134:	637b      	str	r3, [r7, #52]	; 0x34
 8006136:	e001      	b.n	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 8006138:	2300      	movs	r3, #0
 800613a:	637b      	str	r3, [r7, #52]	; 0x34
  }
  return (frequency);
 800613c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800613e:	4618      	mov	r0, r3
 8006140:	3738      	adds	r7, #56	; 0x38
 8006142:	46bd      	mov	sp, r7
 8006144:	bd80      	pop	{r7, pc}
 8006146:	bf00      	nop
 8006148:	46020c00 	.word	0x46020c00
 800614c:	00f42400 	.word	0x00f42400
 8006150:	007a1200 	.word	0x007a1200

08006154 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b084      	sub	sp, #16
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 800615c:	4b47      	ldr	r3, [pc, #284]	; (800627c <RCCEx_PLL2_Config+0x128>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4a46      	ldr	r2, [pc, #280]	; (800627c <RCCEx_PLL2_Config+0x128>)
 8006162:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006166:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006168:	f7fa fa9a 	bl	80006a0 <HAL_GetTick>
 800616c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800616e:	e008      	b.n	8006182 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006170:	f7fa fa96 	bl	80006a0 <HAL_GetTick>
 8006174:	4602      	mov	r2, r0
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	1ad3      	subs	r3, r2, r3
 800617a:	2b02      	cmp	r3, #2
 800617c:	d901      	bls.n	8006182 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800617e:	2303      	movs	r3, #3
 8006180:	e077      	b.n	8006272 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006182:	4b3e      	ldr	r3, [pc, #248]	; (800627c <RCCEx_PLL2_Config+0x128>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800618a:	2b00      	cmp	r3, #0
 800618c:	d1f0      	bne.n	8006170 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800618e:	4b3b      	ldr	r3, [pc, #236]	; (800627c <RCCEx_PLL2_Config+0x128>)
 8006190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006192:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006196:	f023 0303 	bic.w	r3, r3, #3
 800619a:	687a      	ldr	r2, [r7, #4]
 800619c:	6811      	ldr	r1, [r2, #0]
 800619e:	687a      	ldr	r2, [r7, #4]
 80061a0:	6852      	ldr	r2, [r2, #4]
 80061a2:	3a01      	subs	r2, #1
 80061a4:	0212      	lsls	r2, r2, #8
 80061a6:	430a      	orrs	r2, r1
 80061a8:	4934      	ldr	r1, [pc, #208]	; (800627c <RCCEx_PLL2_Config+0x128>)
 80061aa:	4313      	orrs	r3, r2
 80061ac:	62cb      	str	r3, [r1, #44]	; 0x2c
 80061ae:	4b33      	ldr	r3, [pc, #204]	; (800627c <RCCEx_PLL2_Config+0x128>)
 80061b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80061b2:	4b33      	ldr	r3, [pc, #204]	; (8006280 <RCCEx_PLL2_Config+0x12c>)
 80061b4:	4013      	ands	r3, r2
 80061b6:	687a      	ldr	r2, [r7, #4]
 80061b8:	6892      	ldr	r2, [r2, #8]
 80061ba:	3a01      	subs	r2, #1
 80061bc:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80061c0:	687a      	ldr	r2, [r7, #4]
 80061c2:	68d2      	ldr	r2, [r2, #12]
 80061c4:	3a01      	subs	r2, #1
 80061c6:	0252      	lsls	r2, r2, #9
 80061c8:	b292      	uxth	r2, r2
 80061ca:	4311      	orrs	r1, r2
 80061cc:	687a      	ldr	r2, [r7, #4]
 80061ce:	6912      	ldr	r2, [r2, #16]
 80061d0:	3a01      	subs	r2, #1
 80061d2:	0412      	lsls	r2, r2, #16
 80061d4:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80061d8:	4311      	orrs	r1, r2
 80061da:	687a      	ldr	r2, [r7, #4]
 80061dc:	6952      	ldr	r2, [r2, #20]
 80061de:	3a01      	subs	r2, #1
 80061e0:	0612      	lsls	r2, r2, #24
 80061e2:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80061e6:	430a      	orrs	r2, r1
 80061e8:	4924      	ldr	r1, [pc, #144]	; (800627c <RCCEx_PLL2_Config+0x128>)
 80061ea:	4313      	orrs	r3, r2
 80061ec:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 80061ee:	4b23      	ldr	r3, [pc, #140]	; (800627c <RCCEx_PLL2_Config+0x128>)
 80061f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061f2:	f023 020c 	bic.w	r2, r3, #12
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	699b      	ldr	r3, [r3, #24]
 80061fa:	4920      	ldr	r1, [pc, #128]	; (800627c <RCCEx_PLL2_Config+0x128>)
 80061fc:	4313      	orrs	r3, r2
 80061fe:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8006200:	4b1e      	ldr	r3, [pc, #120]	; (800627c <RCCEx_PLL2_Config+0x128>)
 8006202:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6a1b      	ldr	r3, [r3, #32]
 8006208:	491c      	ldr	r1, [pc, #112]	; (800627c <RCCEx_PLL2_Config+0x128>)
 800620a:	4313      	orrs	r3, r2
 800620c:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 800620e:	4b1b      	ldr	r3, [pc, #108]	; (800627c <RCCEx_PLL2_Config+0x128>)
 8006210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006212:	4a1a      	ldr	r2, [pc, #104]	; (800627c <RCCEx_PLL2_Config+0x128>)
 8006214:	f023 0310 	bic.w	r3, r3, #16
 8006218:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800621a:	4b18      	ldr	r3, [pc, #96]	; (800627c <RCCEx_PLL2_Config+0x128>)
 800621c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800621e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006222:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8006226:	687a      	ldr	r2, [r7, #4]
 8006228:	69d2      	ldr	r2, [r2, #28]
 800622a:	00d2      	lsls	r2, r2, #3
 800622c:	4913      	ldr	r1, [pc, #76]	; (800627c <RCCEx_PLL2_Config+0x128>)
 800622e:	4313      	orrs	r3, r2
 8006230:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8006232:	4b12      	ldr	r3, [pc, #72]	; (800627c <RCCEx_PLL2_Config+0x128>)
 8006234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006236:	4a11      	ldr	r2, [pc, #68]	; (800627c <RCCEx_PLL2_Config+0x128>)
 8006238:	f043 0310 	orr.w	r3, r3, #16
 800623c:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 800623e:	4b0f      	ldr	r3, [pc, #60]	; (800627c <RCCEx_PLL2_Config+0x128>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a0e      	ldr	r2, [pc, #56]	; (800627c <RCCEx_PLL2_Config+0x128>)
 8006244:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006248:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800624a:	f7fa fa29 	bl	80006a0 <HAL_GetTick>
 800624e:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006250:	e008      	b.n	8006264 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006252:	f7fa fa25 	bl	80006a0 <HAL_GetTick>
 8006256:	4602      	mov	r2, r0
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	1ad3      	subs	r3, r2, r3
 800625c:	2b02      	cmp	r3, #2
 800625e:	d901      	bls.n	8006264 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8006260:	2303      	movs	r3, #3
 8006262:	e006      	b.n	8006272 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006264:	4b05      	ldr	r3, [pc, #20]	; (800627c <RCCEx_PLL2_Config+0x128>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800626c:	2b00      	cmp	r3, #0
 800626e:	d0f0      	beq.n	8006252 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8006270:	2300      	movs	r3, #0

}
 8006272:	4618      	mov	r0, r3
 8006274:	3710      	adds	r7, #16
 8006276:	46bd      	mov	sp, r7
 8006278:	bd80      	pop	{r7, pc}
 800627a:	bf00      	nop
 800627c:	46020c00 	.word	0x46020c00
 8006280:	80800000 	.word	0x80800000

08006284 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b084      	sub	sp, #16
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 800628c:	4b47      	ldr	r3, [pc, #284]	; (80063ac <RCCEx_PLL3_Config+0x128>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a46      	ldr	r2, [pc, #280]	; (80063ac <RCCEx_PLL3_Config+0x128>)
 8006292:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006296:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006298:	f7fa fa02 	bl	80006a0 <HAL_GetTick>
 800629c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800629e:	e008      	b.n	80062b2 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80062a0:	f7fa f9fe 	bl	80006a0 <HAL_GetTick>
 80062a4:	4602      	mov	r2, r0
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	1ad3      	subs	r3, r2, r3
 80062aa:	2b02      	cmp	r3, #2
 80062ac:	d901      	bls.n	80062b2 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80062ae:	2303      	movs	r3, #3
 80062b0:	e077      	b.n	80063a2 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80062b2:	4b3e      	ldr	r3, [pc, #248]	; (80063ac <RCCEx_PLL3_Config+0x128>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d1f0      	bne.n	80062a0 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 80062be:	4b3b      	ldr	r3, [pc, #236]	; (80063ac <RCCEx_PLL3_Config+0x128>)
 80062c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062c2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80062c6:	f023 0303 	bic.w	r3, r3, #3
 80062ca:	687a      	ldr	r2, [r7, #4]
 80062cc:	6811      	ldr	r1, [r2, #0]
 80062ce:	687a      	ldr	r2, [r7, #4]
 80062d0:	6852      	ldr	r2, [r2, #4]
 80062d2:	3a01      	subs	r2, #1
 80062d4:	0212      	lsls	r2, r2, #8
 80062d6:	430a      	orrs	r2, r1
 80062d8:	4934      	ldr	r1, [pc, #208]	; (80063ac <RCCEx_PLL3_Config+0x128>)
 80062da:	4313      	orrs	r3, r2
 80062dc:	630b      	str	r3, [r1, #48]	; 0x30
 80062de:	4b33      	ldr	r3, [pc, #204]	; (80063ac <RCCEx_PLL3_Config+0x128>)
 80062e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80062e2:	4b33      	ldr	r3, [pc, #204]	; (80063b0 <RCCEx_PLL3_Config+0x12c>)
 80062e4:	4013      	ands	r3, r2
 80062e6:	687a      	ldr	r2, [r7, #4]
 80062e8:	6892      	ldr	r2, [r2, #8]
 80062ea:	3a01      	subs	r2, #1
 80062ec:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80062f0:	687a      	ldr	r2, [r7, #4]
 80062f2:	68d2      	ldr	r2, [r2, #12]
 80062f4:	3a01      	subs	r2, #1
 80062f6:	0252      	lsls	r2, r2, #9
 80062f8:	b292      	uxth	r2, r2
 80062fa:	4311      	orrs	r1, r2
 80062fc:	687a      	ldr	r2, [r7, #4]
 80062fe:	6912      	ldr	r2, [r2, #16]
 8006300:	3a01      	subs	r2, #1
 8006302:	0412      	lsls	r2, r2, #16
 8006304:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8006308:	4311      	orrs	r1, r2
 800630a:	687a      	ldr	r2, [r7, #4]
 800630c:	6952      	ldr	r2, [r2, #20]
 800630e:	3a01      	subs	r2, #1
 8006310:	0612      	lsls	r2, r2, #24
 8006312:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8006316:	430a      	orrs	r2, r1
 8006318:	4924      	ldr	r1, [pc, #144]	; (80063ac <RCCEx_PLL3_Config+0x128>)
 800631a:	4313      	orrs	r3, r2
 800631c:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 800631e:	4b23      	ldr	r3, [pc, #140]	; (80063ac <RCCEx_PLL3_Config+0x128>)
 8006320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006322:	f023 020c 	bic.w	r2, r3, #12
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	699b      	ldr	r3, [r3, #24]
 800632a:	4920      	ldr	r1, [pc, #128]	; (80063ac <RCCEx_PLL3_Config+0x128>)
 800632c:	4313      	orrs	r3, r2
 800632e:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8006330:	4b1e      	ldr	r3, [pc, #120]	; (80063ac <RCCEx_PLL3_Config+0x128>)
 8006332:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6a1b      	ldr	r3, [r3, #32]
 8006338:	491c      	ldr	r1, [pc, #112]	; (80063ac <RCCEx_PLL3_Config+0x128>)
 800633a:	4313      	orrs	r3, r2
 800633c:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 800633e:	4b1b      	ldr	r3, [pc, #108]	; (80063ac <RCCEx_PLL3_Config+0x128>)
 8006340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006342:	4a1a      	ldr	r2, [pc, #104]	; (80063ac <RCCEx_PLL3_Config+0x128>)
 8006344:	f023 0310 	bic.w	r3, r3, #16
 8006348:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800634a:	4b18      	ldr	r3, [pc, #96]	; (80063ac <RCCEx_PLL3_Config+0x128>)
 800634c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800634e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006352:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8006356:	687a      	ldr	r2, [r7, #4]
 8006358:	69d2      	ldr	r2, [r2, #28]
 800635a:	00d2      	lsls	r2, r2, #3
 800635c:	4913      	ldr	r1, [pc, #76]	; (80063ac <RCCEx_PLL3_Config+0x128>)
 800635e:	4313      	orrs	r3, r2
 8006360:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8006362:	4b12      	ldr	r3, [pc, #72]	; (80063ac <RCCEx_PLL3_Config+0x128>)
 8006364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006366:	4a11      	ldr	r2, [pc, #68]	; (80063ac <RCCEx_PLL3_Config+0x128>)
 8006368:	f043 0310 	orr.w	r3, r3, #16
 800636c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 800636e:	4b0f      	ldr	r3, [pc, #60]	; (80063ac <RCCEx_PLL3_Config+0x128>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4a0e      	ldr	r2, [pc, #56]	; (80063ac <RCCEx_PLL3_Config+0x128>)
 8006374:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006378:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800637a:	f7fa f991 	bl	80006a0 <HAL_GetTick>
 800637e:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006380:	e008      	b.n	8006394 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006382:	f7fa f98d 	bl	80006a0 <HAL_GetTick>
 8006386:	4602      	mov	r2, r0
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	1ad3      	subs	r3, r2, r3
 800638c:	2b02      	cmp	r3, #2
 800638e:	d901      	bls.n	8006394 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8006390:	2303      	movs	r3, #3
 8006392:	e006      	b.n	80063a2 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006394:	4b05      	ldr	r3, [pc, #20]	; (80063ac <RCCEx_PLL3_Config+0x128>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800639c:	2b00      	cmp	r3, #0
 800639e:	d0f0      	beq.n	8006382 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 80063a0:	2300      	movs	r3, #0
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	3710      	adds	r7, #16
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}
 80063aa:	bf00      	nop
 80063ac:	46020c00 	.word	0x46020c00
 80063b0:	80800000 	.word	0x80800000

080063b4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b082      	sub	sp, #8
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d101      	bne.n	80063c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80063c2:	2301      	movs	r3, #1
 80063c4:	e042      	b.n	800644c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d106      	bne.n	80063de <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2200      	movs	r2, #0
 80063d4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80063d8:	6878      	ldr	r0, [r7, #4]
 80063da:	f003 f8c9 	bl	8009570 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2224      	movs	r2, #36	; 0x24
 80063e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	681a      	ldr	r2, [r3, #0]
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f022 0201 	bic.w	r2, r2, #1
 80063f4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80063f6:	6878      	ldr	r0, [r7, #4]
 80063f8:	f000 fc38 	bl	8006c6c <UART_SetConfig>
 80063fc:	4603      	mov	r3, r0
 80063fe:	2b01      	cmp	r3, #1
 8006400:	d101      	bne.n	8006406 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006402:	2301      	movs	r3, #1
 8006404:	e022      	b.n	800644c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800640a:	2b00      	cmp	r3, #0
 800640c:	d002      	beq.n	8006414 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	f000 fdda 	bl	8006fc8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	685a      	ldr	r2, [r3, #4]
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006422:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	689a      	ldr	r2, [r3, #8]
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006432:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	681a      	ldr	r2, [r3, #0]
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f042 0201 	orr.w	r2, r2, #1
 8006442:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006444:	6878      	ldr	r0, [r7, #4]
 8006446:	f000 fe61 	bl	800710c <UART_CheckIdleState>
 800644a:	4603      	mov	r3, r0
}
 800644c:	4618      	mov	r0, r3
 800644e:	3708      	adds	r7, #8
 8006450:	46bd      	mov	sp, r7
 8006452:	bd80      	pop	{r7, pc}

08006454 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b08a      	sub	sp, #40	; 0x28
 8006458:	af02      	add	r7, sp, #8
 800645a:	60f8      	str	r0, [r7, #12]
 800645c:	60b9      	str	r1, [r7, #8]
 800645e:	603b      	str	r3, [r7, #0]
 8006460:	4613      	mov	r3, r2
 8006462:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800646a:	2b20      	cmp	r3, #32
 800646c:	d17b      	bne.n	8006566 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800646e:	68bb      	ldr	r3, [r7, #8]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d002      	beq.n	800647a <HAL_UART_Transmit+0x26>
 8006474:	88fb      	ldrh	r3, [r7, #6]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d101      	bne.n	800647e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800647a:	2301      	movs	r3, #1
 800647c:	e074      	b.n	8006568 <HAL_UART_Transmit+0x114>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	2200      	movs	r2, #0
 8006482:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	2221      	movs	r2, #33	; 0x21
 800648a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800648e:	f7fa f907 	bl	80006a0 <HAL_GetTick>
 8006492:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	88fa      	ldrh	r2, [r7, #6]
 8006498:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	88fa      	ldrh	r2, [r7, #6]
 80064a0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	689b      	ldr	r3, [r3, #8]
 80064a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064ac:	d108      	bne.n	80064c0 <HAL_UART_Transmit+0x6c>
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	691b      	ldr	r3, [r3, #16]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d104      	bne.n	80064c0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80064b6:	2300      	movs	r3, #0
 80064b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	61bb      	str	r3, [r7, #24]
 80064be:	e003      	b.n	80064c8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80064c4:	2300      	movs	r3, #0
 80064c6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80064c8:	e030      	b.n	800652c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	9300      	str	r3, [sp, #0]
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	2200      	movs	r2, #0
 80064d2:	2180      	movs	r1, #128	; 0x80
 80064d4:	68f8      	ldr	r0, [r7, #12]
 80064d6:	f000 fec3 	bl	8007260 <UART_WaitOnFlagUntilTimeout>
 80064da:	4603      	mov	r3, r0
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d005      	beq.n	80064ec <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	2220      	movs	r2, #32
 80064e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80064e8:	2303      	movs	r3, #3
 80064ea:	e03d      	b.n	8006568 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80064ec:	69fb      	ldr	r3, [r7, #28]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d10b      	bne.n	800650a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80064f2:	69bb      	ldr	r3, [r7, #24]
 80064f4:	881b      	ldrh	r3, [r3, #0]
 80064f6:	461a      	mov	r2, r3
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006500:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006502:	69bb      	ldr	r3, [r7, #24]
 8006504:	3302      	adds	r3, #2
 8006506:	61bb      	str	r3, [r7, #24]
 8006508:	e007      	b.n	800651a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800650a:	69fb      	ldr	r3, [r7, #28]
 800650c:	781a      	ldrb	r2, [r3, #0]
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006514:	69fb      	ldr	r3, [r7, #28]
 8006516:	3301      	adds	r3, #1
 8006518:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006520:	b29b      	uxth	r3, r3
 8006522:	3b01      	subs	r3, #1
 8006524:	b29a      	uxth	r2, r3
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006532:	b29b      	uxth	r3, r3
 8006534:	2b00      	cmp	r3, #0
 8006536:	d1c8      	bne.n	80064ca <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	9300      	str	r3, [sp, #0]
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	2200      	movs	r2, #0
 8006540:	2140      	movs	r1, #64	; 0x40
 8006542:	68f8      	ldr	r0, [r7, #12]
 8006544:	f000 fe8c 	bl	8007260 <UART_WaitOnFlagUntilTimeout>
 8006548:	4603      	mov	r3, r0
 800654a:	2b00      	cmp	r3, #0
 800654c:	d005      	beq.n	800655a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	2220      	movs	r2, #32
 8006552:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8006556:	2303      	movs	r3, #3
 8006558:	e006      	b.n	8006568 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	2220      	movs	r2, #32
 800655e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8006562:	2300      	movs	r3, #0
 8006564:	e000      	b.n	8006568 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006566:	2302      	movs	r3, #2
  }
}
 8006568:	4618      	mov	r0, r3
 800656a:	3720      	adds	r7, #32
 800656c:	46bd      	mov	sp, r7
 800656e:	bd80      	pop	{r7, pc}

08006570 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b08a      	sub	sp, #40	; 0x28
 8006574:	af00      	add	r7, sp, #0
 8006576:	60f8      	str	r0, [r7, #12]
 8006578:	60b9      	str	r1, [r7, #8]
 800657a:	4613      	mov	r3, r2
 800657c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006584:	2b20      	cmp	r3, #32
 8006586:	d13c      	bne.n	8006602 <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d002      	beq.n	8006594 <HAL_UART_Receive_IT+0x24>
 800658e:	88fb      	ldrh	r3, [r7, #6]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d101      	bne.n	8006598 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006594:	2301      	movs	r3, #1
 8006596:	e035      	b.n	8006604 <HAL_UART_Receive_IT+0x94>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	2200      	movs	r2, #0
 800659c:	66da      	str	r2, [r3, #108]	; 0x6c
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	4a1a      	ldr	r2, [pc, #104]	; (800660c <HAL_UART_Receive_IT+0x9c>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d024      	beq.n	80065f2 <HAL_UART_Receive_IT+0x82>
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4a18      	ldr	r2, [pc, #96]	; (8006610 <HAL_UART_Receive_IT+0xa0>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d01f      	beq.n	80065f2 <HAL_UART_Receive_IT+0x82>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	685b      	ldr	r3, [r3, #4]
 80065b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d018      	beq.n	80065f2 <HAL_UART_Receive_IT+0x82>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065c6:	697b      	ldr	r3, [r7, #20]
 80065c8:	e853 3f00 	ldrex	r3, [r3]
 80065cc:	613b      	str	r3, [r7, #16]
   return(result);
 80065ce:	693b      	ldr	r3, [r7, #16]
 80065d0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80065d4:	627b      	str	r3, [r7, #36]	; 0x24
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	461a      	mov	r2, r3
 80065dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065de:	623b      	str	r3, [r7, #32]
 80065e0:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065e2:	69f9      	ldr	r1, [r7, #28]
 80065e4:	6a3a      	ldr	r2, [r7, #32]
 80065e6:	e841 2300 	strex	r3, r2, [r1]
 80065ea:	61bb      	str	r3, [r7, #24]
   return(result);
 80065ec:	69bb      	ldr	r3, [r7, #24]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d1e6      	bne.n	80065c0 <HAL_UART_Receive_IT+0x50>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80065f2:	88fb      	ldrh	r3, [r7, #6]
 80065f4:	461a      	mov	r2, r3
 80065f6:	68b9      	ldr	r1, [r7, #8]
 80065f8:	68f8      	ldr	r0, [r7, #12]
 80065fa:	f000 fe99 	bl	8007330 <UART_Start_Receive_IT>
 80065fe:	4603      	mov	r3, r0
 8006600:	e000      	b.n	8006604 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006602:	2302      	movs	r3, #2
  }
}
 8006604:	4618      	mov	r0, r3
 8006606:	3728      	adds	r7, #40	; 0x28
 8006608:	46bd      	mov	sp, r7
 800660a:	bd80      	pop	{r7, pc}
 800660c:	46002400 	.word	0x46002400
 8006610:	56002400 	.word	0x56002400

08006614 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b0ba      	sub	sp, #232	; 0xe8
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	69db      	ldr	r3, [r3, #28]
 8006622:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	689b      	ldr	r3, [r3, #8]
 8006636:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800663a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800663e:	f640 030f 	movw	r3, #2063	; 0x80f
 8006642:	4013      	ands	r3, r2
 8006644:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006648:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800664c:	2b00      	cmp	r3, #0
 800664e:	d11b      	bne.n	8006688 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006650:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006654:	f003 0320 	and.w	r3, r3, #32
 8006658:	2b00      	cmp	r3, #0
 800665a:	d015      	beq.n	8006688 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800665c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006660:	f003 0320 	and.w	r3, r3, #32
 8006664:	2b00      	cmp	r3, #0
 8006666:	d105      	bne.n	8006674 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006668:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800666c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006670:	2b00      	cmp	r3, #0
 8006672:	d009      	beq.n	8006688 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006678:	2b00      	cmp	r3, #0
 800667a:	f000 82cb 	beq.w	8006c14 <HAL_UART_IRQHandler+0x600>
      {
        huart->RxISR(huart);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	4798      	blx	r3
      }
      return;
 8006686:	e2c5      	b.n	8006c14 <HAL_UART_IRQHandler+0x600>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006688:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800668c:	2b00      	cmp	r3, #0
 800668e:	f000 8123 	beq.w	80068d8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006692:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006696:	4b8d      	ldr	r3, [pc, #564]	; (80068cc <HAL_UART_IRQHandler+0x2b8>)
 8006698:	4013      	ands	r3, r2
 800669a:	2b00      	cmp	r3, #0
 800669c:	d106      	bne.n	80066ac <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800669e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80066a2:	4b8b      	ldr	r3, [pc, #556]	; (80068d0 <HAL_UART_IRQHandler+0x2bc>)
 80066a4:	4013      	ands	r3, r2
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	f000 8116 	beq.w	80068d8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80066ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066b0:	f003 0301 	and.w	r3, r3, #1
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d011      	beq.n	80066dc <HAL_UART_IRQHandler+0xc8>
 80066b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d00b      	beq.n	80066dc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	2201      	movs	r2, #1
 80066ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066d2:	f043 0201 	orr.w	r2, r3, #1
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80066dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066e0:	f003 0302 	and.w	r3, r3, #2
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d011      	beq.n	800670c <HAL_UART_IRQHandler+0xf8>
 80066e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80066ec:	f003 0301 	and.w	r3, r3, #1
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d00b      	beq.n	800670c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	2202      	movs	r2, #2
 80066fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006702:	f043 0204 	orr.w	r2, r3, #4
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800670c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006710:	f003 0304 	and.w	r3, r3, #4
 8006714:	2b00      	cmp	r3, #0
 8006716:	d011      	beq.n	800673c <HAL_UART_IRQHandler+0x128>
 8006718:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800671c:	f003 0301 	and.w	r3, r3, #1
 8006720:	2b00      	cmp	r3, #0
 8006722:	d00b      	beq.n	800673c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	2204      	movs	r2, #4
 800672a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006732:	f043 0202 	orr.w	r2, r3, #2
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800673c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006740:	f003 0308 	and.w	r3, r3, #8
 8006744:	2b00      	cmp	r3, #0
 8006746:	d017      	beq.n	8006778 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006748:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800674c:	f003 0320 	and.w	r3, r3, #32
 8006750:	2b00      	cmp	r3, #0
 8006752:	d105      	bne.n	8006760 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006754:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006758:	4b5c      	ldr	r3, [pc, #368]	; (80068cc <HAL_UART_IRQHandler+0x2b8>)
 800675a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800675c:	2b00      	cmp	r3, #0
 800675e:	d00b      	beq.n	8006778 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	2208      	movs	r2, #8
 8006766:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800676e:	f043 0208 	orr.w	r2, r3, #8
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006778:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800677c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006780:	2b00      	cmp	r3, #0
 8006782:	d012      	beq.n	80067aa <HAL_UART_IRQHandler+0x196>
 8006784:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006788:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800678c:	2b00      	cmp	r3, #0
 800678e:	d00c      	beq.n	80067aa <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006798:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067a0:	f043 0220 	orr.w	r2, r3, #32
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	f000 8231 	beq.w	8006c18 <HAL_UART_IRQHandler+0x604>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80067b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067ba:	f003 0320 	and.w	r3, r3, #32
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d013      	beq.n	80067ea <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80067c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067c6:	f003 0320 	and.w	r3, r3, #32
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d105      	bne.n	80067da <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80067ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80067d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d007      	beq.n	80067ea <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d003      	beq.n	80067ea <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067f0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	689b      	ldr	r3, [r3, #8]
 80067fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067fe:	2b40      	cmp	r3, #64	; 0x40
 8006800:	d005      	beq.n	800680e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006802:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006806:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800680a:	2b00      	cmp	r3, #0
 800680c:	d054      	beq.n	80068b8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800680e:	6878      	ldr	r0, [r7, #4]
 8006810:	f000 feb0 	bl	8007574 <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	689b      	ldr	r3, [r3, #8]
 800681a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800681e:	2b40      	cmp	r3, #64	; 0x40
 8006820:	d146      	bne.n	80068b0 <HAL_UART_IRQHandler+0x29c>
        {
#if !defined(USART_DMAREQUESTS_SW_WA)
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	3308      	adds	r3, #8
 8006828:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800682c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006830:	e853 3f00 	ldrex	r3, [r3]
 8006834:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006838:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800683c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006840:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	3308      	adds	r3, #8
 800684a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800684e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006852:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006856:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800685a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800685e:	e841 2300 	strex	r3, r2, [r1]
 8006862:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006866:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800686a:	2b00      	cmp	r3, #0
 800686c:	d1d9      	bne.n	8006822 <HAL_UART_IRQHandler+0x20e>

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006874:	2b00      	cmp	r3, #0
 8006876:	d017      	beq.n	80068a8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800687e:	4a15      	ldr	r2, [pc, #84]	; (80068d4 <HAL_UART_IRQHandler+0x2c0>)
 8006880:	66da      	str	r2, [r3, #108]	; 0x6c

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006888:	4618      	mov	r0, r3
 800688a:	f7fa f8de 	bl	8000a4a <HAL_DMA_Abort_IT>
 800688e:	4603      	mov	r3, r0
 8006890:	2b00      	cmp	r3, #0
 8006892:	d019      	beq.n	80068c8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800689a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800689c:	687a      	ldr	r2, [r7, #4]
 800689e:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80068a2:	4610      	mov	r0, r2
 80068a4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068a6:	e00f      	b.n	80068c8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80068a8:	6878      	ldr	r0, [r7, #4]
 80068aa:	f000 f9c9 	bl	8006c40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068ae:	e00b      	b.n	80068c8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	f000 f9c5 	bl	8006c40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068b6:	e007      	b.n	80068c8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80068b8:	6878      	ldr	r0, [r7, #4]
 80068ba:	f000 f9c1 	bl	8006c40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2200      	movs	r2, #0
 80068c2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 80068c6:	e1a7      	b.n	8006c18 <HAL_UART_IRQHandler+0x604>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068c8:	bf00      	nop
    return;
 80068ca:	e1a5      	b.n	8006c18 <HAL_UART_IRQHandler+0x604>
 80068cc:	10000001 	.word	0x10000001
 80068d0:	04000120 	.word	0x04000120
 80068d4:	08007641 	.word	0x08007641

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068dc:	2b01      	cmp	r3, #1
 80068de:	f040 8150 	bne.w	8006b82 <HAL_UART_IRQHandler+0x56e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80068e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068e6:	f003 0310 	and.w	r3, r3, #16
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	f000 8149 	beq.w	8006b82 <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80068f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068f4:	f003 0310 	and.w	r3, r3, #16
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	f000 8142 	beq.w	8006b82 <HAL_UART_IRQHandler+0x56e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	2210      	movs	r2, #16
 8006904:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	689b      	ldr	r3, [r3, #8]
 800690c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006910:	2b40      	cmp	r3, #64	; 0x40
 8006912:	f040 80b8 	bne.w	8006a86 <HAL_UART_IRQHandler+0x472>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006920:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006924:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006928:	2b00      	cmp	r3, #0
 800692a:	f000 8177 	beq.w	8006c1c <HAL_UART_IRQHandler+0x608>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006934:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006938:	429a      	cmp	r2, r3
 800693a:	f080 816f 	bcs.w	8006c1c <HAL_UART_IRQHandler+0x608>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006944:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800694e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006950:	2b81      	cmp	r3, #129	; 0x81
 8006952:	f000 8087 	beq.w	8006a64 <HAL_UART_IRQHandler+0x450>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800695e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006962:	e853 3f00 	ldrex	r3, [r3]
 8006966:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800696a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800696e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006972:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	461a      	mov	r2, r3
 800697c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006980:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006984:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006988:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800698c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006990:	e841 2300 	strex	r3, r2, [r1]
 8006994:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006998:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800699c:	2b00      	cmp	r3, #0
 800699e:	d1da      	bne.n	8006956 <HAL_UART_IRQHandler+0x342>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	3308      	adds	r3, #8
 80069a6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80069aa:	e853 3f00 	ldrex	r3, [r3]
 80069ae:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80069b0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80069b2:	f023 0301 	bic.w	r3, r3, #1
 80069b6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	3308      	adds	r3, #8
 80069c0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80069c4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80069c8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ca:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80069cc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80069d0:	e841 2300 	strex	r3, r2, [r1]
 80069d4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80069d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d1e1      	bne.n	80069a0 <HAL_UART_IRQHandler+0x38c>

#if !defined(USART_DMAREQUESTS_SW_WA)
          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	3308      	adds	r3, #8
 80069e2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80069e6:	e853 3f00 	ldrex	r3, [r3]
 80069ea:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80069ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80069ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069f2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	3308      	adds	r3, #8
 80069fc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006a00:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006a02:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a04:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006a06:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006a08:	e841 2300 	strex	r3, r2, [r1]
 8006a0c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006a0e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d1e3      	bne.n	80069dc <HAL_UART_IRQHandler+0x3c8>

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2220      	movs	r2, #32
 8006a18:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a2a:	e853 3f00 	ldrex	r3, [r3]
 8006a2e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006a30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a32:	f023 0310 	bic.w	r3, r3, #16
 8006a36:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	461a      	mov	r2, r3
 8006a40:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006a44:	65bb      	str	r3, [r7, #88]	; 0x58
 8006a46:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a48:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006a4a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006a4c:	e841 2300 	strex	r3, r2, [r1]
 8006a50:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006a52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d1e4      	bne.n	8006a22 <HAL_UART_IRQHandler+0x40e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a5e:	4618      	mov	r0, r3
 8006a60:	f7f9 ff77 	bl	8000952 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2202      	movs	r2, #2
 8006a68:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006a76:	b29b      	uxth	r3, r3
 8006a78:	1ad3      	subs	r3, r2, r3
 8006a7a:	b29b      	uxth	r3, r3
 8006a7c:	4619      	mov	r1, r3
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	f000 f8e8 	bl	8006c54 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006a84:	e0ca      	b.n	8006c1c <HAL_UART_IRQHandler+0x608>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006a92:	b29b      	uxth	r3, r3
 8006a94:	1ad3      	subs	r3, r2, r3
 8006a96:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006aa0:	b29b      	uxth	r3, r3
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	f000 80bc 	beq.w	8006c20 <HAL_UART_IRQHandler+0x60c>
          && (nb_rx_data > 0U))
 8006aa8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	f000 80b7 	beq.w	8006c20 <HAL_UART_IRQHandler+0x60c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aba:	e853 3f00 	ldrex	r3, [r3]
 8006abe:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006ac0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ac2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006ac6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	461a      	mov	r2, r3
 8006ad0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006ad4:	647b      	str	r3, [r7, #68]	; 0x44
 8006ad6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ad8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006ada:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006adc:	e841 2300 	strex	r3, r2, [r1]
 8006ae0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006ae2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d1e4      	bne.n	8006ab2 <HAL_UART_IRQHandler+0x49e>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	3308      	adds	r3, #8
 8006aee:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006af2:	e853 3f00 	ldrex	r3, [r3]
 8006af6:	623b      	str	r3, [r7, #32]
   return(result);
 8006af8:	6a3b      	ldr	r3, [r7, #32]
 8006afa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006afe:	f023 0301 	bic.w	r3, r3, #1
 8006b02:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	3308      	adds	r3, #8
 8006b0c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006b10:	633a      	str	r2, [r7, #48]	; 0x30
 8006b12:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b14:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006b16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b18:	e841 2300 	strex	r3, r2, [r1]
 8006b1c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d1e1      	bne.n	8006ae8 <HAL_UART_IRQHandler+0x4d4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2220      	movs	r2, #32
 8006b28:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2200      	movs	r2, #0
 8006b36:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b3e:	693b      	ldr	r3, [r7, #16]
 8006b40:	e853 3f00 	ldrex	r3, [r3]
 8006b44:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	f023 0310 	bic.w	r3, r3, #16
 8006b4c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	461a      	mov	r2, r3
 8006b56:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006b5a:	61fb      	str	r3, [r7, #28]
 8006b5c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b5e:	69b9      	ldr	r1, [r7, #24]
 8006b60:	69fa      	ldr	r2, [r7, #28]
 8006b62:	e841 2300 	strex	r3, r2, [r1]
 8006b66:	617b      	str	r3, [r7, #20]
   return(result);
 8006b68:	697b      	ldr	r3, [r7, #20]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d1e4      	bne.n	8006b38 <HAL_UART_IRQHandler+0x524>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2202      	movs	r2, #2
 8006b72:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006b74:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006b78:	4619      	mov	r1, r3
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	f000 f86a 	bl	8006c54 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006b80:	e04e      	b.n	8006c20 <HAL_UART_IRQHandler+0x60c>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006b82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d014      	beq.n	8006bb8 <HAL_UART_IRQHandler+0x5a4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006b8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d105      	bne.n	8006ba6 <HAL_UART_IRQHandler+0x592>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006b9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b9e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d008      	beq.n	8006bb8 <HAL_UART_IRQHandler+0x5a4>
  {
    if (huart->TxISR != NULL)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d03a      	beq.n	8006c24 <HAL_UART_IRQHandler+0x610>
    {
      huart->TxISR(huart);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	4798      	blx	r3
    }
    return;
 8006bb6:	e035      	b.n	8006c24 <HAL_UART_IRQHandler+0x610>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006bb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d009      	beq.n	8006bd8 <HAL_UART_IRQHandler+0x5c4>
 8006bc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006bc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d003      	beq.n	8006bd8 <HAL_UART_IRQHandler+0x5c4>
  {
    UART_EndTransmit_IT(huart);
 8006bd0:	6878      	ldr	r0, [r7, #4]
 8006bd2:	f000 fd4b 	bl	800766c <UART_EndTransmit_IT>
    return;
 8006bd6:	e026      	b.n	8006c26 <HAL_UART_IRQHandler+0x612>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006bd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bdc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d009      	beq.n	8006bf8 <HAL_UART_IRQHandler+0x5e4>
 8006be4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006be8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d003      	beq.n	8006bf8 <HAL_UART_IRQHandler+0x5e4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006bf0:	6878      	ldr	r0, [r7, #4]
 8006bf2:	f001 faa9 	bl	8008148 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006bf6:	e016      	b.n	8006c26 <HAL_UART_IRQHandler+0x612>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006bf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bfc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d010      	beq.n	8006c26 <HAL_UART_IRQHandler+0x612>
 8006c04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	da0c      	bge.n	8006c26 <HAL_UART_IRQHandler+0x612>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006c0c:	6878      	ldr	r0, [r7, #4]
 8006c0e:	f001 fa91 	bl	8008134 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006c12:	e008      	b.n	8006c26 <HAL_UART_IRQHandler+0x612>
      return;
 8006c14:	bf00      	nop
 8006c16:	e006      	b.n	8006c26 <HAL_UART_IRQHandler+0x612>
    return;
 8006c18:	bf00      	nop
 8006c1a:	e004      	b.n	8006c26 <HAL_UART_IRQHandler+0x612>
      return;
 8006c1c:	bf00      	nop
 8006c1e:	e002      	b.n	8006c26 <HAL_UART_IRQHandler+0x612>
      return;
 8006c20:	bf00      	nop
 8006c22:	e000      	b.n	8006c26 <HAL_UART_IRQHandler+0x612>
    return;
 8006c24:	bf00      	nop
  }
}
 8006c26:	37e8      	adds	r7, #232	; 0xe8
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	bd80      	pop	{r7, pc}

08006c2c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006c2c:	b480      	push	{r7}
 8006c2e:	b083      	sub	sp, #12
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006c34:	bf00      	nop
 8006c36:	370c      	adds	r7, #12
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3e:	4770      	bx	lr

08006c40 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006c40:	b480      	push	{r7}
 8006c42:	b083      	sub	sp, #12
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006c48:	bf00      	nop
 8006c4a:	370c      	adds	r7, #12
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c52:	4770      	bx	lr

08006c54 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006c54:	b480      	push	{r7}
 8006c56:	b083      	sub	sp, #12
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
 8006c5c:	460b      	mov	r3, r1
 8006c5e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006c60:	bf00      	nop
 8006c62:	370c      	adds	r7, #12
 8006c64:	46bd      	mov	sp, r7
 8006c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6a:	4770      	bx	lr

08006c6c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006c6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006c70:	b094      	sub	sp, #80	; 0x50
 8006c72:	af00      	add	r7, sp, #0
 8006c74:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006c76:	2300      	movs	r3, #0
 8006c78:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8006c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c7e:	681a      	ldr	r2, [r3, #0]
 8006c80:	4b83      	ldr	r3, [pc, #524]	; (8006e90 <UART_SetConfig+0x224>)
 8006c82:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c86:	689a      	ldr	r2, [r3, #8]
 8006c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c8a:	691b      	ldr	r3, [r3, #16]
 8006c8c:	431a      	orrs	r2, r3
 8006c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c90:	695b      	ldr	r3, [r3, #20]
 8006c92:	431a      	orrs	r2, r3
 8006c94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c96:	69db      	ldr	r3, [r3, #28]
 8006c98:	4313      	orrs	r3, r2
 8006c9a:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	497c      	ldr	r1, [pc, #496]	; (8006e94 <UART_SetConfig+0x228>)
 8006ca4:	4019      	ands	r1, r3
 8006ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ca8:	681a      	ldr	r2, [r3, #0]
 8006caa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006cac:	430b      	orrs	r3, r1
 8006cae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	685b      	ldr	r3, [r3, #4]
 8006cb6:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cbc:	68d9      	ldr	r1, [r3, #12]
 8006cbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cc0:	681a      	ldr	r2, [r3, #0]
 8006cc2:	ea40 0301 	orr.w	r3, r0, r1
 8006cc6:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006cc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cca:	699b      	ldr	r3, [r3, #24]
 8006ccc:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cd0:	681a      	ldr	r2, [r3, #0]
 8006cd2:	4b6f      	ldr	r3, [pc, #444]	; (8006e90 <UART_SetConfig+0x224>)
 8006cd4:	429a      	cmp	r2, r3
 8006cd6:	d009      	beq.n	8006cec <UART_SetConfig+0x80>
 8006cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cda:	681a      	ldr	r2, [r3, #0]
 8006cdc:	4b6e      	ldr	r3, [pc, #440]	; (8006e98 <UART_SetConfig+0x22c>)
 8006cde:	429a      	cmp	r2, r3
 8006ce0:	d004      	beq.n	8006cec <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ce4:	6a1a      	ldr	r2, [r3, #32]
 8006ce6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ce8:	4313      	orrs	r3, r2
 8006cea:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	689b      	ldr	r3, [r3, #8]
 8006cf2:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 8006cf6:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 8006cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cfc:	681a      	ldr	r2, [r3, #0]
 8006cfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d00:	430b      	orrs	r3, r1
 8006d02:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d0a:	f023 000f 	bic.w	r0, r3, #15
 8006d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d10:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006d12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d14:	681a      	ldr	r2, [r3, #0]
 8006d16:	ea40 0301 	orr.w	r3, r0, r1
 8006d1a:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d1e:	681a      	ldr	r2, [r3, #0]
 8006d20:	4b5e      	ldr	r3, [pc, #376]	; (8006e9c <UART_SetConfig+0x230>)
 8006d22:	429a      	cmp	r2, r3
 8006d24:	d102      	bne.n	8006d2c <UART_SetConfig+0xc0>
 8006d26:	2301      	movs	r3, #1
 8006d28:	64bb      	str	r3, [r7, #72]	; 0x48
 8006d2a:	e032      	b.n	8006d92 <UART_SetConfig+0x126>
 8006d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d2e:	681a      	ldr	r2, [r3, #0]
 8006d30:	4b5b      	ldr	r3, [pc, #364]	; (8006ea0 <UART_SetConfig+0x234>)
 8006d32:	429a      	cmp	r2, r3
 8006d34:	d102      	bne.n	8006d3c <UART_SetConfig+0xd0>
 8006d36:	2302      	movs	r3, #2
 8006d38:	64bb      	str	r3, [r7, #72]	; 0x48
 8006d3a:	e02a      	b.n	8006d92 <UART_SetConfig+0x126>
 8006d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d3e:	681a      	ldr	r2, [r3, #0]
 8006d40:	4b58      	ldr	r3, [pc, #352]	; (8006ea4 <UART_SetConfig+0x238>)
 8006d42:	429a      	cmp	r2, r3
 8006d44:	d102      	bne.n	8006d4c <UART_SetConfig+0xe0>
 8006d46:	2304      	movs	r3, #4
 8006d48:	64bb      	str	r3, [r7, #72]	; 0x48
 8006d4a:	e022      	b.n	8006d92 <UART_SetConfig+0x126>
 8006d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d4e:	681a      	ldr	r2, [r3, #0]
 8006d50:	4b55      	ldr	r3, [pc, #340]	; (8006ea8 <UART_SetConfig+0x23c>)
 8006d52:	429a      	cmp	r2, r3
 8006d54:	d102      	bne.n	8006d5c <UART_SetConfig+0xf0>
 8006d56:	2308      	movs	r3, #8
 8006d58:	64bb      	str	r3, [r7, #72]	; 0x48
 8006d5a:	e01a      	b.n	8006d92 <UART_SetConfig+0x126>
 8006d5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d5e:	681a      	ldr	r2, [r3, #0]
 8006d60:	4b52      	ldr	r3, [pc, #328]	; (8006eac <UART_SetConfig+0x240>)
 8006d62:	429a      	cmp	r2, r3
 8006d64:	d102      	bne.n	8006d6c <UART_SetConfig+0x100>
 8006d66:	2310      	movs	r3, #16
 8006d68:	64bb      	str	r3, [r7, #72]	; 0x48
 8006d6a:	e012      	b.n	8006d92 <UART_SetConfig+0x126>
 8006d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d6e:	681a      	ldr	r2, [r3, #0]
 8006d70:	4b4f      	ldr	r3, [pc, #316]	; (8006eb0 <UART_SetConfig+0x244>)
 8006d72:	429a      	cmp	r2, r3
 8006d74:	d103      	bne.n	8006d7e <UART_SetConfig+0x112>
 8006d76:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8006d7a:	64bb      	str	r3, [r7, #72]	; 0x48
 8006d7c:	e009      	b.n	8006d92 <UART_SetConfig+0x126>
 8006d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d80:	681a      	ldr	r2, [r3, #0]
 8006d82:	4b43      	ldr	r3, [pc, #268]	; (8006e90 <UART_SetConfig+0x224>)
 8006d84:	429a      	cmp	r2, r3
 8006d86:	d102      	bne.n	8006d8e <UART_SetConfig+0x122>
 8006d88:	2320      	movs	r3, #32
 8006d8a:	64bb      	str	r3, [r7, #72]	; 0x48
 8006d8c:	e001      	b.n	8006d92 <UART_SetConfig+0x126>
 8006d8e:	2300      	movs	r3, #0
 8006d90:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d94:	681a      	ldr	r2, [r3, #0]
 8006d96:	4b3e      	ldr	r3, [pc, #248]	; (8006e90 <UART_SetConfig+0x224>)
 8006d98:	429a      	cmp	r2, r3
 8006d9a:	d005      	beq.n	8006da8 <UART_SetConfig+0x13c>
 8006d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d9e:	681a      	ldr	r2, [r3, #0]
 8006da0:	4b3d      	ldr	r3, [pc, #244]	; (8006e98 <UART_SetConfig+0x22c>)
 8006da2:	429a      	cmp	r2, r3
 8006da4:	f040 8088 	bne.w	8006eb8 <UART_SetConfig+0x24c>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8006da8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006daa:	2200      	movs	r2, #0
 8006dac:	623b      	str	r3, [r7, #32]
 8006dae:	627a      	str	r2, [r7, #36]	; 0x24
 8006db0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8006db4:	f7fd fe70 	bl	8004a98 <HAL_RCCEx_GetPeriphCLKFreq>
 8006db8:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8006dba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	f000 80eb 	beq.w	8006f98 <UART_SetConfig+0x32c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dc6:	4a3b      	ldr	r2, [pc, #236]	; (8006eb4 <UART_SetConfig+0x248>)
 8006dc8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006dcc:	461a      	mov	r2, r3
 8006dce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006dd0:	fbb3 f3f2 	udiv	r3, r3, r2
 8006dd4:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dd8:	685a      	ldr	r2, [r3, #4]
 8006dda:	4613      	mov	r3, r2
 8006ddc:	005b      	lsls	r3, r3, #1
 8006dde:	4413      	add	r3, r2
 8006de0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006de2:	429a      	cmp	r2, r3
 8006de4:	d305      	bcc.n	8006df2 <UART_SetConfig+0x186>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006de8:	685b      	ldr	r3, [r3, #4]
 8006dea:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006dec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006dee:	429a      	cmp	r2, r3
 8006df0:	d903      	bls.n	8006dfa <UART_SetConfig+0x18e>
      {
        ret = HAL_ERROR;
 8006df2:	2301      	movs	r3, #1
 8006df4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8006df8:	e048      	b.n	8006e8c <UART_SetConfig+0x220>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006dfa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	61bb      	str	r3, [r7, #24]
 8006e00:	61fa      	str	r2, [r7, #28]
 8006e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e06:	4a2b      	ldr	r2, [pc, #172]	; (8006eb4 <UART_SetConfig+0x248>)
 8006e08:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006e0c:	b29b      	uxth	r3, r3
 8006e0e:	2200      	movs	r2, #0
 8006e10:	613b      	str	r3, [r7, #16]
 8006e12:	617a      	str	r2, [r7, #20]
 8006e14:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006e18:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006e1c:	f7f9 fa38 	bl	8000290 <__aeabi_uldivmod>
 8006e20:	4602      	mov	r2, r0
 8006e22:	460b      	mov	r3, r1
 8006e24:	4610      	mov	r0, r2
 8006e26:	4619      	mov	r1, r3
 8006e28:	f04f 0200 	mov.w	r2, #0
 8006e2c:	f04f 0300 	mov.w	r3, #0
 8006e30:	020b      	lsls	r3, r1, #8
 8006e32:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006e36:	0202      	lsls	r2, r0, #8
 8006e38:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006e3a:	6849      	ldr	r1, [r1, #4]
 8006e3c:	0849      	lsrs	r1, r1, #1
 8006e3e:	2000      	movs	r0, #0
 8006e40:	460c      	mov	r4, r1
 8006e42:	4605      	mov	r5, r0
 8006e44:	eb12 0804 	adds.w	r8, r2, r4
 8006e48:	eb43 0905 	adc.w	r9, r3, r5
 8006e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e4e:	685b      	ldr	r3, [r3, #4]
 8006e50:	2200      	movs	r2, #0
 8006e52:	60bb      	str	r3, [r7, #8]
 8006e54:	60fa      	str	r2, [r7, #12]
 8006e56:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006e5a:	4640      	mov	r0, r8
 8006e5c:	4649      	mov	r1, r9
 8006e5e:	f7f9 fa17 	bl	8000290 <__aeabi_uldivmod>
 8006e62:	4602      	mov	r2, r0
 8006e64:	460b      	mov	r3, r1
 8006e66:	4613      	mov	r3, r2
 8006e68:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006e6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e6c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e70:	d308      	bcc.n	8006e84 <UART_SetConfig+0x218>
 8006e72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e74:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e78:	d204      	bcs.n	8006e84 <UART_SetConfig+0x218>
        {
          huart->Instance->BRR = usartdiv;
 8006e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006e80:	60da      	str	r2, [r3, #12]
 8006e82:	e003      	b.n	8006e8c <UART_SetConfig+0x220>
        }
        else
        {
          ret = HAL_ERROR;
 8006e84:	2301      	movs	r3, #1
 8006e86:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 8006e8a:	e085      	b.n	8006f98 <UART_SetConfig+0x32c>
 8006e8c:	e084      	b.n	8006f98 <UART_SetConfig+0x32c>
 8006e8e:	bf00      	nop
 8006e90:	46002400 	.word	0x46002400
 8006e94:	cfff69f3 	.word	0xcfff69f3
 8006e98:	56002400 	.word	0x56002400
 8006e9c:	40013800 	.word	0x40013800
 8006ea0:	40004400 	.word	0x40004400
 8006ea4:	40004800 	.word	0x40004800
 8006ea8:	40004c00 	.word	0x40004c00
 8006eac:	40005000 	.word	0x40005000
 8006eb0:	40006400 	.word	0x40006400
 8006eb4:	0800c3a0 	.word	0x0800c3a0
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006eb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eba:	69db      	ldr	r3, [r3, #28]
 8006ebc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ec0:	d13c      	bne.n	8006f3c <UART_SetConfig+0x2d0>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8006ec2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	603b      	str	r3, [r7, #0]
 8006ec8:	607a      	str	r2, [r7, #4]
 8006eca:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006ece:	f7fd fde3 	bl	8004a98 <HAL_RCCEx_GetPeriphCLKFreq>
 8006ed2:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006ed4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d05e      	beq.n	8006f98 <UART_SetConfig+0x32c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006eda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ede:	4a39      	ldr	r2, [pc, #228]	; (8006fc4 <UART_SetConfig+0x358>)
 8006ee0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006ee4:	461a      	mov	r2, r3
 8006ee6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ee8:	fbb3 f3f2 	udiv	r3, r3, r2
 8006eec:	005a      	lsls	r2, r3, #1
 8006eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ef0:	685b      	ldr	r3, [r3, #4]
 8006ef2:	085b      	lsrs	r3, r3, #1
 8006ef4:	441a      	add	r2, r3
 8006ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ef8:	685b      	ldr	r3, [r3, #4]
 8006efa:	fbb2 f3f3 	udiv	r3, r2, r3
 8006efe:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f02:	2b0f      	cmp	r3, #15
 8006f04:	d916      	bls.n	8006f34 <UART_SetConfig+0x2c8>
 8006f06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f0c:	d212      	bcs.n	8006f34 <UART_SetConfig+0x2c8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006f0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f10:	b29b      	uxth	r3, r3
 8006f12:	f023 030f 	bic.w	r3, r3, #15
 8006f16:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006f18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f1a:	085b      	lsrs	r3, r3, #1
 8006f1c:	b29b      	uxth	r3, r3
 8006f1e:	f003 0307 	and.w	r3, r3, #7
 8006f22:	b29a      	uxth	r2, r3
 8006f24:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8006f26:	4313      	orrs	r3, r2
 8006f28:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 8006f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8006f30:	60da      	str	r2, [r3, #12]
 8006f32:	e031      	b.n	8006f98 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 8006f34:	2301      	movs	r3, #1
 8006f36:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8006f3a:	e02d      	b.n	8006f98 <UART_SetConfig+0x32c>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8006f3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f3e:	2200      	movs	r2, #0
 8006f40:	469a      	mov	sl, r3
 8006f42:	4693      	mov	fp, r2
 8006f44:	4650      	mov	r0, sl
 8006f46:	4659      	mov	r1, fp
 8006f48:	f7fd fda6 	bl	8004a98 <HAL_RCCEx_GetPeriphCLKFreq>
 8006f4c:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 8006f4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d021      	beq.n	8006f98 <UART_SetConfig+0x32c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f58:	4a1a      	ldr	r2, [pc, #104]	; (8006fc4 <UART_SetConfig+0x358>)
 8006f5a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006f5e:	461a      	mov	r2, r3
 8006f60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f62:	fbb3 f2f2 	udiv	r2, r3, r2
 8006f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f68:	685b      	ldr	r3, [r3, #4]
 8006f6a:	085b      	lsrs	r3, r3, #1
 8006f6c:	441a      	add	r2, r3
 8006f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f70:	685b      	ldr	r3, [r3, #4]
 8006f72:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f76:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f7a:	2b0f      	cmp	r3, #15
 8006f7c:	d909      	bls.n	8006f92 <UART_SetConfig+0x326>
 8006f7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f84:	d205      	bcs.n	8006f92 <UART_SetConfig+0x326>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006f86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f88:	b29a      	uxth	r2, r3
 8006f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	60da      	str	r2, [r3, #12]
 8006f90:	e002      	b.n	8006f98 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 8006f92:	2301      	movs	r3, #1
 8006f94:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f9a:	2201      	movs	r2, #1
 8006f9c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fa2:	2201      	movs	r2, #1
 8006fa4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006faa:	2200      	movs	r2, #0
 8006fac:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8006fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8006fb4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8006fb8:	4618      	mov	r0, r3
 8006fba:	3750      	adds	r7, #80	; 0x50
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006fc2:	bf00      	nop
 8006fc4:	0800c3a0 	.word	0x0800c3a0

08006fc8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006fc8:	b480      	push	{r7}
 8006fca:	b083      	sub	sp, #12
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fd4:	f003 0301 	and.w	r3, r3, #1
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d00a      	beq.n	8006ff2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	685b      	ldr	r3, [r3, #4]
 8006fe2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	430a      	orrs	r2, r1
 8006ff0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ff6:	f003 0302 	and.w	r3, r3, #2
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d00a      	beq.n	8007014 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	685b      	ldr	r3, [r3, #4]
 8007004:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	430a      	orrs	r2, r1
 8007012:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007018:	f003 0304 	and.w	r3, r3, #4
 800701c:	2b00      	cmp	r3, #0
 800701e:	d00a      	beq.n	8007036 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	685b      	ldr	r3, [r3, #4]
 8007026:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	430a      	orrs	r2, r1
 8007034:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800703a:	f003 0308 	and.w	r3, r3, #8
 800703e:	2b00      	cmp	r3, #0
 8007040:	d00a      	beq.n	8007058 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	685b      	ldr	r3, [r3, #4]
 8007048:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	430a      	orrs	r2, r1
 8007056:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800705c:	f003 0310 	and.w	r3, r3, #16
 8007060:	2b00      	cmp	r3, #0
 8007062:	d00a      	beq.n	800707a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	689b      	ldr	r3, [r3, #8]
 800706a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	430a      	orrs	r2, r1
 8007078:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800707e:	f003 0320 	and.w	r3, r3, #32
 8007082:	2b00      	cmp	r3, #0
 8007084:	d00a      	beq.n	800709c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	689b      	ldr	r3, [r3, #8]
 800708c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	430a      	orrs	r2, r1
 800709a:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d01a      	beq.n	80070de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	685b      	ldr	r3, [r3, #4]
 80070ae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	430a      	orrs	r2, r1
 80070bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80070c6:	d10a      	bne.n	80070de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	685b      	ldr	r3, [r3, #4]
 80070ce:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	430a      	orrs	r2, r1
 80070dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d00a      	beq.n	8007100 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	685b      	ldr	r3, [r3, #4]
 80070f0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	430a      	orrs	r2, r1
 80070fe:	605a      	str	r2, [r3, #4]
  }
}
 8007100:	bf00      	nop
 8007102:	370c      	adds	r7, #12
 8007104:	46bd      	mov	sp, r7
 8007106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710a:	4770      	bx	lr

0800710c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b098      	sub	sp, #96	; 0x60
 8007110:	af02      	add	r7, sp, #8
 8007112:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2200      	movs	r2, #0
 8007118:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800711c:	f7f9 fac0 	bl	80006a0 <HAL_GetTick>
 8007120:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f003 0308 	and.w	r3, r3, #8
 800712c:	2b08      	cmp	r3, #8
 800712e:	d12f      	bne.n	8007190 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007130:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007134:	9300      	str	r3, [sp, #0]
 8007136:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007138:	2200      	movs	r2, #0
 800713a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800713e:	6878      	ldr	r0, [r7, #4]
 8007140:	f000 f88e 	bl	8007260 <UART_WaitOnFlagUntilTimeout>
 8007144:	4603      	mov	r3, r0
 8007146:	2b00      	cmp	r3, #0
 8007148:	d022      	beq.n	8007190 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007152:	e853 3f00 	ldrex	r3, [r3]
 8007156:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007158:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800715a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800715e:	653b      	str	r3, [r7, #80]	; 0x50
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	461a      	mov	r2, r3
 8007166:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007168:	647b      	str	r3, [r7, #68]	; 0x44
 800716a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800716c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800716e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007170:	e841 2300 	strex	r3, r2, [r1]
 8007174:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007176:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007178:	2b00      	cmp	r3, #0
 800717a:	d1e6      	bne.n	800714a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2220      	movs	r2, #32
 8007180:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2200      	movs	r2, #0
 8007188:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800718c:	2303      	movs	r3, #3
 800718e:	e063      	b.n	8007258 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f003 0304 	and.w	r3, r3, #4
 800719a:	2b04      	cmp	r3, #4
 800719c:	d149      	bne.n	8007232 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800719e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80071a2:	9300      	str	r3, [sp, #0]
 80071a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80071a6:	2200      	movs	r2, #0
 80071a8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	f000 f857 	bl	8007260 <UART_WaitOnFlagUntilTimeout>
 80071b2:	4603      	mov	r3, r0
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d03c      	beq.n	8007232 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071c0:	e853 3f00 	ldrex	r3, [r3]
 80071c4:	623b      	str	r3, [r7, #32]
   return(result);
 80071c6:	6a3b      	ldr	r3, [r7, #32]
 80071c8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80071cc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	461a      	mov	r2, r3
 80071d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071d6:	633b      	str	r3, [r7, #48]	; 0x30
 80071d8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80071dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071de:	e841 2300 	strex	r3, r2, [r1]
 80071e2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80071e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d1e6      	bne.n	80071b8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	3308      	adds	r3, #8
 80071f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071f2:	693b      	ldr	r3, [r7, #16]
 80071f4:	e853 3f00 	ldrex	r3, [r3]
 80071f8:	60fb      	str	r3, [r7, #12]
   return(result);
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	f023 0301 	bic.w	r3, r3, #1
 8007200:	64bb      	str	r3, [r7, #72]	; 0x48
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	3308      	adds	r3, #8
 8007208:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800720a:	61fa      	str	r2, [r7, #28]
 800720c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800720e:	69b9      	ldr	r1, [r7, #24]
 8007210:	69fa      	ldr	r2, [r7, #28]
 8007212:	e841 2300 	strex	r3, r2, [r1]
 8007216:	617b      	str	r3, [r7, #20]
   return(result);
 8007218:	697b      	ldr	r3, [r7, #20]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d1e5      	bne.n	80071ea <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2220      	movs	r2, #32
 8007222:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2200      	movs	r2, #0
 800722a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800722e:	2303      	movs	r3, #3
 8007230:	e012      	b.n	8007258 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2220      	movs	r2, #32
 8007236:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2220      	movs	r2, #32
 800723e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2200      	movs	r2, #0
 8007246:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2200      	movs	r2, #0
 800724c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2200      	movs	r2, #0
 8007252:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007256:	2300      	movs	r3, #0
}
 8007258:	4618      	mov	r0, r3
 800725a:	3758      	adds	r7, #88	; 0x58
 800725c:	46bd      	mov	sp, r7
 800725e:	bd80      	pop	{r7, pc}

08007260 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b084      	sub	sp, #16
 8007264:	af00      	add	r7, sp, #0
 8007266:	60f8      	str	r0, [r7, #12]
 8007268:	60b9      	str	r1, [r7, #8]
 800726a:	603b      	str	r3, [r7, #0]
 800726c:	4613      	mov	r3, r2
 800726e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007270:	e049      	b.n	8007306 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007272:	69bb      	ldr	r3, [r7, #24]
 8007274:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007278:	d045      	beq.n	8007306 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800727a:	f7f9 fa11 	bl	80006a0 <HAL_GetTick>
 800727e:	4602      	mov	r2, r0
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	1ad3      	subs	r3, r2, r3
 8007284:	69ba      	ldr	r2, [r7, #24]
 8007286:	429a      	cmp	r2, r3
 8007288:	d302      	bcc.n	8007290 <UART_WaitOnFlagUntilTimeout+0x30>
 800728a:	69bb      	ldr	r3, [r7, #24]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d101      	bne.n	8007294 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007290:	2303      	movs	r3, #3
 8007292:	e048      	b.n	8007326 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f003 0304 	and.w	r3, r3, #4
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d031      	beq.n	8007306 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	69db      	ldr	r3, [r3, #28]
 80072a8:	f003 0308 	and.w	r3, r3, #8
 80072ac:	2b08      	cmp	r3, #8
 80072ae:	d110      	bne.n	80072d2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	2208      	movs	r2, #8
 80072b6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80072b8:	68f8      	ldr	r0, [r7, #12]
 80072ba:	f000 f95b 	bl	8007574 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	2208      	movs	r2, #8
 80072c2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	2200      	movs	r2, #0
 80072ca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80072ce:	2301      	movs	r3, #1
 80072d0:	e029      	b.n	8007326 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	69db      	ldr	r3, [r3, #28]
 80072d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80072dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80072e0:	d111      	bne.n	8007306 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80072ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80072ec:	68f8      	ldr	r0, [r7, #12]
 80072ee:	f000 f941 	bl	8007574 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	2220      	movs	r2, #32
 80072f6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	2200      	movs	r2, #0
 80072fe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8007302:	2303      	movs	r3, #3
 8007304:	e00f      	b.n	8007326 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	69da      	ldr	r2, [r3, #28]
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	4013      	ands	r3, r2
 8007310:	68ba      	ldr	r2, [r7, #8]
 8007312:	429a      	cmp	r2, r3
 8007314:	bf0c      	ite	eq
 8007316:	2301      	moveq	r3, #1
 8007318:	2300      	movne	r3, #0
 800731a:	b2db      	uxtb	r3, r3
 800731c:	461a      	mov	r2, r3
 800731e:	79fb      	ldrb	r3, [r7, #7]
 8007320:	429a      	cmp	r2, r3
 8007322:	d0a6      	beq.n	8007272 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007324:	2300      	movs	r3, #0
}
 8007326:	4618      	mov	r0, r3
 8007328:	3710      	adds	r7, #16
 800732a:	46bd      	mov	sp, r7
 800732c:	bd80      	pop	{r7, pc}
	...

08007330 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007330:	b480      	push	{r7}
 8007332:	b0a3      	sub	sp, #140	; 0x8c
 8007334:	af00      	add	r7, sp, #0
 8007336:	60f8      	str	r0, [r7, #12]
 8007338:	60b9      	str	r1, [r7, #8]
 800733a:	4613      	mov	r3, r2
 800733c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	68ba      	ldr	r2, [r7, #8]
 8007342:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	88fa      	ldrh	r2, [r7, #6]
 8007348:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	88fa      	ldrh	r2, [r7, #6]
 8007350:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	2200      	movs	r2, #0
 8007358:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	689b      	ldr	r3, [r3, #8]
 800735e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007362:	d10e      	bne.n	8007382 <UART_Start_Receive_IT+0x52>
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	691b      	ldr	r3, [r3, #16]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d105      	bne.n	8007378 <UART_Start_Receive_IT+0x48>
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007372:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007376:	e02d      	b.n	80073d4 <UART_Start_Receive_IT+0xa4>
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	22ff      	movs	r2, #255	; 0xff
 800737c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007380:	e028      	b.n	80073d4 <UART_Start_Receive_IT+0xa4>
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	689b      	ldr	r3, [r3, #8]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d10d      	bne.n	80073a6 <UART_Start_Receive_IT+0x76>
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	691b      	ldr	r3, [r3, #16]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d104      	bne.n	800739c <UART_Start_Receive_IT+0x6c>
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	22ff      	movs	r2, #255	; 0xff
 8007396:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800739a:	e01b      	b.n	80073d4 <UART_Start_Receive_IT+0xa4>
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	227f      	movs	r2, #127	; 0x7f
 80073a0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80073a4:	e016      	b.n	80073d4 <UART_Start_Receive_IT+0xa4>
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	689b      	ldr	r3, [r3, #8]
 80073aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80073ae:	d10d      	bne.n	80073cc <UART_Start_Receive_IT+0x9c>
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	691b      	ldr	r3, [r3, #16]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d104      	bne.n	80073c2 <UART_Start_Receive_IT+0x92>
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	227f      	movs	r2, #127	; 0x7f
 80073bc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80073c0:	e008      	b.n	80073d4 <UART_Start_Receive_IT+0xa4>
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	223f      	movs	r2, #63	; 0x3f
 80073c6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80073ca:	e003      	b.n	80073d4 <UART_Start_Receive_IT+0xa4>
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	2200      	movs	r2, #0
 80073d0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	2200      	movs	r2, #0
 80073d8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	2222      	movs	r2, #34	; 0x22
 80073e0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	3308      	adds	r3, #8
 80073ea:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80073ee:	e853 3f00 	ldrex	r3, [r3]
 80073f2:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80073f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80073f6:	f043 0301 	orr.w	r3, r3, #1
 80073fa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	3308      	adds	r3, #8
 8007404:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8007408:	673a      	str	r2, [r7, #112]	; 0x70
 800740a:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800740c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800740e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007410:	e841 2300 	strex	r3, r2, [r1]
 8007414:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8007416:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007418:	2b00      	cmp	r3, #0
 800741a:	d1e3      	bne.n	80073e4 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007420:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007424:	d14f      	bne.n	80074c6 <UART_Start_Receive_IT+0x196>
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800742c:	88fa      	ldrh	r2, [r7, #6]
 800742e:	429a      	cmp	r2, r3
 8007430:	d349      	bcc.n	80074c6 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	689b      	ldr	r3, [r3, #8]
 8007436:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800743a:	d107      	bne.n	800744c <UART_Start_Receive_IT+0x11c>
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	691b      	ldr	r3, [r3, #16]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d103      	bne.n	800744c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	4a47      	ldr	r2, [pc, #284]	; (8007564 <UART_Start_Receive_IT+0x234>)
 8007448:	675a      	str	r2, [r3, #116]	; 0x74
 800744a:	e002      	b.n	8007452 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	4a46      	ldr	r2, [pc, #280]	; (8007568 <UART_Start_Receive_IT+0x238>)
 8007450:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	691b      	ldr	r3, [r3, #16]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d01a      	beq.n	8007490 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007460:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007462:	e853 3f00 	ldrex	r3, [r3]
 8007466:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007468:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800746a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800746e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	461a      	mov	r2, r3
 8007478:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800747c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800747e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007480:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007482:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007484:	e841 2300 	strex	r3, r2, [r1]
 8007488:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800748a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800748c:	2b00      	cmp	r3, #0
 800748e:	d1e4      	bne.n	800745a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	3308      	adds	r3, #8
 8007496:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007498:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800749a:	e853 3f00 	ldrex	r3, [r3]
 800749e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80074a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80074a6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	3308      	adds	r3, #8
 80074ae:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80074b0:	64ba      	str	r2, [r7, #72]	; 0x48
 80074b2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074b4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80074b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80074b8:	e841 2300 	strex	r3, r2, [r1]
 80074bc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80074be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d1e5      	bne.n	8007490 <UART_Start_Receive_IT+0x160>
 80074c4:	e046      	b.n	8007554 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	689b      	ldr	r3, [r3, #8]
 80074ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074ce:	d107      	bne.n	80074e0 <UART_Start_Receive_IT+0x1b0>
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	691b      	ldr	r3, [r3, #16]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d103      	bne.n	80074e0 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	4a24      	ldr	r2, [pc, #144]	; (800756c <UART_Start_Receive_IT+0x23c>)
 80074dc:	675a      	str	r2, [r3, #116]	; 0x74
 80074de:	e002      	b.n	80074e6 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	4a23      	ldr	r2, [pc, #140]	; (8007570 <UART_Start_Receive_IT+0x240>)
 80074e4:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	691b      	ldr	r3, [r3, #16]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d019      	beq.n	8007522 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074f6:	e853 3f00 	ldrex	r3, [r3]
 80074fa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80074fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074fe:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007502:	677b      	str	r3, [r7, #116]	; 0x74
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	461a      	mov	r2, r3
 800750a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800750c:	637b      	str	r3, [r7, #52]	; 0x34
 800750e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007510:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007512:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007514:	e841 2300 	strex	r3, r2, [r1]
 8007518:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800751a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800751c:	2b00      	cmp	r3, #0
 800751e:	d1e6      	bne.n	80074ee <UART_Start_Receive_IT+0x1be>
 8007520:	e018      	b.n	8007554 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007528:	697b      	ldr	r3, [r7, #20]
 800752a:	e853 3f00 	ldrex	r3, [r3]
 800752e:	613b      	str	r3, [r7, #16]
   return(result);
 8007530:	693b      	ldr	r3, [r7, #16]
 8007532:	f043 0320 	orr.w	r3, r3, #32
 8007536:	67bb      	str	r3, [r7, #120]	; 0x78
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	461a      	mov	r2, r3
 800753e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007540:	623b      	str	r3, [r7, #32]
 8007542:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007544:	69f9      	ldr	r1, [r7, #28]
 8007546:	6a3a      	ldr	r2, [r7, #32]
 8007548:	e841 2300 	strex	r3, r2, [r1]
 800754c:	61bb      	str	r3, [r7, #24]
   return(result);
 800754e:	69bb      	ldr	r3, [r7, #24]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d1e6      	bne.n	8007522 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8007554:	2300      	movs	r3, #0
}
 8007556:	4618      	mov	r0, r3
 8007558:	378c      	adds	r7, #140	; 0x8c
 800755a:	46bd      	mov	sp, r7
 800755c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007560:	4770      	bx	lr
 8007562:	bf00      	nop
 8007564:	08007dbd 	.word	0x08007dbd
 8007568:	08007a4d 	.word	0x08007a4d
 800756c:	08007889 	.word	0x08007889
 8007570:	080076c5 	.word	0x080076c5

08007574 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007574:	b480      	push	{r7}
 8007576:	b095      	sub	sp, #84	; 0x54
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007582:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007584:	e853 3f00 	ldrex	r3, [r3]
 8007588:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800758a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800758c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007590:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	461a      	mov	r2, r3
 8007598:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800759a:	643b      	str	r3, [r7, #64]	; 0x40
 800759c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800759e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80075a0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80075a2:	e841 2300 	strex	r3, r2, [r1]
 80075a6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80075a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d1e6      	bne.n	800757c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	3308      	adds	r3, #8
 80075b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075b6:	6a3b      	ldr	r3, [r7, #32]
 80075b8:	e853 3f00 	ldrex	r3, [r3]
 80075bc:	61fb      	str	r3, [r7, #28]
   return(result);
 80075be:	69fb      	ldr	r3, [r7, #28]
 80075c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80075c4:	f023 0301 	bic.w	r3, r3, #1
 80075c8:	64bb      	str	r3, [r7, #72]	; 0x48
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	3308      	adds	r3, #8
 80075d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80075d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80075d4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80075d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80075da:	e841 2300 	strex	r3, r2, [r1]
 80075de:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80075e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d1e3      	bne.n	80075ae <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80075ea:	2b01      	cmp	r3, #1
 80075ec:	d118      	bne.n	8007620 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	e853 3f00 	ldrex	r3, [r3]
 80075fa:	60bb      	str	r3, [r7, #8]
   return(result);
 80075fc:	68bb      	ldr	r3, [r7, #8]
 80075fe:	f023 0310 	bic.w	r3, r3, #16
 8007602:	647b      	str	r3, [r7, #68]	; 0x44
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	461a      	mov	r2, r3
 800760a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800760c:	61bb      	str	r3, [r7, #24]
 800760e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007610:	6979      	ldr	r1, [r7, #20]
 8007612:	69ba      	ldr	r2, [r7, #24]
 8007614:	e841 2300 	strex	r3, r2, [r1]
 8007618:	613b      	str	r3, [r7, #16]
   return(result);
 800761a:	693b      	ldr	r3, [r7, #16]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d1e6      	bne.n	80075ee <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2220      	movs	r2, #32
 8007624:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2200      	movs	r2, #0
 800762c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2200      	movs	r2, #0
 8007632:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007634:	bf00      	nop
 8007636:	3754      	adds	r7, #84	; 0x54
 8007638:	46bd      	mov	sp, r7
 800763a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763e:	4770      	bx	lr

08007640 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b084      	sub	sp, #16
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800764c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	2200      	movs	r2, #0
 8007652:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	2200      	movs	r2, #0
 800765a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800765e:	68f8      	ldr	r0, [r7, #12]
 8007660:	f7ff faee 	bl	8006c40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007664:	bf00      	nop
 8007666:	3710      	adds	r7, #16
 8007668:	46bd      	mov	sp, r7
 800766a:	bd80      	pop	{r7, pc}

0800766c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b088      	sub	sp, #32
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	e853 3f00 	ldrex	r3, [r3]
 8007680:	60bb      	str	r3, [r7, #8]
   return(result);
 8007682:	68bb      	ldr	r3, [r7, #8]
 8007684:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007688:	61fb      	str	r3, [r7, #28]
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	461a      	mov	r2, r3
 8007690:	69fb      	ldr	r3, [r7, #28]
 8007692:	61bb      	str	r3, [r7, #24]
 8007694:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007696:	6979      	ldr	r1, [r7, #20]
 8007698:	69ba      	ldr	r2, [r7, #24]
 800769a:	e841 2300 	strex	r3, r2, [r1]
 800769e:	613b      	str	r3, [r7, #16]
   return(result);
 80076a0:	693b      	ldr	r3, [r7, #16]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d1e6      	bne.n	8007674 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2220      	movs	r2, #32
 80076aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2200      	movs	r2, #0
 80076b2:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80076b4:	6878      	ldr	r0, [r7, #4]
 80076b6:	f7ff fab9 	bl	8006c2c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80076ba:	bf00      	nop
 80076bc:	3720      	adds	r7, #32
 80076be:	46bd      	mov	sp, r7
 80076c0:	bd80      	pop	{r7, pc}
	...

080076c4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b09c      	sub	sp, #112	; 0x70
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80076d2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80076dc:	2b22      	cmp	r3, #34	; 0x22
 80076de:	f040 80c3 	bne.w	8007868 <UART_RxISR_8BIT+0x1a4>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076e8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80076ec:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80076f0:	b2d9      	uxtb	r1, r3
 80076f2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80076f6:	b2da      	uxtb	r2, r3
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076fc:	400a      	ands	r2, r1
 80076fe:	b2d2      	uxtb	r2, r2
 8007700:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007706:	1c5a      	adds	r2, r3, #1
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007712:	b29b      	uxth	r3, r3
 8007714:	3b01      	subs	r3, #1
 8007716:	b29a      	uxth	r2, r3
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007724:	b29b      	uxth	r3, r3
 8007726:	2b00      	cmp	r3, #0
 8007728:	f040 80a6 	bne.w	8007878 <UART_RxISR_8BIT+0x1b4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007732:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007734:	e853 3f00 	ldrex	r3, [r3]
 8007738:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800773a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800773c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007740:	66bb      	str	r3, [r7, #104]	; 0x68
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	461a      	mov	r2, r3
 8007748:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800774a:	65bb      	str	r3, [r7, #88]	; 0x58
 800774c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800774e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007750:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007752:	e841 2300 	strex	r3, r2, [r1]
 8007756:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007758:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800775a:	2b00      	cmp	r3, #0
 800775c:	d1e6      	bne.n	800772c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	3308      	adds	r3, #8
 8007764:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007768:	e853 3f00 	ldrex	r3, [r3]
 800776c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800776e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007770:	f023 0301 	bic.w	r3, r3, #1
 8007774:	667b      	str	r3, [r7, #100]	; 0x64
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	3308      	adds	r3, #8
 800777c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800777e:	647a      	str	r2, [r7, #68]	; 0x44
 8007780:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007782:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007784:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007786:	e841 2300 	strex	r3, r2, [r1]
 800778a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800778c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800778e:	2b00      	cmp	r3, #0
 8007790:	d1e5      	bne.n	800775e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2220      	movs	r2, #32
 8007796:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2200      	movs	r2, #0
 800779e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2200      	movs	r2, #0
 80077a4:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	4a35      	ldr	r2, [pc, #212]	; (8007880 <UART_RxISR_8BIT+0x1bc>)
 80077ac:	4293      	cmp	r3, r2
 80077ae:	d024      	beq.n	80077fa <UART_RxISR_8BIT+0x136>
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	4a33      	ldr	r2, [pc, #204]	; (8007884 <UART_RxISR_8BIT+0x1c0>)
 80077b6:	4293      	cmp	r3, r2
 80077b8:	d01f      	beq.n	80077fa <UART_RxISR_8BIT+0x136>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	685b      	ldr	r3, [r3, #4]
 80077c0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d018      	beq.n	80077fa <UART_RxISR_8BIT+0x136>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077d0:	e853 3f00 	ldrex	r3, [r3]
 80077d4:	623b      	str	r3, [r7, #32]
   return(result);
 80077d6:	6a3b      	ldr	r3, [r7, #32]
 80077d8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80077dc:	663b      	str	r3, [r7, #96]	; 0x60
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	461a      	mov	r2, r3
 80077e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80077e6:	633b      	str	r3, [r7, #48]	; 0x30
 80077e8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80077ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80077ee:	e841 2300 	strex	r3, r2, [r1]
 80077f2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80077f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d1e6      	bne.n	80077c8 <UART_RxISR_8BIT+0x104>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80077fe:	2b01      	cmp	r3, #1
 8007800:	d12e      	bne.n	8007860 <UART_RxISR_8BIT+0x19c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2200      	movs	r2, #0
 8007806:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800780e:	693b      	ldr	r3, [r7, #16]
 8007810:	e853 3f00 	ldrex	r3, [r3]
 8007814:	60fb      	str	r3, [r7, #12]
   return(result);
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	f023 0310 	bic.w	r3, r3, #16
 800781c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	461a      	mov	r2, r3
 8007824:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007826:	61fb      	str	r3, [r7, #28]
 8007828:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800782a:	69b9      	ldr	r1, [r7, #24]
 800782c:	69fa      	ldr	r2, [r7, #28]
 800782e:	e841 2300 	strex	r3, r2, [r1]
 8007832:	617b      	str	r3, [r7, #20]
   return(result);
 8007834:	697b      	ldr	r3, [r7, #20]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d1e6      	bne.n	8007808 <UART_RxISR_8BIT+0x144>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	69db      	ldr	r3, [r3, #28]
 8007840:	f003 0310 	and.w	r3, r3, #16
 8007844:	2b10      	cmp	r3, #16
 8007846:	d103      	bne.n	8007850 <UART_RxISR_8BIT+0x18c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	2210      	movs	r2, #16
 800784e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007856:	4619      	mov	r1, r3
 8007858:	6878      	ldr	r0, [r7, #4]
 800785a:	f7ff f9fb 	bl	8006c54 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800785e:	e00b      	b.n	8007878 <UART_RxISR_8BIT+0x1b4>
        HAL_UART_RxCpltCallback(huart);
 8007860:	6878      	ldr	r0, [r7, #4]
 8007862:	f000 ff4d 	bl	8008700 <HAL_UART_RxCpltCallback>
}
 8007866:	e007      	b.n	8007878 <UART_RxISR_8BIT+0x1b4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	699a      	ldr	r2, [r3, #24]
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f042 0208 	orr.w	r2, r2, #8
 8007876:	619a      	str	r2, [r3, #24]
}
 8007878:	bf00      	nop
 800787a:	3770      	adds	r7, #112	; 0x70
 800787c:	46bd      	mov	sp, r7
 800787e:	bd80      	pop	{r7, pc}
 8007880:	46002400 	.word	0x46002400
 8007884:	56002400 	.word	0x56002400

08007888 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b09c      	sub	sp, #112	; 0x70
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007896:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80078a0:	2b22      	cmp	r3, #34	; 0x22
 80078a2:	f040 80c3 	bne.w	8007a2c <UART_RxISR_16BIT+0x1a4>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078ac:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078b4:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80078b6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80078ba:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80078be:	4013      	ands	r3, r2
 80078c0:	b29a      	uxth	r2, r3
 80078c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80078c4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078ca:	1c9a      	adds	r2, r3, #2
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80078d6:	b29b      	uxth	r3, r3
 80078d8:	3b01      	subs	r3, #1
 80078da:	b29a      	uxth	r2, r3
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80078e8:	b29b      	uxth	r3, r3
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	f040 80a6 	bne.w	8007a3c <UART_RxISR_16BIT+0x1b4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80078f8:	e853 3f00 	ldrex	r3, [r3]
 80078fc:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80078fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007900:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007904:	667b      	str	r3, [r7, #100]	; 0x64
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	461a      	mov	r2, r3
 800790c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800790e:	657b      	str	r3, [r7, #84]	; 0x54
 8007910:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007912:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007914:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007916:	e841 2300 	strex	r3, r2, [r1]
 800791a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800791c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800791e:	2b00      	cmp	r3, #0
 8007920:	d1e6      	bne.n	80078f0 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	3308      	adds	r3, #8
 8007928:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800792a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800792c:	e853 3f00 	ldrex	r3, [r3]
 8007930:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007934:	f023 0301 	bic.w	r3, r3, #1
 8007938:	663b      	str	r3, [r7, #96]	; 0x60
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	3308      	adds	r3, #8
 8007940:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007942:	643a      	str	r2, [r7, #64]	; 0x40
 8007944:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007946:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007948:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800794a:	e841 2300 	strex	r3, r2, [r1]
 800794e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007952:	2b00      	cmp	r3, #0
 8007954:	d1e5      	bne.n	8007922 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2220      	movs	r2, #32
 800795a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2200      	movs	r2, #0
 8007962:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2200      	movs	r2, #0
 8007968:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	4a35      	ldr	r2, [pc, #212]	; (8007a44 <UART_RxISR_16BIT+0x1bc>)
 8007970:	4293      	cmp	r3, r2
 8007972:	d024      	beq.n	80079be <UART_RxISR_16BIT+0x136>
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	4a33      	ldr	r2, [pc, #204]	; (8007a48 <UART_RxISR_16BIT+0x1c0>)
 800797a:	4293      	cmp	r3, r2
 800797c:	d01f      	beq.n	80079be <UART_RxISR_16BIT+0x136>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	685b      	ldr	r3, [r3, #4]
 8007984:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007988:	2b00      	cmp	r3, #0
 800798a:	d018      	beq.n	80079be <UART_RxISR_16BIT+0x136>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007992:	6a3b      	ldr	r3, [r7, #32]
 8007994:	e853 3f00 	ldrex	r3, [r3]
 8007998:	61fb      	str	r3, [r7, #28]
   return(result);
 800799a:	69fb      	ldr	r3, [r7, #28]
 800799c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80079a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	461a      	mov	r2, r3
 80079a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80079aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80079ac:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80079b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80079b2:	e841 2300 	strex	r3, r2, [r1]
 80079b6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80079b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d1e6      	bne.n	800798c <UART_RxISR_16BIT+0x104>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80079c2:	2b01      	cmp	r3, #1
 80079c4:	d12e      	bne.n	8007a24 <UART_RxISR_16BIT+0x19c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	2200      	movs	r2, #0
 80079ca:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	e853 3f00 	ldrex	r3, [r3]
 80079d8:	60bb      	str	r3, [r7, #8]
   return(result);
 80079da:	68bb      	ldr	r3, [r7, #8]
 80079dc:	f023 0310 	bic.w	r3, r3, #16
 80079e0:	65bb      	str	r3, [r7, #88]	; 0x58
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	461a      	mov	r2, r3
 80079e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80079ea:	61bb      	str	r3, [r7, #24]
 80079ec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079ee:	6979      	ldr	r1, [r7, #20]
 80079f0:	69ba      	ldr	r2, [r7, #24]
 80079f2:	e841 2300 	strex	r3, r2, [r1]
 80079f6:	613b      	str	r3, [r7, #16]
   return(result);
 80079f8:	693b      	ldr	r3, [r7, #16]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d1e6      	bne.n	80079cc <UART_RxISR_16BIT+0x144>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	69db      	ldr	r3, [r3, #28]
 8007a04:	f003 0310 	and.w	r3, r3, #16
 8007a08:	2b10      	cmp	r3, #16
 8007a0a:	d103      	bne.n	8007a14 <UART_RxISR_16BIT+0x18c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	2210      	movs	r2, #16
 8007a12:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007a1a:	4619      	mov	r1, r3
 8007a1c:	6878      	ldr	r0, [r7, #4]
 8007a1e:	f7ff f919 	bl	8006c54 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007a22:	e00b      	b.n	8007a3c <UART_RxISR_16BIT+0x1b4>
        HAL_UART_RxCpltCallback(huart);
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	f000 fe6b 	bl	8008700 <HAL_UART_RxCpltCallback>
}
 8007a2a:	e007      	b.n	8007a3c <UART_RxISR_16BIT+0x1b4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	699a      	ldr	r2, [r3, #24]
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f042 0208 	orr.w	r2, r2, #8
 8007a3a:	619a      	str	r2, [r3, #24]
}
 8007a3c:	bf00      	nop
 8007a3e:	3770      	adds	r7, #112	; 0x70
 8007a40:	46bd      	mov	sp, r7
 8007a42:	bd80      	pop	{r7, pc}
 8007a44:	46002400 	.word	0x46002400
 8007a48:	56002400 	.word	0x56002400

08007a4c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b0ac      	sub	sp, #176	; 0xb0
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007a5a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	69db      	ldr	r3, [r3, #28]
 8007a64:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	689b      	ldr	r3, [r3, #8]
 8007a78:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a82:	2b22      	cmp	r3, #34	; 0x22
 8007a84:	f040 8187 	bne.w	8007d96 <UART_RxISR_8BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007a8e:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007a92:	e12a      	b.n	8007cea <UART_RxISR_8BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a9a:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007a9e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8007aa2:	b2d9      	uxtb	r1, r3
 8007aa4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8007aa8:	b2da      	uxtb	r2, r3
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007aae:	400a      	ands	r2, r1
 8007ab0:	b2d2      	uxtb	r2, r2
 8007ab2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ab8:	1c5a      	adds	r2, r3, #1
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007ac4:	b29b      	uxth	r3, r3
 8007ac6:	3b01      	subs	r3, #1
 8007ac8:	b29a      	uxth	r2, r3
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	69db      	ldr	r3, [r3, #28]
 8007ad6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007ada:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007ade:	f003 0307 	and.w	r3, r3, #7
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d053      	beq.n	8007b8e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007ae6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007aea:	f003 0301 	and.w	r3, r3, #1
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d011      	beq.n	8007b16 <UART_RxISR_8BIT_FIFOEN+0xca>
 8007af2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007af6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d00b      	beq.n	8007b16 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	2201      	movs	r2, #1
 8007b04:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b0c:	f043 0201 	orr.w	r2, r3, #1
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007b16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007b1a:	f003 0302 	and.w	r3, r3, #2
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d011      	beq.n	8007b46 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8007b22:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007b26:	f003 0301 	and.w	r3, r3, #1
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d00b      	beq.n	8007b46 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	2202      	movs	r2, #2
 8007b34:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b3c:	f043 0204 	orr.w	r2, r3, #4
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007b46:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007b4a:	f003 0304 	and.w	r3, r3, #4
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d011      	beq.n	8007b76 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8007b52:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007b56:	f003 0301 	and.w	r3, r3, #1
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d00b      	beq.n	8007b76 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	2204      	movs	r2, #4
 8007b64:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b6c:	f043 0202 	orr.w	r2, r3, #2
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d006      	beq.n	8007b8e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007b80:	6878      	ldr	r0, [r7, #4]
 8007b82:	f7ff f85d 	bl	8006c40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2200      	movs	r2, #0
 8007b8a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007b94:	b29b      	uxth	r3, r3
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	f040 80a7 	bne.w	8007cea <UART_RxISR_8BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ba2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007ba4:	e853 3f00 	ldrex	r3, [r3]
 8007ba8:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8007baa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007bb0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	461a      	mov	r2, r3
 8007bba:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007bbe:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007bc0:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bc2:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8007bc4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007bc6:	e841 2300 	strex	r3, r2, [r1]
 8007bca:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8007bcc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d1e4      	bne.n	8007b9c <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	3308      	adds	r3, #8
 8007bd8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007bdc:	e853 3f00 	ldrex	r3, [r3]
 8007be0:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8007be2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007be4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007be8:	f023 0301 	bic.w	r3, r3, #1
 8007bec:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	3308      	adds	r3, #8
 8007bf6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007bfa:	66ba      	str	r2, [r7, #104]	; 0x68
 8007bfc:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bfe:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8007c00:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007c02:	e841 2300 	strex	r3, r2, [r1]
 8007c06:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8007c08:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d1e1      	bne.n	8007bd2 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	2220      	movs	r2, #32
 8007c12:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2200      	movs	r2, #0
 8007c1a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2200      	movs	r2, #0
 8007c20:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	4a62      	ldr	r2, [pc, #392]	; (8007db0 <UART_RxISR_8BIT_FIFOEN+0x364>)
 8007c28:	4293      	cmp	r3, r2
 8007c2a:	d026      	beq.n	8007c7a <UART_RxISR_8BIT_FIFOEN+0x22e>
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	4a60      	ldr	r2, [pc, #384]	; (8007db4 <UART_RxISR_8BIT_FIFOEN+0x368>)
 8007c32:	4293      	cmp	r3, r2
 8007c34:	d021      	beq.n	8007c7a <UART_RxISR_8BIT_FIFOEN+0x22e>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	685b      	ldr	r3, [r3, #4]
 8007c3c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d01a      	beq.n	8007c7a <UART_RxISR_8BIT_FIFOEN+0x22e>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c4c:	e853 3f00 	ldrex	r3, [r3]
 8007c50:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007c52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c54:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007c58:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	461a      	mov	r2, r3
 8007c62:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007c66:	657b      	str	r3, [r7, #84]	; 0x54
 8007c68:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c6a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007c6c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007c6e:	e841 2300 	strex	r3, r2, [r1]
 8007c72:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007c74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d1e4      	bne.n	8007c44 <UART_RxISR_8BIT_FIFOEN+0x1f8>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c7e:	2b01      	cmp	r3, #1
 8007c80:	d130      	bne.n	8007ce4 <UART_RxISR_8BIT_FIFOEN+0x298>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2200      	movs	r2, #0
 8007c86:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c90:	e853 3f00 	ldrex	r3, [r3]
 8007c94:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c98:	f023 0310 	bic.w	r3, r3, #16
 8007c9c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	461a      	mov	r2, r3
 8007ca6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007caa:	643b      	str	r3, [r7, #64]	; 0x40
 8007cac:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cae:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007cb0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007cb2:	e841 2300 	strex	r3, r2, [r1]
 8007cb6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007cb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d1e4      	bne.n	8007c88 <UART_RxISR_8BIT_FIFOEN+0x23c>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	69db      	ldr	r3, [r3, #28]
 8007cc4:	f003 0310 	and.w	r3, r3, #16
 8007cc8:	2b10      	cmp	r3, #16
 8007cca:	d103      	bne.n	8007cd4 <UART_RxISR_8BIT_FIFOEN+0x288>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	2210      	movs	r2, #16
 8007cd2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007cda:	4619      	mov	r1, r3
 8007cdc:	6878      	ldr	r0, [r7, #4]
 8007cde:	f7fe ffb9 	bl	8006c54 <HAL_UARTEx_RxEventCallback>
 8007ce2:	e002      	b.n	8007cea <UART_RxISR_8BIT_FIFOEN+0x29e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007ce4:	6878      	ldr	r0, [r7, #4]
 8007ce6:	f000 fd0b 	bl	8008700 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007cea:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d006      	beq.n	8007d00 <UART_RxISR_8BIT_FIFOEN+0x2b4>
 8007cf2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007cf6:	f003 0320 	and.w	r3, r3, #32
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	f47f aeca 	bne.w	8007a94 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007d06:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007d0a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d049      	beq.n	8007da6 <UART_RxISR_8BIT_FIFOEN+0x35a>
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007d18:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8007d1c:	429a      	cmp	r2, r3
 8007d1e:	d242      	bcs.n	8007da6 <UART_RxISR_8BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	3308      	adds	r3, #8
 8007d26:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d28:	6a3b      	ldr	r3, [r7, #32]
 8007d2a:	e853 3f00 	ldrex	r3, [r3]
 8007d2e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007d30:	69fb      	ldr	r3, [r7, #28]
 8007d32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007d36:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	3308      	adds	r3, #8
 8007d40:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8007d44:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007d46:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d48:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007d4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d4c:	e841 2300 	strex	r3, r2, [r1]
 8007d50:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d1e3      	bne.n	8007d20 <UART_RxISR_8BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	4a17      	ldr	r2, [pc, #92]	; (8007db8 <UART_RxISR_8BIT_FIFOEN+0x36c>)
 8007d5c:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	e853 3f00 	ldrex	r3, [r3]
 8007d6a:	60bb      	str	r3, [r7, #8]
   return(result);
 8007d6c:	68bb      	ldr	r3, [r7, #8]
 8007d6e:	f043 0320 	orr.w	r3, r3, #32
 8007d72:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	461a      	mov	r2, r3
 8007d7c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007d80:	61bb      	str	r3, [r7, #24]
 8007d82:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d84:	6979      	ldr	r1, [r7, #20]
 8007d86:	69ba      	ldr	r2, [r7, #24]
 8007d88:	e841 2300 	strex	r3, r2, [r1]
 8007d8c:	613b      	str	r3, [r7, #16]
   return(result);
 8007d8e:	693b      	ldr	r3, [r7, #16]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d1e4      	bne.n	8007d5e <UART_RxISR_8BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007d94:	e007      	b.n	8007da6 <UART_RxISR_8BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	699a      	ldr	r2, [r3, #24]
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f042 0208 	orr.w	r2, r2, #8
 8007da4:	619a      	str	r2, [r3, #24]
}
 8007da6:	bf00      	nop
 8007da8:	37b0      	adds	r7, #176	; 0xb0
 8007daa:	46bd      	mov	sp, r7
 8007dac:	bd80      	pop	{r7, pc}
 8007dae:	bf00      	nop
 8007db0:	46002400 	.word	0x46002400
 8007db4:	56002400 	.word	0x56002400
 8007db8:	080076c5 	.word	0x080076c5

08007dbc <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b0ae      	sub	sp, #184	; 0xb8
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007dca:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	69db      	ldr	r3, [r3, #28]
 8007dd4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	689b      	ldr	r3, [r3, #8]
 8007de8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007df2:	2b22      	cmp	r3, #34	; 0x22
 8007df4:	f040 818b 	bne.w	800810e <UART_RxISR_16BIT_FIFOEN+0x352>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007dfe:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007e02:	e12e      	b.n	8008062 <UART_RxISR_16BIT_FIFOEN+0x2a6>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e0a:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e12:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8007e16:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8007e1a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8007e1e:	4013      	ands	r3, r2
 8007e20:	b29a      	uxth	r2, r3
 8007e22:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007e26:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e2c:	1c9a      	adds	r2, r3, #2
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007e38:	b29b      	uxth	r3, r3
 8007e3a:	3b01      	subs	r3, #1
 8007e3c:	b29a      	uxth	r2, r3
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	69db      	ldr	r3, [r3, #28]
 8007e4a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007e4e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007e52:	f003 0307 	and.w	r3, r3, #7
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d053      	beq.n	8007f02 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007e5a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007e5e:	f003 0301 	and.w	r3, r3, #1
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d011      	beq.n	8007e8a <UART_RxISR_16BIT_FIFOEN+0xce>
 8007e66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007e6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d00b      	beq.n	8007e8a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	2201      	movs	r2, #1
 8007e78:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e80:	f043 0201 	orr.w	r2, r3, #1
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007e8a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007e8e:	f003 0302 	and.w	r3, r3, #2
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d011      	beq.n	8007eba <UART_RxISR_16BIT_FIFOEN+0xfe>
 8007e96:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007e9a:	f003 0301 	and.w	r3, r3, #1
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d00b      	beq.n	8007eba <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	2202      	movs	r2, #2
 8007ea8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007eb0:	f043 0204 	orr.w	r2, r3, #4
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007eba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007ebe:	f003 0304 	and.w	r3, r3, #4
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d011      	beq.n	8007eea <UART_RxISR_16BIT_FIFOEN+0x12e>
 8007ec6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007eca:	f003 0301 	and.w	r3, r3, #1
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d00b      	beq.n	8007eea <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	2204      	movs	r2, #4
 8007ed8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ee0:	f043 0202 	orr.w	r2, r3, #2
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d006      	beq.n	8007f02 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007ef4:	6878      	ldr	r0, [r7, #4]
 8007ef6:	f7fe fea3 	bl	8006c40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2200      	movs	r2, #0
 8007efe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007f08:	b29b      	uxth	r3, r3
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	f040 80a9 	bne.w	8008062 <UART_RxISR_16BIT_FIFOEN+0x2a6>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007f18:	e853 3f00 	ldrex	r3, [r3]
 8007f1c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007f1e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007f20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007f24:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	461a      	mov	r2, r3
 8007f2e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007f32:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007f36:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f38:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007f3a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007f3e:	e841 2300 	strex	r3, r2, [r1]
 8007f42:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007f44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d1e2      	bne.n	8007f10 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	3308      	adds	r3, #8
 8007f50:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f52:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007f54:	e853 3f00 	ldrex	r3, [r3]
 8007f58:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007f5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007f5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007f60:	f023 0301 	bic.w	r3, r3, #1
 8007f64:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	3308      	adds	r3, #8
 8007f6e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8007f72:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007f74:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f76:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007f78:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007f7a:	e841 2300 	strex	r3, r2, [r1]
 8007f7e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007f80:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d1e1      	bne.n	8007f4a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2220      	movs	r2, #32
 8007f8a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	2200      	movs	r2, #0
 8007f92:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2200      	movs	r2, #0
 8007f98:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	4a62      	ldr	r2, [pc, #392]	; (8008128 <UART_RxISR_16BIT_FIFOEN+0x36c>)
 8007fa0:	4293      	cmp	r3, r2
 8007fa2:	d026      	beq.n	8007ff2 <UART_RxISR_16BIT_FIFOEN+0x236>
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	4a60      	ldr	r2, [pc, #384]	; (800812c <UART_RxISR_16BIT_FIFOEN+0x370>)
 8007faa:	4293      	cmp	r3, r2
 8007fac:	d021      	beq.n	8007ff2 <UART_RxISR_16BIT_FIFOEN+0x236>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	685b      	ldr	r3, [r3, #4]
 8007fb4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d01a      	beq.n	8007ff2 <UART_RxISR_16BIT_FIFOEN+0x236>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007fc4:	e853 3f00 	ldrex	r3, [r3]
 8007fc8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007fca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007fcc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007fd0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	461a      	mov	r2, r3
 8007fda:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007fde:	65bb      	str	r3, [r7, #88]	; 0x58
 8007fe0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fe2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007fe4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007fe6:	e841 2300 	strex	r3, r2, [r1]
 8007fea:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007fec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d1e4      	bne.n	8007fbc <UART_RxISR_16BIT_FIFOEN+0x200>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ff6:	2b01      	cmp	r3, #1
 8007ff8:	d130      	bne.n	800805c <UART_RxISR_16BIT_FIFOEN+0x2a0>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008008:	e853 3f00 	ldrex	r3, [r3]
 800800c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800800e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008010:	f023 0310 	bic.w	r3, r3, #16
 8008014:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	461a      	mov	r2, r3
 800801e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008022:	647b      	str	r3, [r7, #68]	; 0x44
 8008024:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008026:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008028:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800802a:	e841 2300 	strex	r3, r2, [r1]
 800802e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008030:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008032:	2b00      	cmp	r3, #0
 8008034:	d1e4      	bne.n	8008000 <UART_RxISR_16BIT_FIFOEN+0x244>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	69db      	ldr	r3, [r3, #28]
 800803c:	f003 0310 	and.w	r3, r3, #16
 8008040:	2b10      	cmp	r3, #16
 8008042:	d103      	bne.n	800804c <UART_RxISR_16BIT_FIFOEN+0x290>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	2210      	movs	r2, #16
 800804a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008052:	4619      	mov	r1, r3
 8008054:	6878      	ldr	r0, [r7, #4]
 8008056:	f7fe fdfd 	bl	8006c54 <HAL_UARTEx_RxEventCallback>
 800805a:	e002      	b.n	8008062 <UART_RxISR_16BIT_FIFOEN+0x2a6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800805c:	6878      	ldr	r0, [r7, #4]
 800805e:	f000 fb4f 	bl	8008700 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008062:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8008066:	2b00      	cmp	r3, #0
 8008068:	d006      	beq.n	8008078 <UART_RxISR_16BIT_FIFOEN+0x2bc>
 800806a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800806e:	f003 0320 	and.w	r3, r3, #32
 8008072:	2b00      	cmp	r3, #0
 8008074:	f47f aec6 	bne.w	8007e04 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800807e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008082:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8008086:	2b00      	cmp	r3, #0
 8008088:	d049      	beq.n	800811e <UART_RxISR_16BIT_FIFOEN+0x362>
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008090:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8008094:	429a      	cmp	r2, r3
 8008096:	d242      	bcs.n	800811e <UART_RxISR_16BIT_FIFOEN+0x362>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	3308      	adds	r3, #8
 800809e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080a2:	e853 3f00 	ldrex	r3, [r3]
 80080a6:	623b      	str	r3, [r7, #32]
   return(result);
 80080a8:	6a3b      	ldr	r3, [r7, #32]
 80080aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80080ae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	3308      	adds	r3, #8
 80080b8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80080bc:	633a      	str	r2, [r7, #48]	; 0x30
 80080be:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080c0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80080c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80080c4:	e841 2300 	strex	r3, r2, [r1]
 80080c8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80080ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d1e3      	bne.n	8008098 <UART_RxISR_16BIT_FIFOEN+0x2dc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	4a17      	ldr	r2, [pc, #92]	; (8008130 <UART_RxISR_16BIT_FIFOEN+0x374>)
 80080d4:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080dc:	693b      	ldr	r3, [r7, #16]
 80080de:	e853 3f00 	ldrex	r3, [r3]
 80080e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	f043 0320 	orr.w	r3, r3, #32
 80080ea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	461a      	mov	r2, r3
 80080f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80080f8:	61fb      	str	r3, [r7, #28]
 80080fa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080fc:	69b9      	ldr	r1, [r7, #24]
 80080fe:	69fa      	ldr	r2, [r7, #28]
 8008100:	e841 2300 	strex	r3, r2, [r1]
 8008104:	617b      	str	r3, [r7, #20]
   return(result);
 8008106:	697b      	ldr	r3, [r7, #20]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d1e4      	bne.n	80080d6 <UART_RxISR_16BIT_FIFOEN+0x31a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800810c:	e007      	b.n	800811e <UART_RxISR_16BIT_FIFOEN+0x362>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	699a      	ldr	r2, [r3, #24]
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	f042 0208 	orr.w	r2, r2, #8
 800811c:	619a      	str	r2, [r3, #24]
}
 800811e:	bf00      	nop
 8008120:	37b8      	adds	r7, #184	; 0xb8
 8008122:	46bd      	mov	sp, r7
 8008124:	bd80      	pop	{r7, pc}
 8008126:	bf00      	nop
 8008128:	46002400 	.word	0x46002400
 800812c:	56002400 	.word	0x56002400
 8008130:	08007889 	.word	0x08007889

08008134 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008134:	b480      	push	{r7}
 8008136:	b083      	sub	sp, #12
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800813c:	bf00      	nop
 800813e:	370c      	adds	r7, #12
 8008140:	46bd      	mov	sp, r7
 8008142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008146:	4770      	bx	lr

08008148 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008148:	b480      	push	{r7}
 800814a:	b083      	sub	sp, #12
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008150:	bf00      	nop
 8008152:	370c      	adds	r7, #12
 8008154:	46bd      	mov	sp, r7
 8008156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815a:	4770      	bx	lr

0800815c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800815c:	b480      	push	{r7}
 800815e:	b085      	sub	sp, #20
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800816a:	2b01      	cmp	r3, #1
 800816c:	d101      	bne.n	8008172 <HAL_UARTEx_DisableFifoMode+0x16>
 800816e:	2302      	movs	r3, #2
 8008170:	e027      	b.n	80081c2 <HAL_UARTEx_DisableFifoMode+0x66>
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2201      	movs	r2, #1
 8008176:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2224      	movs	r2, #36	; 0x24
 800817e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	681a      	ldr	r2, [r3, #0]
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	f022 0201 	bic.w	r2, r2, #1
 8008198:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80081a0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2200      	movs	r2, #0
 80081a6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	68fa      	ldr	r2, [r7, #12]
 80081ae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2220      	movs	r2, #32
 80081b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2200      	movs	r2, #0
 80081bc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80081c0:	2300      	movs	r3, #0
}
 80081c2:	4618      	mov	r0, r3
 80081c4:	3714      	adds	r7, #20
 80081c6:	46bd      	mov	sp, r7
 80081c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081cc:	4770      	bx	lr

080081ce <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80081ce:	b580      	push	{r7, lr}
 80081d0:	b084      	sub	sp, #16
 80081d2:	af00      	add	r7, sp, #0
 80081d4:	6078      	str	r0, [r7, #4]
 80081d6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80081de:	2b01      	cmp	r3, #1
 80081e0:	d101      	bne.n	80081e6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80081e2:	2302      	movs	r3, #2
 80081e4:	e02d      	b.n	8008242 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	2201      	movs	r2, #1
 80081ea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	2224      	movs	r2, #36	; 0x24
 80081f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	681a      	ldr	r2, [r3, #0]
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	f022 0201 	bic.w	r2, r2, #1
 800820c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	689b      	ldr	r3, [r3, #8]
 8008214:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	683a      	ldr	r2, [r7, #0]
 800821e:	430a      	orrs	r2, r1
 8008220:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008222:	6878      	ldr	r0, [r7, #4]
 8008224:	f000 f850 	bl	80082c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	68fa      	ldr	r2, [r7, #12]
 800822e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2220      	movs	r2, #32
 8008234:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2200      	movs	r2, #0
 800823c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008240:	2300      	movs	r3, #0
}
 8008242:	4618      	mov	r0, r3
 8008244:	3710      	adds	r7, #16
 8008246:	46bd      	mov	sp, r7
 8008248:	bd80      	pop	{r7, pc}

0800824a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800824a:	b580      	push	{r7, lr}
 800824c:	b084      	sub	sp, #16
 800824e:	af00      	add	r7, sp, #0
 8008250:	6078      	str	r0, [r7, #4]
 8008252:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800825a:	2b01      	cmp	r3, #1
 800825c:	d101      	bne.n	8008262 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800825e:	2302      	movs	r3, #2
 8008260:	e02d      	b.n	80082be <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	2201      	movs	r2, #1
 8008266:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	2224      	movs	r2, #36	; 0x24
 800826e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	681a      	ldr	r2, [r3, #0]
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	f022 0201 	bic.w	r2, r2, #1
 8008288:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	689b      	ldr	r3, [r3, #8]
 8008290:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	683a      	ldr	r2, [r7, #0]
 800829a:	430a      	orrs	r2, r1
 800829c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800829e:	6878      	ldr	r0, [r7, #4]
 80082a0:	f000 f812 	bl	80082c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	68fa      	ldr	r2, [r7, #12]
 80082aa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2220      	movs	r2, #32
 80082b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2200      	movs	r2, #0
 80082b8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80082bc:	2300      	movs	r3, #0
}
 80082be:	4618      	mov	r0, r3
 80082c0:	3710      	adds	r7, #16
 80082c2:	46bd      	mov	sp, r7
 80082c4:	bd80      	pop	{r7, pc}
	...

080082c8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80082c8:	b480      	push	{r7}
 80082ca:	b085      	sub	sp, #20
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d108      	bne.n	80082ea <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	2201      	movs	r2, #1
 80082dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2201      	movs	r2, #1
 80082e4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80082e8:	e031      	b.n	800834e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80082ea:	2308      	movs	r3, #8
 80082ec:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80082ee:	2308      	movs	r3, #8
 80082f0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	689b      	ldr	r3, [r3, #8]
 80082f8:	0e5b      	lsrs	r3, r3, #25
 80082fa:	b2db      	uxtb	r3, r3
 80082fc:	f003 0307 	and.w	r3, r3, #7
 8008300:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	689b      	ldr	r3, [r3, #8]
 8008308:	0f5b      	lsrs	r3, r3, #29
 800830a:	b2db      	uxtb	r3, r3
 800830c:	f003 0307 	and.w	r3, r3, #7
 8008310:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008312:	7bbb      	ldrb	r3, [r7, #14]
 8008314:	7b3a      	ldrb	r2, [r7, #12]
 8008316:	4911      	ldr	r1, [pc, #68]	; (800835c <UARTEx_SetNbDataToProcess+0x94>)
 8008318:	5c8a      	ldrb	r2, [r1, r2]
 800831a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800831e:	7b3a      	ldrb	r2, [r7, #12]
 8008320:	490f      	ldr	r1, [pc, #60]	; (8008360 <UARTEx_SetNbDataToProcess+0x98>)
 8008322:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008324:	fb93 f3f2 	sdiv	r3, r3, r2
 8008328:	b29a      	uxth	r2, r3
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008330:	7bfb      	ldrb	r3, [r7, #15]
 8008332:	7b7a      	ldrb	r2, [r7, #13]
 8008334:	4909      	ldr	r1, [pc, #36]	; (800835c <UARTEx_SetNbDataToProcess+0x94>)
 8008336:	5c8a      	ldrb	r2, [r1, r2]
 8008338:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800833c:	7b7a      	ldrb	r2, [r7, #13]
 800833e:	4908      	ldr	r1, [pc, #32]	; (8008360 <UARTEx_SetNbDataToProcess+0x98>)
 8008340:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008342:	fb93 f3f2 	sdiv	r3, r3, r2
 8008346:	b29a      	uxth	r2, r3
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800834e:	bf00      	nop
 8008350:	3714      	adds	r7, #20
 8008352:	46bd      	mov	sp, r7
 8008354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008358:	4770      	bx	lr
 800835a:	bf00      	nop
 800835c:	0800c3b8 	.word	0x0800c3b8
 8008360:	0800c3c0 	.word	0x0800c3c0

08008364 <initializeBGLIB>:

UART_HandleTypeDef *huartBGAPI;

/* Functions */

void initializeBGLIB(UART_HandleTypeDef *huart) {
 8008364:	b480      	push	{r7}
 8008366:	b083      	sub	sp, #12
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
	// Get pointer to UART handle that will be used for executing bgapi operations
	huartBGAPI = huart;
 800836c:	4a05      	ldr	r2, [pc, #20]	; (8008384 <initializeBGLIB+0x20>)
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	6013      	str	r3, [r2, #0]

	/* Initialize BGLIB with our output function for sending messages. */
	BGLIB_INITIALIZE(onMessageSend);
 8008372:	4b05      	ldr	r3, [pc, #20]	; (8008388 <initializeBGLIB+0x24>)
 8008374:	4a05      	ldr	r2, [pc, #20]	; (800838c <initializeBGLIB+0x28>)
 8008376:	601a      	str	r2, [r3, #0]
}
 8008378:	bf00      	nop
 800837a:	370c      	adds	r7, #12
 800837c:	46bd      	mov	sp, r7
 800837e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008382:	4770      	bx	lr
 8008384:	200000c4 	.word	0x200000c4
 8008388:	200000c0 	.word	0x200000c0
 800838c:	08008391 	.word	0x08008391

08008390 <onMessageSend>:
 * @param msg_len  Length of the message.
 * @param msg_data Message data, including the header.
 * @param data_len Optional variable data length.
 * @param data     Optional variable data.
 */
static void onMessageSend(uint8_t msg_len, uint8_t *msg_data, uint16_t data_len, uint8_t *data) {
 8008390:	b580      	push	{r7, lr}
 8008392:	b086      	sub	sp, #24
 8008394:	af00      	add	r7, sp, #0
 8008396:	60b9      	str	r1, [r7, #8]
 8008398:	607b      	str	r3, [r7, #4]
 800839a:	4603      	mov	r3, r0
 800839c:	73fb      	strb	r3, [r7, #15]
 800839e:	4613      	mov	r3, r2
 80083a0:	81bb      	strh	r3, [r7, #12]
	/* Variable for storing function return values. */
	int ret;

	//printf("onMessageSend()\r\n");

	ret = uart_tx(huartBGAPI, msg_len, (char*) msg_data);
 80083a2:	4b19      	ldr	r3, [pc, #100]	; (8008408 <onMessageSend+0x78>)
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	7bf9      	ldrb	r1, [r7, #15]
 80083a8:	68ba      	ldr	r2, [r7, #8]
 80083aa:	4618      	mov	r0, r3
 80083ac:	f001 fb14 	bl	80099d8 <uart_tx>
 80083b0:	6178      	str	r0, [r7, #20]
	if (ret < 0) {
 80083b2:	697b      	ldr	r3, [r7, #20]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	da09      	bge.n	80083cc <onMessageSend+0x3c>
		printf("onMessageSend() - failed to write to serial port, ret: %d, errno: %d\r\n", ret,
		errno);
 80083b8:	f002 f978 	bl	800a6ac <__errno>
 80083bc:	4603      	mov	r3, r0
		printf("onMessageSend() - failed to write to serial port, ret: %d, errno: %d\r\n", ret,
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	461a      	mov	r2, r3
 80083c2:	6979      	ldr	r1, [r7, #20]
 80083c4:	4811      	ldr	r0, [pc, #68]	; (800840c <onMessageSend+0x7c>)
 80083c6:	f001 ffc5 	bl	800a354 <iprintf>
		return;
 80083ca:	e01a      	b.n	8008402 <onMessageSend+0x72>
	}

	if (data_len && data) {
 80083cc:	89bb      	ldrh	r3, [r7, #12]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d017      	beq.n	8008402 <onMessageSend+0x72>
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d014      	beq.n	8008402 <onMessageSend+0x72>
		ret = uart_tx(huartBGAPI, data_len, (char*) data);
 80083d8:	4b0b      	ldr	r3, [pc, #44]	; (8008408 <onMessageSend+0x78>)
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	89b9      	ldrh	r1, [r7, #12]
 80083de:	687a      	ldr	r2, [r7, #4]
 80083e0:	4618      	mov	r0, r3
 80083e2:	f001 faf9 	bl	80099d8 <uart_tx>
 80083e6:	6178      	str	r0, [r7, #20]

		if (ret < 0) {
 80083e8:	697b      	ldr	r3, [r7, #20]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	da09      	bge.n	8008402 <onMessageSend+0x72>
			printf("onMessageSend() - failed to write to serial port, ret: %d, errno: %d\r\n", ret,
					errno);
 80083ee:	f002 f95d 	bl	800a6ac <__errno>
 80083f2:	4603      	mov	r3, r0
			printf("onMessageSend() - failed to write to serial port, ret: %d, errno: %d\r\n", ret,
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	461a      	mov	r2, r3
 80083f8:	6979      	ldr	r1, [r7, #20]
 80083fa:	4804      	ldr	r0, [pc, #16]	; (800840c <onMessageSend+0x7c>)
 80083fc:	f001 ffaa 	bl	800a354 <iprintf>
			return;
 8008400:	bf00      	nop
		}
	}
}
 8008402:	3718      	adds	r7, #24
 8008404:	46bd      	mov	sp, r7
 8008406:	bd80      	pop	{r7, pc}
 8008408:	200000c4 	.word	0x200000c4
 800840c:	0800b060 	.word	0x0800b060

08008410 <setBT122UARTMode>:
 * Note: LED0 is active low.
 *
 * @param mode 0: set BT122 UART in BGAPI mode
 * 			   1: set BT122 UART in DATA  mode
 */
HAL_StatusTypeDef setBT122UARTMode(int mode) {
 8008410:	b580      	push	{r7, lr}
 8008412:	b084      	sub	sp, #16
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
	int currentMode = HAL_GPIO_ReadPin(BT122_PF3_GPIO_Port, BT122_PF3_Pin);
 8008418:	2120      	movs	r1, #32
 800841a:	4822      	ldr	r0, [pc, #136]	; (80084a4 <setBT122UARTMode+0x94>)
 800841c:	f7f9 f82a 	bl	8001474 <HAL_GPIO_ReadPin>
 8008420:	4603      	mov	r3, r0
 8008422:	60fb      	str	r3, [r7, #12]

	if (mode == 0) {
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d117      	bne.n	800845a <setBT122UARTMode+0x4a>
		// set BT122 UART to BGAPI mode
		if (currentMode == 0) {
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d103      	bne.n	8008438 <setBT122UARTMode+0x28>
			// already in BGAPI mode
			printf("Already in BGAPI mode\n");
 8008430:	481d      	ldr	r0, [pc, #116]	; (80084a8 <setBT122UARTMode+0x98>)
 8008432:	f001 fffd 	bl	800a430 <puts>
 8008436:	e030      	b.n	800849a <setBT122UARTMode+0x8a>
		} else {
			printf("Switching to BGAPI mode\n");
 8008438:	481c      	ldr	r0, [pc, #112]	; (80084ac <setBT122UARTMode+0x9c>)
 800843a:	f001 fff9 	bl	800a430 <puts>
			// Toggle PF2 pin to trigger interrupt
			HAL_GPIO_WritePin(BT122_PF2_GPIO_Port, BT122_PF2_Pin, GPIO_PIN_RESET);
 800843e:	2200      	movs	r2, #0
 8008440:	2108      	movs	r1, #8
 8008442:	4818      	ldr	r0, [pc, #96]	; (80084a4 <setBT122UARTMode+0x94>)
 8008444:	f7f9 f82e 	bl	80014a4 <HAL_GPIO_WritePin>
			HAL_Delay(1);
 8008448:	2001      	movs	r0, #1
 800844a:	f7f8 f935 	bl	80006b8 <HAL_Delay>
			HAL_GPIO_WritePin(BT122_PF2_GPIO_Port, BT122_PF2_Pin, GPIO_PIN_SET);
 800844e:	2201      	movs	r2, #1
 8008450:	2108      	movs	r1, #8
 8008452:	4814      	ldr	r0, [pc, #80]	; (80084a4 <setBT122UARTMode+0x94>)
 8008454:	f7f9 f826 	bl	80014a4 <HAL_GPIO_WritePin>
 8008458:	e01f      	b.n	800849a <setBT122UARTMode+0x8a>
		}
	} else if (mode == 1) {
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	2b01      	cmp	r3, #1
 800845e:	d117      	bne.n	8008490 <setBT122UARTMode+0x80>
		if (currentMode == 1) {
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	2b01      	cmp	r3, #1
 8008464:	d103      	bne.n	800846e <setBT122UARTMode+0x5e>
			// already in data mode
			printf("Already in data mode\n");
 8008466:	4812      	ldr	r0, [pc, #72]	; (80084b0 <setBT122UARTMode+0xa0>)
 8008468:	f001 ffe2 	bl	800a430 <puts>
 800846c:	e015      	b.n	800849a <setBT122UARTMode+0x8a>
		} else {
			printf("Switching to data mode\n");
 800846e:	4811      	ldr	r0, [pc, #68]	; (80084b4 <setBT122UARTMode+0xa4>)
 8008470:	f001 ffde 	bl	800a430 <puts>
			// Toggle PF2 pin to trigger interrupt
			HAL_GPIO_WritePin(BT122_PF2_GPIO_Port, BT122_PF2_Pin, GPIO_PIN_RESET);
 8008474:	2200      	movs	r2, #0
 8008476:	2108      	movs	r1, #8
 8008478:	480a      	ldr	r0, [pc, #40]	; (80084a4 <setBT122UARTMode+0x94>)
 800847a:	f7f9 f813 	bl	80014a4 <HAL_GPIO_WritePin>
			HAL_Delay(1);
 800847e:	2001      	movs	r0, #1
 8008480:	f7f8 f91a 	bl	80006b8 <HAL_Delay>
			HAL_GPIO_WritePin(BT122_PF2_GPIO_Port, BT122_PF2_Pin, GPIO_PIN_SET);
 8008484:	2201      	movs	r2, #1
 8008486:	2108      	movs	r1, #8
 8008488:	4806      	ldr	r0, [pc, #24]	; (80084a4 <setBT122UARTMode+0x94>)
 800848a:	f7f9 f80b 	bl	80014a4 <HAL_GPIO_WritePin>
 800848e:	e004      	b.n	800849a <setBT122UARTMode+0x8a>
		}
	} else {
		printf("Error: mode must be 1 or 0.\n");
 8008490:	4809      	ldr	r0, [pc, #36]	; (80084b8 <setBT122UARTMode+0xa8>)
 8008492:	f001 ffcd 	bl	800a430 <puts>
		return HAL_ERROR;
 8008496:	2301      	movs	r3, #1
 8008498:	e000      	b.n	800849c <setBT122UARTMode+0x8c>
	}

	return HAL_OK;
 800849a:	2300      	movs	r3, #0
}
 800849c:	4618      	mov	r0, r3
 800849e:	3710      	adds	r7, #16
 80084a0:	46bd      	mov	sp, r7
 80084a2:	bd80      	pop	{r7, pc}
 80084a4:	42021400 	.word	0x42021400
 80084a8:	0800b0c0 	.word	0x0800b0c0
 80084ac:	0800b0d8 	.word	0x0800b0d8
 80084b0:	0800b0f0 	.word	0x0800b0f0
 80084b4:	0800b108 	.word	0x0800b108
 80084b8:	0800b120 	.word	0x0800b120

080084bc <clearAllFlashFlags>:
}

/**
 * @brief   Clears all flash error flags.
 */
void clearAllFlashFlags() {
 80084bc:	b480      	push	{r7}
 80084be:	af00      	add	r7, sp, #0
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 80084c0:	4b07      	ldr	r3, [pc, #28]	; (80084e0 <clearAllFlashFlags+0x24>)
 80084c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084c4:	4a06      	ldr	r2, [pc, #24]	; (80084e0 <clearAllFlashFlags+0x24>)
 80084c6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80084ca:	6313      	str	r3, [r2, #48]	; 0x30
 80084cc:	4b04      	ldr	r3, [pc, #16]	; (80084e0 <clearAllFlashFlags+0x24>)
 80084ce:	f242 02fa 	movw	r2, #8442	; 0x20fa
 80084d2:	621a      	str	r2, [r3, #32]
}
 80084d4:	bf00      	nop
 80084d6:	46bd      	mov	sp, r7
 80084d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084dc:	4770      	bx	lr
 80084de:	bf00      	nop
 80084e0:	40022000 	.word	0x40022000

080084e4 <areFlashBanksSwapped>:
/**
 * @brief   Query Flash option bytes to determine if flash banks are currently swapped or not.
 *          i.e.: check if bank 1 and bank 2 addresses are swapped.
 * @retval  0 if flash banks are not swapped. 1 if flash banks are swapped.
 */
int areFlashBanksSwapped() {
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b08e      	sub	sp, #56	; 0x38
 80084e8:	af00      	add	r7, sp, #0
	// get current option bytes
	FLASH_OBProgramInitTypeDef opbytes;
	HAL_FLASHEx_OBGetConfig(&opbytes);
 80084ea:	463b      	mov	r3, r7
 80084ec:	4618      	mov	r0, r3
 80084ee:	f7f8 fc8b 	bl	8000e08 <HAL_FLASHEx_OBGetConfig>
	//printf("UserConfig OB: 0x%08lx\n", opbytes.USERConfig);

	// current value of OB_SWAP_BANKS bit
	uint32_t swap_banks = opbytes.USERConfig & (0x1 << 20U);
 80084f2:	69fb      	ldr	r3, [r7, #28]
 80084f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80084f8:	637b      	str	r3, [r7, #52]	; 0x34
	//printf("Swap banks: 0x%08lx\n", swap_banks);

	if (swap_banks == 0) {
 80084fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d101      	bne.n	8008504 <areFlashBanksSwapped+0x20>
		return 0;
 8008500:	2300      	movs	r3, #0
 8008502:	e000      	b.n	8008506 <areFlashBanksSwapped+0x22>
	} else {
		return 1;
 8008504:	2301      	movs	r3, #1
	}
}
 8008506:	4618      	mov	r0, r3
 8008508:	3738      	adds	r7, #56	; 0x38
 800850a:	46bd      	mov	sp, r7
 800850c:	bd80      	pop	{r7, pc}
	...

08008510 <writeFlash>:
	}

	return HAL_OK;
}

HAL_StatusTypeDef writeFlash(uint32_t flashAddress, uint32_t dataAddress) {
 8008510:	b580      	push	{r7, lr}
 8008512:	b084      	sub	sp, #16
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
 8008518:	6039      	str	r1, [r7, #0]
	// make sure flash address is 128 bit aligned
	if ((flashAddress & 0xf) != 0) {
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	f003 030f 	and.w	r3, r3, #15
 8008520:	2b00      	cmp	r3, #0
 8008522:	d004      	beq.n	800852e <writeFlash+0x1e>
		printf("Error: flash address to write to flash must be 128-bit aligned.\n");
 8008524:	4812      	ldr	r0, [pc, #72]	; (8008570 <writeFlash+0x60>)
 8008526:	f001 ff83 	bl	800a430 <puts>
		return HAL_ERROR;
 800852a:	2301      	movs	r3, #1
 800852c:	e01b      	b.n	8008566 <writeFlash+0x56>
	}
	// make sure data address is 32 bit aligned
	if ((dataAddress & 0x3) != 0) {
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	f003 0303 	and.w	r3, r3, #3
 8008534:	2b00      	cmp	r3, #0
 8008536:	d004      	beq.n	8008542 <writeFlash+0x32>
		printf("Error: data address to write to flash must be 32-bit aligned.\n");
 8008538:	480e      	ldr	r0, [pc, #56]	; (8008574 <writeFlash+0x64>)
 800853a:	f001 ff79 	bl	800a430 <puts>
		return HAL_ERROR;
 800853e:	2301      	movs	r3, #1
 8008540:	e011      	b.n	8008566 <writeFlash+0x56>
	}

	HAL_FLASH_Unlock();
 8008542:	f7f8 faf5 	bl	8000b30 <HAL_FLASH_Unlock>
//	if (HAL_FLASH_Unlock() != HAL_OK) {
//		printf("Failed to unlock flash\n");
//	}
	clearAllFlashFlags();
 8008546:	f7ff ffb9 	bl	80084bc <clearAllFlashFlags>
	HAL_StatusTypeDef programStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_QUADWORD, flashAddress, dataAddress);
 800854a:	683a      	ldr	r2, [r7, #0]
 800854c:	6879      	ldr	r1, [r7, #4]
 800854e:	2001      	movs	r0, #1
 8008550:	f7f8 faa4 	bl	8000a9c <HAL_FLASH_Program>
 8008554:	4603      	mov	r3, r0
 8008556:	73fb      	strb	r3, [r7, #15]
	FLASH_WaitForLastOperation(HAL_MAX_DELAY);
 8008558:	f04f 30ff 	mov.w	r0, #4294967295
 800855c:	f7f8 fb24 	bl	8000ba8 <FLASH_WaitForLastOperation>
//	if (FLASH_WaitForLastOperation(HAL_MAX_DELAY) != HAL_OK) {
//		printf("Wait failed...\n");
//	}
	HAL_FLASH_Lock();
 8008560:	f7f8 fb08 	bl	8000b74 <HAL_FLASH_Lock>
//	if (HAL_FLASH_Lock() != HAL_OK) {
//		printf("Failed to lock flash\n");
//	}

	return programStatus;
 8008564:	7bfb      	ldrb	r3, [r7, #15]
}
 8008566:	4618      	mov	r0, r3
 8008568:	3710      	adds	r7, #16
 800856a:	46bd      	mov	sp, r7
 800856c:	bd80      	pop	{r7, pc}
 800856e:	bf00      	nop
 8008570:	0800b4e0 	.word	0x0800b4e0
 8008574:	0800b520 	.word	0x0800b520

08008578 <writeFlashPage>:
 *
 * @param page The page number to write too.
 * @param buffer The buffer containing the data to be written to flash. Must be FLASH_PAGE_SIZE # of bytes in length.
 * @return Status code indicated if flash page write was a success or failure.
 */
HAL_StatusTypeDef writeFlashPage(int page, const char *buffer) {
 8008578:	b580      	push	{r7, lr}
 800857a:	b086      	sub	sp, #24
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
 8008580:	6039      	str	r1, [r7, #0]
	//char writeBuffer[16] __attribute__ ((aligned(4)));
	uint32_t flashAddress = 0x08000000 + (page * FLASH_PAGE_SIZE);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8008588:	035b      	lsls	r3, r3, #13
 800858a:	617b      	str	r3, [r7, #20]
	uint32_t bufferCursor = (uint32_t) (buffer);
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	613b      	str	r3, [r7, #16]
	// write 8192 bytes to flash in sets of 16 bytes
	for (int i = 0; i < FLASH_PAGE_SIZE / 16; i++) {
 8008590:	2300      	movs	r3, #0
 8008592:	60fb      	str	r3, [r7, #12]
 8008594:	e017      	b.n	80085c6 <writeFlashPage+0x4e>
		//memcpy(writeBuffer, bufferCursor, 16);
		HAL_StatusTypeDef status = writeFlash(flashAddress, bufferCursor);
 8008596:	6939      	ldr	r1, [r7, #16]
 8008598:	6978      	ldr	r0, [r7, #20]
 800859a:	f7ff ffb9 	bl	8008510 <writeFlash>
 800859e:	4603      	mov	r3, r0
 80085a0:	72fb      	strb	r3, [r7, #11]
		if (status != HAL_OK) {
 80085a2:	7afb      	ldrb	r3, [r7, #11]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d005      	beq.n	80085b4 <writeFlashPage+0x3c>
			printf("Page write failed at address: %ld\n", flashAddress);
 80085a8:	6979      	ldr	r1, [r7, #20]
 80085aa:	480b      	ldr	r0, [pc, #44]	; (80085d8 <writeFlashPage+0x60>)
 80085ac:	f001 fed2 	bl	800a354 <iprintf>
			return status;;
 80085b0:	7afb      	ldrb	r3, [r7, #11]
 80085b2:	e00d      	b.n	80085d0 <writeFlashPage+0x58>
		}
		flashAddress += 16;
 80085b4:	697b      	ldr	r3, [r7, #20]
 80085b6:	3310      	adds	r3, #16
 80085b8:	617b      	str	r3, [r7, #20]
		bufferCursor += 16;
 80085ba:	693b      	ldr	r3, [r7, #16]
 80085bc:	3310      	adds	r3, #16
 80085be:	613b      	str	r3, [r7, #16]
	for (int i = 0; i < FLASH_PAGE_SIZE / 16; i++) {
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	3301      	adds	r3, #1
 80085c4:	60fb      	str	r3, [r7, #12]
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80085cc:	d3e3      	bcc.n	8008596 <writeFlashPage+0x1e>
	}

	return HAL_OK;
 80085ce:	2300      	movs	r3, #0
}
 80085d0:	4618      	mov	r0, r3
 80085d2:	3718      	adds	r7, #24
 80085d4:	46bd      	mov	sp, r7
 80085d6:	bd80      	pop	{r7, pc}
 80085d8:	0800b5d0 	.word	0x0800b5d0

080085dc <eraseFlashPage_Advanced>:
}

/**
 * Takes into account potentially swapped banks.
 */
HAL_StatusTypeDef eraseFlashPage_Advanced(int page) {
 80085dc:	b580      	push	{r7, lr}
 80085de:	b08a      	sub	sp, #40	; 0x28
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
	// Make sure 'page' parameter is a valid page.
	if (page < 0 || page > FLASH_SIZE / FLASH_PAGE_SIZE) {
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	db16      	blt.n	8008618 <eraseFlashPage_Advanced+0x3c>
 80085ea:	4b3a      	ldr	r3, [pc, #232]	; (80086d4 <eraseFlashPage_Advanced+0xf8>)
 80085ec:	881b      	ldrh	r3, [r3, #0]
 80085ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80085f2:	4293      	cmp	r3, r2
 80085f4:	d00b      	beq.n	800860e <eraseFlashPage_Advanced+0x32>
 80085f6:	4b37      	ldr	r3, [pc, #220]	; (80086d4 <eraseFlashPage_Advanced+0xf8>)
 80085f8:	881b      	ldrh	r3, [r3, #0]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d004      	beq.n	8008608 <eraseFlashPage_Advanced+0x2c>
 80085fe:	4b35      	ldr	r3, [pc, #212]	; (80086d4 <eraseFlashPage_Advanced+0xf8>)
 8008600:	881b      	ldrh	r3, [r3, #0]
 8008602:	029b      	lsls	r3, r3, #10
 8008604:	0b5b      	lsrs	r3, r3, #13
 8008606:	e004      	b.n	8008612 <eraseFlashPage_Advanced+0x36>
 8008608:	f44f 7300 	mov.w	r3, #512	; 0x200
 800860c:	e001      	b.n	8008612 <eraseFlashPage_Advanced+0x36>
 800860e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008612:	687a      	ldr	r2, [r7, #4]
 8008614:	4293      	cmp	r3, r2
 8008616:	d219      	bcs.n	800864c <eraseFlashPage_Advanced+0x70>
		printf("Error: invalid value for parameter 'page'. Must be between 0 and %ld.\n", FLASH_SIZE / FLASH_PAGE_SIZE);
 8008618:	4b2e      	ldr	r3, [pc, #184]	; (80086d4 <eraseFlashPage_Advanced+0xf8>)
 800861a:	881b      	ldrh	r3, [r3, #0]
 800861c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008620:	4293      	cmp	r3, r2
 8008622:	d00b      	beq.n	800863c <eraseFlashPage_Advanced+0x60>
 8008624:	4b2b      	ldr	r3, [pc, #172]	; (80086d4 <eraseFlashPage_Advanced+0xf8>)
 8008626:	881b      	ldrh	r3, [r3, #0]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d004      	beq.n	8008636 <eraseFlashPage_Advanced+0x5a>
 800862c:	4b29      	ldr	r3, [pc, #164]	; (80086d4 <eraseFlashPage_Advanced+0xf8>)
 800862e:	881b      	ldrh	r3, [r3, #0]
 8008630:	029b      	lsls	r3, r3, #10
 8008632:	0b5b      	lsrs	r3, r3, #13
 8008634:	e004      	b.n	8008640 <eraseFlashPage_Advanced+0x64>
 8008636:	f44f 7300 	mov.w	r3, #512	; 0x200
 800863a:	e001      	b.n	8008640 <eraseFlashPage_Advanced+0x64>
 800863c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008640:	4619      	mov	r1, r3
 8008642:	4825      	ldr	r0, [pc, #148]	; (80086d8 <eraseFlashPage_Advanced+0xfc>)
 8008644:	f001 fe86 	bl	800a354 <iprintf>
		return HAL_ERROR;
 8008648:	2301      	movs	r3, #1
 800864a:	e03e      	b.n	80086ca <eraseFlashPage_Advanced+0xee>
	}
	// Determine what flash bank and page we are really erasing. May not match input 'page'
	// due to swapped banks.
	uint32_t flashEraseBank;
	uint32_t flashErasePage;
	if (areFlashBanksSwapped() == 0) { // flash banks not swapped
 800864c:	f7ff ff4a 	bl	80084e4 <areFlashBanksSwapped>
 8008650:	4603      	mov	r3, r0
 8008652:	2b00      	cmp	r3, #0
 8008654:	d10e      	bne.n	8008674 <eraseFlashPage_Advanced+0x98>
		if (page < 256) {
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	2bff      	cmp	r3, #255	; 0xff
 800865a:	dc04      	bgt.n	8008666 <eraseFlashPage_Advanced+0x8a>
			// bank 1
			flashEraseBank = FLASH_BANK_1;
 800865c:	2301      	movs	r3, #1
 800865e:	627b      	str	r3, [r7, #36]	; 0x24
			flashErasePage = page;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	623b      	str	r3, [r7, #32]
 8008664:	e014      	b.n	8008690 <eraseFlashPage_Advanced+0xb4>
		} else {
			// bank 2
			flashEraseBank = FLASH_BANK_2;
 8008666:	2302      	movs	r3, #2
 8008668:	627b      	str	r3, [r7, #36]	; 0x24
			flashErasePage = page - 256;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8008670:	623b      	str	r3, [r7, #32]
 8008672:	e00d      	b.n	8008690 <eraseFlashPage_Advanced+0xb4>
		}
	} else { // flash banks are swapped
		if (page < 256) {
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	2bff      	cmp	r3, #255	; 0xff
 8008678:	dc04      	bgt.n	8008684 <eraseFlashPage_Advanced+0xa8>
			// bank 2
			flashEraseBank = FLASH_BANK_2;
 800867a:	2302      	movs	r3, #2
 800867c:	627b      	str	r3, [r7, #36]	; 0x24
			flashErasePage = page;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	623b      	str	r3, [r7, #32]
 8008682:	e005      	b.n	8008690 <eraseFlashPage_Advanced+0xb4>
		} else {
			// bank 1
			flashEraseBank = FLASH_BANK_1;
 8008684:	2301      	movs	r3, #1
 8008686:	627b      	str	r3, [r7, #36]	; 0x24
			flashErasePage = page - 256;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800868e:	623b      	str	r3, [r7, #32]
		}
	}

	FLASH_EraseInitTypeDef eraseInit;
	eraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 8008690:	2302      	movs	r3, #2
 8008692:	60fb      	str	r3, [r7, #12]
	eraseInit.Banks = flashEraseBank;
 8008694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008696:	613b      	str	r3, [r7, #16]
	eraseInit.Page = flashErasePage;
 8008698:	6a3b      	ldr	r3, [r7, #32]
 800869a:	617b      	str	r3, [r7, #20]
	eraseInit.NbPages = 1;
 800869c:	2301      	movs	r3, #1
 800869e:	61bb      	str	r3, [r7, #24]
	uint32_t eraseError;
	HAL_FLASH_Unlock();
 80086a0:	f7f8 fa46 	bl	8000b30 <HAL_FLASH_Unlock>
//	if (HAL_FLASH_Unlock() != HAL_OK) {
//		printf("Failed to unlock flash\n");
//	}
	clearAllFlashFlags();
 80086a4:	f7ff ff0a 	bl	80084bc <clearAllFlashFlags>
	HAL_StatusTypeDef eraseStatus = HAL_FLASHEx_Erase(&eraseInit, &eraseError);
 80086a8:	f107 0208 	add.w	r2, r7, #8
 80086ac:	f107 030c 	add.w	r3, r7, #12
 80086b0:	4611      	mov	r1, r2
 80086b2:	4618      	mov	r0, r3
 80086b4:	f7f8 fb38 	bl	8000d28 <HAL_FLASHEx_Erase>
 80086b8:	4603      	mov	r3, r0
 80086ba:	77fb      	strb	r3, [r7, #31]
	FLASH_WaitForLastOperation(HAL_MAX_DELAY);
 80086bc:	f04f 30ff 	mov.w	r0, #4294967295
 80086c0:	f7f8 fa72 	bl	8000ba8 <FLASH_WaitForLastOperation>
//	if (FLASH_WaitForLastOperation(HAL_MAX_DELAY) != HAL_OK) {
//		printf("Wait failed...\n");
//	}
	HAL_FLASH_Lock();
 80086c4:	f7f8 fa56 	bl	8000b74 <HAL_FLASH_Lock>
//	if (HAL_FLASH_Lock() != HAL_OK) {
//		printf("Failed to lock flash\n");
//	}
	return eraseStatus;
 80086c8:	7ffb      	ldrb	r3, [r7, #31]
}
 80086ca:	4618      	mov	r0, r3
 80086cc:	3728      	adds	r7, #40	; 0x28
 80086ce:	46bd      	mov	sp, r7
 80086d0:	bd80      	pop	{r7, pc}
 80086d2:	bf00      	nop
 80086d4:	0bfa07a0 	.word	0x0bfa07a0
 80086d8:	0800b67c 	.word	0x0800b67c

080086dc <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE {
 80086dc:	b580      	push	{r7, lr}
 80086de:	b082      	sub	sp, #8
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) &ch, 1, HAL_MAX_DELAY);
 80086e4:	1d39      	adds	r1, r7, #4
 80086e6:	f04f 33ff 	mov.w	r3, #4294967295
 80086ea:	2201      	movs	r2, #1
 80086ec:	4803      	ldr	r0, [pc, #12]	; (80086fc <__io_putchar+0x20>)
 80086ee:	f7fd feb1 	bl	8006454 <HAL_UART_Transmit>
	return ch;
 80086f2:	687b      	ldr	r3, [r7, #4]
}
 80086f4:	4618      	mov	r0, r3
 80086f6:	3708      	adds	r7, #8
 80086f8:	46bd      	mov	sp, r7
 80086fa:	bd80      	pop	{r7, pc}
 80086fc:	2000010c 	.word	0x2000010c

08008700 <HAL_UART_RxCpltCallback>:

/** UART Callback **/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8008700:	b580      	push	{r7, lr}
 8008702:	b082      	sub	sp, #8
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
	// check which UART it is
	if (huart == &huart1) {
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	4a10      	ldr	r2, [pc, #64]	; (800874c <HAL_UART_RxCpltCallback+0x4c>)
 800870c:	4293      	cmp	r3, r2
 800870e:	d10a      	bne.n	8008726 <HAL_UART_RxCpltCallback+0x26>
		uart_rx_it_put(1, 1, (char *) huart1RxInterruptBuffer);
 8008710:	4a0f      	ldr	r2, [pc, #60]	; (8008750 <HAL_UART_RxCpltCallback+0x50>)
 8008712:	2101      	movs	r1, #1
 8008714:	2001      	movs	r0, #1
 8008716:	f001 f9d1 	bl	8009abc <uart_rx_it_put>
		HAL_UART_Receive_IT(&huart1, huart1RxInterruptBuffer, 1);
 800871a:	2201      	movs	r2, #1
 800871c:	490c      	ldr	r1, [pc, #48]	; (8008750 <HAL_UART_RxCpltCallback+0x50>)
 800871e:	480b      	ldr	r0, [pc, #44]	; (800874c <HAL_UART_RxCpltCallback+0x4c>)
 8008720:	f7fd ff26 	bl	8006570 <HAL_UART_Receive_IT>
	}
	else if (huart == &huart2) {
		uart_rx_it_put(2, 1, (char *) huart2RxInterruptBuffer);
		HAL_UART_Receive_IT(&huart2, huart2RxInterruptBuffer, 1);
	}
}
 8008724:	e00d      	b.n	8008742 <HAL_UART_RxCpltCallback+0x42>
	else if (huart == &huart2) {
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	4a0a      	ldr	r2, [pc, #40]	; (8008754 <HAL_UART_RxCpltCallback+0x54>)
 800872a:	4293      	cmp	r3, r2
 800872c:	d109      	bne.n	8008742 <HAL_UART_RxCpltCallback+0x42>
		uart_rx_it_put(2, 1, (char *) huart2RxInterruptBuffer);
 800872e:	4a0a      	ldr	r2, [pc, #40]	; (8008758 <HAL_UART_RxCpltCallback+0x58>)
 8008730:	2101      	movs	r1, #1
 8008732:	2002      	movs	r0, #2
 8008734:	f001 f9c2 	bl	8009abc <uart_rx_it_put>
		HAL_UART_Receive_IT(&huart2, huart2RxInterruptBuffer, 1);
 8008738:	2201      	movs	r2, #1
 800873a:	4907      	ldr	r1, [pc, #28]	; (8008758 <HAL_UART_RxCpltCallback+0x58>)
 800873c:	4805      	ldr	r0, [pc, #20]	; (8008754 <HAL_UART_RxCpltCallback+0x54>)
 800873e:	f7fd ff17 	bl	8006570 <HAL_UART_Receive_IT>
}
 8008742:	bf00      	nop
 8008744:	3708      	adds	r7, #8
 8008746:	46bd      	mov	sp, r7
 8008748:	bd80      	pop	{r7, pc}
 800874a:	bf00      	nop
 800874c:	2000010c 	.word	0x2000010c
 8008750:	20000234 	.word	0x20000234
 8008754:	200001a0 	.word	0x200001a0
 8008758:	20000238 	.word	0x20000238

0800875c <checkConnection>:
 * @brief   Used to make sure UART connection is working properly. Waits to recieve 2 bytes of data over UART, then
 * 			sends 2 bytes back (0x61, 0x62).
 * @note    Clears interrupt RX buffer.
 * @param   huart The UART handle of the UART connection that is being checked.
 */
void checkConnection(UART_HandleTypeDef *huart) {
 800875c:	b580      	push	{r7, lr}
 800875e:	b084      	sub	sp, #16
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
	//HAL_StatusTypeDef ret;
//	while (HAL_UART_Receive(huart, (uint8_t*) buffer, 2, 1000) != HAL_OK) {
//		printf("Waiting for confirmation...\n");
//	}

	uart_rx_it_clear_buffer(get_UART_num(huart));
 8008764:	6878      	ldr	r0, [r7, #4]
 8008766:	f001 f915 	bl	8009994 <get_UART_num>
 800876a:	4603      	mov	r3, r0
 800876c:	4618      	mov	r0, r3
 800876e:	f001 faaf 	bl	8009cd0 <uart_rx_it_clear_buffer>

	printf("Waiting for confirmation...\n");
 8008772:	4816      	ldr	r0, [pc, #88]	; (80087cc <checkConnection+0x70>)
 8008774:	f001 fe5c 	bl	800a430 <puts>
	while (uart_rx_it_get_length(get_UART_num(huart)) != 2) {
 8008778:	bf00      	nop
 800877a:	6878      	ldr	r0, [r7, #4]
 800877c:	f001 f90a 	bl	8009994 <get_UART_num>
 8008780:	4603      	mov	r3, r0
 8008782:	4618      	mov	r0, r3
 8008784:	f001 fa88 	bl	8009c98 <uart_rx_it_get_length>
 8008788:	4603      	mov	r3, r0
 800878a:	2b02      	cmp	r3, #2
 800878c:	d1f5      	bne.n	800877a <checkConnection+0x1e>
		//HAL_Delay(50);
	}

	// clear UART buffer
	uart_rx_it_clear_buffer(get_UART_num(huart));
 800878e:	6878      	ldr	r0, [r7, #4]
 8008790:	f001 f900 	bl	8009994 <get_UART_num>
 8008794:	4603      	mov	r3, r0
 8008796:	4618      	mov	r0, r3
 8008798:	f001 fa9a 	bl	8009cd0 <uart_rx_it_clear_buffer>

	// confirmation received
	printf("Received confirmation: %c %c. Sending confirmation back...\n", buffer[0], buffer[1]);
 800879c:	7b3b      	ldrb	r3, [r7, #12]
 800879e:	4619      	mov	r1, r3
 80087a0:	7b7b      	ldrb	r3, [r7, #13]
 80087a2:	461a      	mov	r2, r3
 80087a4:	480a      	ldr	r0, [pc, #40]	; (80087d0 <checkConnection+0x74>)
 80087a6:	f001 fdd5 	bl	800a354 <iprintf>

	buffer[0] = 'a';
 80087aa:	2361      	movs	r3, #97	; 0x61
 80087ac:	733b      	strb	r3, [r7, #12]
	buffer[1] = 'b';
 80087ae:	2362      	movs	r3, #98	; 0x62
 80087b0:	737b      	strb	r3, [r7, #13]
	HAL_UART_Transmit(huart, (uint8_t*) buffer, 2, HAL_MAX_DELAY);
 80087b2:	f107 010c 	add.w	r1, r7, #12
 80087b6:	f04f 33ff 	mov.w	r3, #4294967295
 80087ba:	2202      	movs	r2, #2
 80087bc:	6878      	ldr	r0, [r7, #4]
 80087be:	f7fd fe49 	bl	8006454 <HAL_UART_Transmit>
	//uart_tx();
}
 80087c2:	bf00      	nop
 80087c4:	3710      	adds	r7, #16
 80087c6:	46bd      	mov	sp, r7
 80087c8:	bd80      	pop	{r7, pc}
 80087ca:	bf00      	nop
 80087cc:	0800bc70 	.word	0x0800bc70
 80087d0:	0800bc8c 	.word	0x0800bc8c

080087d4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b090      	sub	sp, #64	; 0x40
 80087d8:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80087da:	f7f7 fee9 	bl	80005b0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80087de:	f000 f899 	bl	8008914 <SystemClock_Config>

	/* Configure the System Power */
	SystemPower_Config();
 80087e2:	f000 f8ef 	bl	80089c4 <SystemPower_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80087e6:	f000 f9bd 	bl	8008b64 <MX_GPIO_Init>
	MX_HASH_Init();
 80087ea:	f000 f8fb 	bl	80089e4 <MX_HASH_Init>
	MX_ICACHE_Init();
 80087ee:	f000 f90b 	bl	8008a08 <MX_ICACHE_Init>
	MX_USART1_UART_Init();
 80087f2:	f000 f91d 	bl	8008a30 <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 80087f6:	f000 f967 	bl	8008ac8 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */

	// Start UART 2 interrupt
	register_UART(1, &huart1);
 80087fa:	4938      	ldr	r1, [pc, #224]	; (80088dc <main+0x108>)
 80087fc:	2001      	movs	r0, #1
 80087fe:	f001 f8ad 	bl	800995c <register_UART>
	register_UART(2, &huart2);
 8008802:	4937      	ldr	r1, [pc, #220]	; (80088e0 <main+0x10c>)
 8008804:	2002      	movs	r0, #2
 8008806:	f001 f8a9 	bl	800995c <register_UART>
	HAL_UART_Receive_IT(&huart1, huart1RxInterruptBuffer, 1);
 800880a:	2201      	movs	r2, #1
 800880c:	4935      	ldr	r1, [pc, #212]	; (80088e4 <main+0x110>)
 800880e:	4833      	ldr	r0, [pc, #204]	; (80088dc <main+0x108>)
 8008810:	f7fd feae 	bl	8006570 <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart2, huart2RxInterruptBuffer, 1);
 8008814:	2201      	movs	r2, #1
 8008816:	4934      	ldr	r1, [pc, #208]	; (80088e8 <main+0x114>)
 8008818:	4831      	ldr	r0, [pc, #196]	; (80088e0 <main+0x10c>)
 800881a:	f7fd fea9 	bl	8006570 <HAL_UART_Receive_IT>

	// Initialize BGIB with UART handle that will be used to communicate with BT122
	initializeBGLIB(&huart2);
 800881e:	4830      	ldr	r0, [pc, #192]	; (80088e0 <main+0x10c>)
 8008820:	f7ff fda0 	bl	8008364 <initializeBGLIB>

	printf("\n\nStarted on u5a5 - firmware 1.0\n\n");
 8008824:	4831      	ldr	r0, [pc, #196]	; (80088ec <main+0x118>)
 8008826:	f001 fe03 	bl	800a430 <puts>
	}

*/

	// Download firmware then restart
	if ((*(__IO uint32_t*) FLASH_USER_START_ADDR) == 0x20007ffc) {
 800882a:	f04f 6301 	mov.w	r3, #135266304	; 0x8100000
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	4a2f      	ldr	r2, [pc, #188]	; (80088f0 <main+0x11c>)
 8008832:	4293      	cmp	r3, r2
 8008834:	d103      	bne.n	800883e <main+0x6a>
		printf("Firmware already downloaded.\n");
 8008836:	482f      	ldr	r0, [pc, #188]	; (80088f4 <main+0x120>)
 8008838:	f001 fdfa 	bl	800a430 <puts>
 800883c:	e00e      	b.n	800885c <main+0x88>
	} else {
		// Download firmware to flash
		setBT122UARTMode(DATA_MODE);
 800883e:	2001      	movs	r0, #1
 8008840:	f7ff fde6 	bl	8008410 <setBT122UARTMode>
		checkConnection(&huart2);
 8008844:	4826      	ldr	r0, [pc, #152]	; (80088e0 <main+0x10c>)
 8008846:	f7ff ff89 	bl	800875c <checkConnection>
		downloadFirmwareToFlash(&huart2, FLASH_USER_START_ADDR, 253952);
 800884a:	f44f 3278 	mov.w	r2, #253952	; 0x3e000
 800884e:	f04f 6101 	mov.w	r1, #135266304	; 0x8100000
 8008852:	4823      	ldr	r0, [pc, #140]	; (80088e0 <main+0x10c>)
 8008854:	f000 faac 	bl	8008db0 <downloadFirmwareToFlash>
		HAL_NVIC_SystemReset();
 8008858:	f7f8 f86b 	bl	8000932 <HAL_NVIC_SystemReset>
	}

	// check sha256 hash of firmware data
	char firmwareDigest[32];
	computeHashFromFlash(&hhash, (uint32_t) FLASH_USER_START_ADDR, 253952, firmwareDigest);
 800885c:	f107 0318 	add.w	r3, r7, #24
 8008860:	f44f 3278 	mov.w	r2, #253952	; 0x3e000
 8008864:	f04f 6101 	mov.w	r1, #135266304	; 0x8100000
 8008868:	4823      	ldr	r0, [pc, #140]	; (80088f8 <main+0x124>)
 800886a:	f001 fb1f 	bl	8009eac <computeHashFromFlash>
	printf("Firmware sha256 hash: \n");
 800886e:	4823      	ldr	r0, [pc, #140]	; (80088fc <main+0x128>)
 8008870:	f001 fdde 	bl	800a430 <puts>
	printBuffer(firmwareDigest, 32, "%02x");
 8008874:	f107 0318 	add.w	r3, r7, #24
 8008878:	4a21      	ldr	r2, [pc, #132]	; (8008900 <main+0x12c>)
 800887a:	2120      	movs	r1, #32
 800887c:	4618      	mov	r0, r3
 800887e:	f001 fa57 	bl	8009d30 <printBuffer>
	printf("\n");
 8008882:	200a      	movs	r0, #10
 8008884:	f001 fd78 	bl	800a378 <putchar>
//	}

	// update bt122 using new firmware

	// go to bgapi mode
	uart_rx_it_clear_buffer(get_UART_num(&huart2));
 8008888:	4815      	ldr	r0, [pc, #84]	; (80088e0 <main+0x10c>)
 800888a:	f001 f883 	bl	8009994 <get_UART_num>
 800888e:	4603      	mov	r3, r0
 8008890:	4618      	mov	r0, r3
 8008892:	f001 fa1d 	bl	8009cd0 <uart_rx_it_clear_buffer>

	printf("Entering bgapi mode...\n");
 8008896:	481b      	ldr	r0, [pc, #108]	; (8008904 <main+0x130>)
 8008898:	f001 fdca 	bl	800a430 <puts>
	//setBT122UARTMode(BGAPI_MODE);


	FirmwareInfo fi = uploadFirmwareToBT122(&huart2, FLASH_USER_START_ADDR, 253952);
 800889c:	1d38      	adds	r0, r7, #4
 800889e:	f44f 3378 	mov.w	r3, #253952	; 0x3e000
 80088a2:	f04f 6201 	mov.w	r2, #135266304	; 0x8100000
 80088a6:	490e      	ldr	r1, [pc, #56]	; (80088e0 <main+0x10c>)
 80088a8:	f000 fc02 	bl	80090b0 <uploadFirmwareToBT122>
	printf("Firmware upload status: %d (0 = HAL_OK, 1 = HAL_ERROR)\n", fi.status);
 80088ac:	793b      	ldrb	r3, [r7, #4]
 80088ae:	4619      	mov	r1, r3
 80088b0:	4815      	ldr	r0, [pc, #84]	; (8008908 <main+0x134>)
 80088b2:	f001 fd4f 	bl	800a354 <iprintf>
	printf("Old bootloader version = %ld. New bootloader version: %d\n", fi.oldBootloaderVersion, fi.newBootloaderVersion);
 80088b6:	68bb      	ldr	r3, [r7, #8]
 80088b8:	8aba      	ldrh	r2, [r7, #20]
 80088ba:	4619      	mov	r1, r3
 80088bc:	4813      	ldr	r0, [pc, #76]	; (800890c <main+0x138>)
 80088be:	f001 fd49 	bl	800a354 <iprintf>
	printf("New firmware version: %d.%d.%d+%d\n", fi.major, fi.minor, fi.patch, fi.build);
 80088c2:	89bb      	ldrh	r3, [r7, #12]
 80088c4:	4619      	mov	r1, r3
 80088c6:	89fb      	ldrh	r3, [r7, #14]
 80088c8:	461a      	mov	r2, r3
 80088ca:	8a3b      	ldrh	r3, [r7, #16]
 80088cc:	4618      	mov	r0, r3
 80088ce:	8a7b      	ldrh	r3, [r7, #18]
 80088d0:	9300      	str	r3, [sp, #0]
 80088d2:	4603      	mov	r3, r0
 80088d4:	480e      	ldr	r0, [pc, #56]	; (8008910 <main+0x13c>)
 80088d6:	f001 fd3d 	bl	800a354 <iprintf>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 80088da:	e7fe      	b.n	80088da <main+0x106>
 80088dc:	2000010c 	.word	0x2000010c
 80088e0:	200001a0 	.word	0x200001a0
 80088e4:	20000234 	.word	0x20000234
 80088e8:	20000238 	.word	0x20000238
 80088ec:	0800bcc8 	.word	0x0800bcc8
 80088f0:	20007ffc 	.word	0x20007ffc
 80088f4:	0800bcec 	.word	0x0800bcec
 80088f8:	200000c8 	.word	0x200000c8
 80088fc:	0800bd0c 	.word	0x0800bd0c
 8008900:	0800bd24 	.word	0x0800bd24
 8008904:	0800bd2c 	.word	0x0800bd2c
 8008908:	0800bd44 	.word	0x0800bd44
 800890c:	0800bd7c 	.word	0x0800bd7c
 8008910:	0800bdb8 	.word	0x0800bdb8

08008914 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8008914:	b580      	push	{r7, lr}
 8008916:	b09e      	sub	sp, #120	; 0x78
 8008918:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800891a:	f107 0318 	add.w	r3, r7, #24
 800891e:	2260      	movs	r2, #96	; 0x60
 8008920:	2100      	movs	r1, #0
 8008922:	4618      	mov	r0, r3
 8008924:	f001 fe64 	bl	800a5f0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8008928:	463b      	mov	r3, r7
 800892a:	2200      	movs	r2, #0
 800892c:	601a      	str	r2, [r3, #0]
 800892e:	605a      	str	r2, [r3, #4]
 8008930:	609a      	str	r2, [r3, #8]
 8008932:	60da      	str	r2, [r3, #12]
 8008934:	611a      	str	r2, [r3, #16]
 8008936:	615a      	str	r2, [r3, #20]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK) {
 8008938:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 800893c:	f7f9 fa0a 	bl	8001d54 <HAL_PWREx_ControlVoltageScaling>
 8008940:	4603      	mov	r3, r0
 8008942:	2b00      	cmp	r3, #0
 8008944:	d001      	beq.n	800894a <SystemClock_Config+0x36>
		Error_Handler();
 8008946:	f000 fa2d 	bl	8008da4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800894a:	2301      	movs	r3, #1
 800894c:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800894e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008952:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008954:	2302      	movs	r3, #2
 8008956:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8008958:	2303      	movs	r3, #3
 800895a:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 800895c:	2300      	movs	r3, #0
 800895e:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLM = 1;
 8008960:	2301      	movs	r3, #1
 8008962:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLN = 10;
 8008964:	230a      	movs	r3, #10
 8008966:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLP = 8;
 8008968:	2308      	movs	r3, #8
 800896a:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLQ = 2;
 800896c:	2302      	movs	r3, #2
 800896e:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLR = 1;
 8008970:	2301      	movs	r3, #1
 8008972:	66fb      	str	r3, [r7, #108]	; 0x6c
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 8008974:	230c      	movs	r3, #12
 8008976:	673b      	str	r3, [r7, #112]	; 0x70
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8008978:	2300      	movs	r3, #0
 800897a:	677b      	str	r3, [r7, #116]	; 0x74
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800897c:	f107 0318 	add.w	r3, r7, #24
 8008980:	4618      	mov	r0, r3
 8008982:	f7f9 fae3 	bl	8001f4c <HAL_RCC_OscConfig>
 8008986:	4603      	mov	r3, r0
 8008988:	2b00      	cmp	r3, #0
 800898a:	d001      	beq.n	8008990 <SystemClock_Config+0x7c>
		Error_Handler();
 800898c:	f000 fa0a 	bl	8008da4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1
 8008990:	231f      	movs	r3, #31
 8008992:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK3;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008994:	2303      	movs	r3, #3
 8008996:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008998:	2300      	movs	r3, #0
 800899a:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800899c:	2300      	movs	r3, #0
 800899e:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80089a0:	2300      	movs	r3, #0
 80089a2:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80089a4:	2300      	movs	r3, #0
 80089a6:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 80089a8:	463b      	mov	r3, r7
 80089aa:	2104      	movs	r1, #4
 80089ac:	4618      	mov	r0, r3
 80089ae:	f7fa f9a9 	bl	8002d04 <HAL_RCC_ClockConfig>
 80089b2:	4603      	mov	r3, r0
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d001      	beq.n	80089bc <SystemClock_Config+0xa8>
		Error_Handler();
 80089b8:	f000 f9f4 	bl	8008da4 <Error_Handler>
	}
}
 80089bc:	bf00      	nop
 80089be:	3778      	adds	r7, #120	; 0x78
 80089c0:	46bd      	mov	sp, r7
 80089c2:	bd80      	pop	{r7, pc}

080089c4 <SystemPower_Config>:

/**
 * @brief Power Configuration
 * @retval None
 */
static void SystemPower_Config(void) {
 80089c4:	b580      	push	{r7, lr}
 80089c6:	af00      	add	r7, sp, #0
	HAL_PWREx_EnableVddIO2();
 80089c8:	f7f9 faa0 	bl	8001f0c <HAL_PWREx_EnableVddIO2>

	/*
	 * Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
	 */
	HAL_PWREx_DisableUCPDDeadBattery();
 80089cc:	f7f9 faae 	bl	8001f2c <HAL_PWREx_DisableUCPDDeadBattery>

	/*
	 * Switch to SMPS regulator instead of LDO
	 */
	if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK) {
 80089d0:	2002      	movs	r0, #2
 80089d2:	f7f9 fa4b 	bl	8001e6c <HAL_PWREx_ConfigSupply>
 80089d6:	4603      	mov	r3, r0
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d001      	beq.n	80089e0 <SystemPower_Config+0x1c>
		Error_Handler();
 80089dc:	f000 f9e2 	bl	8008da4 <Error_Handler>
	}
	/* USER CODE BEGIN PWR */
	/* USER CODE END PWR */
}
 80089e0:	bf00      	nop
 80089e2:	bd80      	pop	{r7, pc}

080089e4 <MX_HASH_Init>:
/**
 * @brief HASH Initialization Function
 * @param None
 * @retval None
 */
static void MX_HASH_Init(void) {
 80089e4:	b580      	push	{r7, lr}
 80089e6:	af00      	add	r7, sp, #0
	/* USER CODE END HASH_Init 0 */

	/* USER CODE BEGIN HASH_Init 1 */

	/* USER CODE END HASH_Init 1 */
	hhash.Init.DataType = HASH_DATATYPE_32B;
 80089e8:	4b06      	ldr	r3, [pc, #24]	; (8008a04 <MX_HASH_Init+0x20>)
 80089ea:	2200      	movs	r2, #0
 80089ec:	601a      	str	r2, [r3, #0]
	if (HAL_HASH_Init(&hhash) != HAL_OK) {
 80089ee:	4805      	ldr	r0, [pc, #20]	; (8008a04 <MX_HASH_Init+0x20>)
 80089f0:	f7f8 fd70 	bl	80014d4 <HAL_HASH_Init>
 80089f4:	4603      	mov	r3, r0
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d001      	beq.n	80089fe <MX_HASH_Init+0x1a>
		Error_Handler();
 80089fa:	f000 f9d3 	bl	8008da4 <Error_Handler>
	}
	/* USER CODE BEGIN HASH_Init 2 */

	/* USER CODE END HASH_Init 2 */

}
 80089fe:	bf00      	nop
 8008a00:	bd80      	pop	{r7, pc}
 8008a02:	bf00      	nop
 8008a04:	200000c8 	.word	0x200000c8

08008a08 <MX_ICACHE_Init>:
/**
 * @brief ICACHE Initialization Function
 * @param None
 * @retval None
 */
static void MX_ICACHE_Init(void) {
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	af00      	add	r7, sp, #0

	/* USER CODE END ICACHE_Init 1 */

	/** Enable instruction cache in 1-way (direct mapped cache)
	 */
	if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK) {
 8008a0c:	2000      	movs	r0, #0
 8008a0e:	f7f9 f971 	bl	8001cf4 <HAL_ICACHE_ConfigAssociativityMode>
 8008a12:	4603      	mov	r3, r0
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d001      	beq.n	8008a1c <MX_ICACHE_Init+0x14>
		Error_Handler();
 8008a18:	f000 f9c4 	bl	8008da4 <Error_Handler>
	}
	if (HAL_ICACHE_Enable() != HAL_OK) {
 8008a1c:	f7f9 f98a 	bl	8001d34 <HAL_ICACHE_Enable>
 8008a20:	4603      	mov	r3, r0
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d001      	beq.n	8008a2a <MX_ICACHE_Init+0x22>
		Error_Handler();
 8008a26:	f000 f9bd 	bl	8008da4 <Error_Handler>
	}
	/* USER CODE BEGIN ICACHE_Init 2 */

	/* USER CODE END ICACHE_Init 2 */

}
 8008a2a:	bf00      	nop
 8008a2c:	bd80      	pop	{r7, pc}
	...

08008a30 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8008a30:	b580      	push	{r7, lr}
 8008a32:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8008a34:	4b22      	ldr	r3, [pc, #136]	; (8008ac0 <MX_USART1_UART_Init+0x90>)
 8008a36:	4a23      	ldr	r2, [pc, #140]	; (8008ac4 <MX_USART1_UART_Init+0x94>)
 8008a38:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8008a3a:	4b21      	ldr	r3, [pc, #132]	; (8008ac0 <MX_USART1_UART_Init+0x90>)
 8008a3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008a40:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8008a42:	4b1f      	ldr	r3, [pc, #124]	; (8008ac0 <MX_USART1_UART_Init+0x90>)
 8008a44:	2200      	movs	r2, #0
 8008a46:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8008a48:	4b1d      	ldr	r3, [pc, #116]	; (8008ac0 <MX_USART1_UART_Init+0x90>)
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8008a4e:	4b1c      	ldr	r3, [pc, #112]	; (8008ac0 <MX_USART1_UART_Init+0x90>)
 8008a50:	2200      	movs	r2, #0
 8008a52:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8008a54:	4b1a      	ldr	r3, [pc, #104]	; (8008ac0 <MX_USART1_UART_Init+0x90>)
 8008a56:	220c      	movs	r2, #12
 8008a58:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008a5a:	4b19      	ldr	r3, [pc, #100]	; (8008ac0 <MX_USART1_UART_Init+0x90>)
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8008a60:	4b17      	ldr	r3, [pc, #92]	; (8008ac0 <MX_USART1_UART_Init+0x90>)
 8008a62:	2200      	movs	r2, #0
 8008a64:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8008a66:	4b16      	ldr	r3, [pc, #88]	; (8008ac0 <MX_USART1_UART_Init+0x90>)
 8008a68:	2200      	movs	r2, #0
 8008a6a:	621a      	str	r2, [r3, #32]
	huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8008a6c:	4b14      	ldr	r3, [pc, #80]	; (8008ac0 <MX_USART1_UART_Init+0x90>)
 8008a6e:	2200      	movs	r2, #0
 8008a70:	625a      	str	r2, [r3, #36]	; 0x24
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8008a72:	4b13      	ldr	r3, [pc, #76]	; (8008ac0 <MX_USART1_UART_Init+0x90>)
 8008a74:	2200      	movs	r2, #0
 8008a76:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8008a78:	4811      	ldr	r0, [pc, #68]	; (8008ac0 <MX_USART1_UART_Init+0x90>)
 8008a7a:	f7fd fc9b 	bl	80063b4 <HAL_UART_Init>
 8008a7e:	4603      	mov	r3, r0
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d001      	beq.n	8008a88 <MX_USART1_UART_Init+0x58>
		Error_Handler();
 8008a84:	f000 f98e 	bl	8008da4 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK) {
 8008a88:	2100      	movs	r1, #0
 8008a8a:	480d      	ldr	r0, [pc, #52]	; (8008ac0 <MX_USART1_UART_Init+0x90>)
 8008a8c:	f7ff fb9f 	bl	80081ce <HAL_UARTEx_SetTxFifoThreshold>
 8008a90:	4603      	mov	r3, r0
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d001      	beq.n	8008a9a <MX_USART1_UART_Init+0x6a>
		Error_Handler();
 8008a96:	f000 f985 	bl	8008da4 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK) {
 8008a9a:	2100      	movs	r1, #0
 8008a9c:	4808      	ldr	r0, [pc, #32]	; (8008ac0 <MX_USART1_UART_Init+0x90>)
 8008a9e:	f7ff fbd4 	bl	800824a <HAL_UARTEx_SetRxFifoThreshold>
 8008aa2:	4603      	mov	r3, r0
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d001      	beq.n	8008aac <MX_USART1_UART_Init+0x7c>
		Error_Handler();
 8008aa8:	f000 f97c 	bl	8008da4 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK) {
 8008aac:	4804      	ldr	r0, [pc, #16]	; (8008ac0 <MX_USART1_UART_Init+0x90>)
 8008aae:	f7ff fb55 	bl	800815c <HAL_UARTEx_DisableFifoMode>
 8008ab2:	4603      	mov	r3, r0
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d001      	beq.n	8008abc <MX_USART1_UART_Init+0x8c>
		Error_Handler();
 8008ab8:	f000 f974 	bl	8008da4 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8008abc:	bf00      	nop
 8008abe:	bd80      	pop	{r7, pc}
 8008ac0:	2000010c 	.word	0x2000010c
 8008ac4:	40013800 	.word	0x40013800

08008ac8 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8008acc:	4b23      	ldr	r3, [pc, #140]	; (8008b5c <MX_USART2_UART_Init+0x94>)
 8008ace:	4a24      	ldr	r2, [pc, #144]	; (8008b60 <MX_USART2_UART_Init+0x98>)
 8008ad0:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8008ad2:	4b22      	ldr	r3, [pc, #136]	; (8008b5c <MX_USART2_UART_Init+0x94>)
 8008ad4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008ad8:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8008ada:	4b20      	ldr	r3, [pc, #128]	; (8008b5c <MX_USART2_UART_Init+0x94>)
 8008adc:	2200      	movs	r2, #0
 8008ade:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8008ae0:	4b1e      	ldr	r3, [pc, #120]	; (8008b5c <MX_USART2_UART_Init+0x94>)
 8008ae2:	2200      	movs	r2, #0
 8008ae4:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8008ae6:	4b1d      	ldr	r3, [pc, #116]	; (8008b5c <MX_USART2_UART_Init+0x94>)
 8008ae8:	2200      	movs	r2, #0
 8008aea:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8008aec:	4b1b      	ldr	r3, [pc, #108]	; (8008b5c <MX_USART2_UART_Init+0x94>)
 8008aee:	220c      	movs	r2, #12
 8008af0:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8008af2:	4b1a      	ldr	r3, [pc, #104]	; (8008b5c <MX_USART2_UART_Init+0x94>)
 8008af4:	f44f 7240 	mov.w	r2, #768	; 0x300
 8008af8:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8008afa:	4b18      	ldr	r3, [pc, #96]	; (8008b5c <MX_USART2_UART_Init+0x94>)
 8008afc:	2200      	movs	r2, #0
 8008afe:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8008b00:	4b16      	ldr	r3, [pc, #88]	; (8008b5c <MX_USART2_UART_Init+0x94>)
 8008b02:	2200      	movs	r2, #0
 8008b04:	621a      	str	r2, [r3, #32]
	huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8008b06:	4b15      	ldr	r3, [pc, #84]	; (8008b5c <MX_USART2_UART_Init+0x94>)
 8008b08:	2200      	movs	r2, #0
 8008b0a:	625a      	str	r2, [r3, #36]	; 0x24
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8008b0c:	4b13      	ldr	r3, [pc, #76]	; (8008b5c <MX_USART2_UART_Init+0x94>)
 8008b0e:	2200      	movs	r2, #0
 8008b10:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8008b12:	4812      	ldr	r0, [pc, #72]	; (8008b5c <MX_USART2_UART_Init+0x94>)
 8008b14:	f7fd fc4e 	bl	80063b4 <HAL_UART_Init>
 8008b18:	4603      	mov	r3, r0
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d001      	beq.n	8008b22 <MX_USART2_UART_Init+0x5a>
		Error_Handler();
 8008b1e:	f000 f941 	bl	8008da4 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK) {
 8008b22:	2100      	movs	r1, #0
 8008b24:	480d      	ldr	r0, [pc, #52]	; (8008b5c <MX_USART2_UART_Init+0x94>)
 8008b26:	f7ff fb52 	bl	80081ce <HAL_UARTEx_SetTxFifoThreshold>
 8008b2a:	4603      	mov	r3, r0
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d001      	beq.n	8008b34 <MX_USART2_UART_Init+0x6c>
		Error_Handler();
 8008b30:	f000 f938 	bl	8008da4 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK) {
 8008b34:	2100      	movs	r1, #0
 8008b36:	4809      	ldr	r0, [pc, #36]	; (8008b5c <MX_USART2_UART_Init+0x94>)
 8008b38:	f7ff fb87 	bl	800824a <HAL_UARTEx_SetRxFifoThreshold>
 8008b3c:	4603      	mov	r3, r0
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d001      	beq.n	8008b46 <MX_USART2_UART_Init+0x7e>
		Error_Handler();
 8008b42:	f000 f92f 	bl	8008da4 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK) {
 8008b46:	4805      	ldr	r0, [pc, #20]	; (8008b5c <MX_USART2_UART_Init+0x94>)
 8008b48:	f7ff fb08 	bl	800815c <HAL_UARTEx_DisableFifoMode>
 8008b4c:	4603      	mov	r3, r0
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d001      	beq.n	8008b56 <MX_USART2_UART_Init+0x8e>
		Error_Handler();
 8008b52:	f000 f927 	bl	8008da4 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8008b56:	bf00      	nop
 8008b58:	bd80      	pop	{r7, pc}
 8008b5a:	bf00      	nop
 8008b5c:	200001a0 	.word	0x200001a0
 8008b60:	40004400 	.word	0x40004400

08008b64 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b08c      	sub	sp, #48	; 0x30
 8008b68:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8008b6a:	f107 031c 	add.w	r3, r7, #28
 8008b6e:	2200      	movs	r2, #0
 8008b70:	601a      	str	r2, [r3, #0]
 8008b72:	605a      	str	r2, [r3, #4]
 8008b74:	609a      	str	r2, [r3, #8]
 8008b76:	60da      	str	r2, [r3, #12]
 8008b78:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8008b7a:	4b83      	ldr	r3, [pc, #524]	; (8008d88 <MX_GPIO_Init+0x224>)
 8008b7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008b80:	4a81      	ldr	r2, [pc, #516]	; (8008d88 <MX_GPIO_Init+0x224>)
 8008b82:	f043 0304 	orr.w	r3, r3, #4
 8008b86:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8008b8a:	4b7f      	ldr	r3, [pc, #508]	; (8008d88 <MX_GPIO_Init+0x224>)
 8008b8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008b90:	f003 0304 	and.w	r3, r3, #4
 8008b94:	61bb      	str	r3, [r7, #24]
 8008b96:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8008b98:	4b7b      	ldr	r3, [pc, #492]	; (8008d88 <MX_GPIO_Init+0x224>)
 8008b9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008b9e:	4a7a      	ldr	r2, [pc, #488]	; (8008d88 <MX_GPIO_Init+0x224>)
 8008ba0:	f043 0320 	orr.w	r3, r3, #32
 8008ba4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8008ba8:	4b77      	ldr	r3, [pc, #476]	; (8008d88 <MX_GPIO_Init+0x224>)
 8008baa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008bae:	f003 0320 	and.w	r3, r3, #32
 8008bb2:	617b      	str	r3, [r7, #20]
 8008bb4:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8008bb6:	4b74      	ldr	r3, [pc, #464]	; (8008d88 <MX_GPIO_Init+0x224>)
 8008bb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008bbc:	4a72      	ldr	r2, [pc, #456]	; (8008d88 <MX_GPIO_Init+0x224>)
 8008bbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008bc2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8008bc6:	4b70      	ldr	r3, [pc, #448]	; (8008d88 <MX_GPIO_Init+0x224>)
 8008bc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008bcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008bd0:	613b      	str	r3, [r7, #16]
 8008bd2:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8008bd4:	4b6c      	ldr	r3, [pc, #432]	; (8008d88 <MX_GPIO_Init+0x224>)
 8008bd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008bda:	4a6b      	ldr	r2, [pc, #428]	; (8008d88 <MX_GPIO_Init+0x224>)
 8008bdc:	f043 0302 	orr.w	r3, r3, #2
 8008be0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8008be4:	4b68      	ldr	r3, [pc, #416]	; (8008d88 <MX_GPIO_Init+0x224>)
 8008be6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008bea:	f003 0302 	and.w	r3, r3, #2
 8008bee:	60fb      	str	r3, [r7, #12]
 8008bf0:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8008bf2:	4b65      	ldr	r3, [pc, #404]	; (8008d88 <MX_GPIO_Init+0x224>)
 8008bf4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008bf8:	4a63      	ldr	r2, [pc, #396]	; (8008d88 <MX_GPIO_Init+0x224>)
 8008bfa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008bfe:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8008c02:	4b61      	ldr	r3, [pc, #388]	; (8008d88 <MX_GPIO_Init+0x224>)
 8008c04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008c08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c0c:	60bb      	str	r3, [r7, #8]
 8008c0e:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8008c10:	4b5d      	ldr	r3, [pc, #372]	; (8008d88 <MX_GPIO_Init+0x224>)
 8008c12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008c16:	4a5c      	ldr	r2, [pc, #368]	; (8008d88 <MX_GPIO_Init+0x224>)
 8008c18:	f043 0301 	orr.w	r3, r3, #1
 8008c1c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8008c20:	4b59      	ldr	r3, [pc, #356]	; (8008d88 <MX_GPIO_Init+0x224>)
 8008c22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008c26:	f003 0301 	and.w	r3, r3, #1
 8008c2a:	607b      	str	r3, [r7, #4]
 8008c2c:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8008c2e:	4b56      	ldr	r3, [pc, #344]	; (8008d88 <MX_GPIO_Init+0x224>)
 8008c30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008c34:	4a54      	ldr	r2, [pc, #336]	; (8008d88 <MX_GPIO_Init+0x224>)
 8008c36:	f043 0308 	orr.w	r3, r3, #8
 8008c3a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8008c3e:	4b52      	ldr	r3, [pc, #328]	; (8008d88 <MX_GPIO_Init+0x224>)
 8008c40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008c44:	f003 0308 	and.w	r3, r3, #8
 8008c48:	603b      	str	r3, [r7, #0]
 8008c4a:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(BT122_PF2_GPIO_Port, BT122_PF2_Pin, GPIO_PIN_SET);
 8008c4c:	2201      	movs	r2, #1
 8008c4e:	2108      	movs	r1, #8
 8008c50:	484e      	ldr	r0, [pc, #312]	; (8008d8c <MX_GPIO_Init+0x228>)
 8008c52:	f7f8 fc27 	bl	80014a4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8008c56:	2200      	movs	r2, #0
 8008c58:	2104      	movs	r1, #4
 8008c5a:	484d      	ldr	r0, [pc, #308]	; (8008d90 <MX_GPIO_Init+0x22c>)
 8008c5c:	f7f8 fc22 	bl	80014a4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8008c60:	2200      	movs	r2, #0
 8008c62:	2180      	movs	r1, #128	; 0x80
 8008c64:	484b      	ldr	r0, [pc, #300]	; (8008d94 <MX_GPIO_Init+0x230>)
 8008c66:	f7f8 fc1d 	bl	80014a4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, UCPD_DBn_Pin | LED_BLUE_Pin, GPIO_PIN_RESET);
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	21a0      	movs	r1, #160	; 0xa0
 8008c6e:	484a      	ldr	r0, [pc, #296]	; (8008d98 <MX_GPIO_Init+0x234>)
 8008c70:	f7f8 fc18 	bl	80014a4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : USER_BUTTON_Pin */
	GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8008c74:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008c78:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8008c7a:	4b48      	ldr	r3, [pc, #288]	; (8008d9c <MX_GPIO_Init+0x238>)
 8008c7c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c7e:	2300      	movs	r3, #0
 8008c80:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8008c82:	f107 031c 	add.w	r3, r7, #28
 8008c86:	4619      	mov	r1, r3
 8008c88:	4842      	ldr	r0, [pc, #264]	; (8008d94 <MX_GPIO_Init+0x230>)
 8008c8a:	f7f8 fa1b 	bl	80010c4 <HAL_GPIO_Init>

	/*Configure GPIO pin : BT122_PF2_Pin */
	GPIO_InitStruct.Pin = BT122_PF2_Pin;
 8008c8e:	2308      	movs	r3, #8
 8008c90:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008c92:	2301      	movs	r3, #1
 8008c94:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c96:	2300      	movs	r3, #0
 8008c98:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(BT122_PF2_GPIO_Port, &GPIO_InitStruct);
 8008c9e:	f107 031c 	add.w	r3, r7, #28
 8008ca2:	4619      	mov	r1, r3
 8008ca4:	4839      	ldr	r0, [pc, #228]	; (8008d8c <MX_GPIO_Init+0x228>)
 8008ca6:	f7f8 fa0d 	bl	80010c4 <HAL_GPIO_Init>

	/*Configure GPIO pin : BT122_PF3_Pin */
	GPIO_InitStruct.Pin = BT122_PF3_Pin;
 8008caa:	2320      	movs	r3, #32
 8008cac:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008cae:	2300      	movs	r3, #0
 8008cb0:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(BT122_PF3_GPIO_Port, &GPIO_InitStruct);
 8008cb6:	f107 031c 	add.w	r3, r7, #28
 8008cba:	4619      	mov	r1, r3
 8008cbc:	4833      	ldr	r0, [pc, #204]	; (8008d8c <MX_GPIO_Init+0x228>)
 8008cbe:	f7f8 fa01 	bl	80010c4 <HAL_GPIO_Init>

	/*Configure GPIO pin : VBUS_SENSE_Pin */
	GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 8008cc2:	2304      	movs	r3, #4
 8008cc4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008cc6:	2303      	movs	r3, #3
 8008cc8:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008cca:	2300      	movs	r3, #0
 8008ccc:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 8008cce:	f107 031c 	add.w	r3, r7, #28
 8008cd2:	4619      	mov	r1, r3
 8008cd4:	482f      	ldr	r0, [pc, #188]	; (8008d94 <MX_GPIO_Init+0x230>)
 8008cd6:	f7f8 f9f5 	bl	80010c4 <HAL_GPIO_Init>

	/*Configure GPIO pin : UCPD_FLT_Pin */
	GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 8008cda:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008cde:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 8008ce8:	f107 031c 	add.w	r3, r7, #28
 8008cec:	4619      	mov	r1, r3
 8008cee:	482a      	ldr	r0, [pc, #168]	; (8008d98 <MX_GPIO_Init+0x234>)
 8008cf0:	f7f8 f9e8 	bl	80010c4 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB15 */
	GPIO_InitStruct.Pin = GPIO_PIN_15;
 8008cf4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008cf8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008cfa:	2303      	movs	r3, #3
 8008cfc:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008cfe:	2300      	movs	r3, #0
 8008d00:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008d02:	f107 031c 	add.w	r3, r7, #28
 8008d06:	4619      	mov	r1, r3
 8008d08:	4823      	ldr	r0, [pc, #140]	; (8008d98 <MX_GPIO_Init+0x234>)
 8008d0a:	f7f8 f9db 	bl	80010c4 <HAL_GPIO_Init>

	/*Configure GPIO pin : LED_RED_Pin */
	GPIO_InitStruct.Pin = LED_RED_Pin;
 8008d0e:	2304      	movs	r3, #4
 8008d10:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008d12:	2301      	movs	r3, #1
 8008d14:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d16:	2300      	movs	r3, #0
 8008d18:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8008d1e:	f107 031c 	add.w	r3, r7, #28
 8008d22:	4619      	mov	r1, r3
 8008d24:	481a      	ldr	r0, [pc, #104]	; (8008d90 <MX_GPIO_Init+0x22c>)
 8008d26:	f7f8 f9cd 	bl	80010c4 <HAL_GPIO_Init>

	/*Configure GPIO pin : LED_GREEN_Pin */
	GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8008d2a:	2380      	movs	r3, #128	; 0x80
 8008d2c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008d2e:	2301      	movs	r3, #1
 8008d30:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d32:	2300      	movs	r3, #0
 8008d34:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008d36:	2300      	movs	r3, #0
 8008d38:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8008d3a:	f107 031c 	add.w	r3, r7, #28
 8008d3e:	4619      	mov	r1, r3
 8008d40:	4814      	ldr	r0, [pc, #80]	; (8008d94 <MX_GPIO_Init+0x230>)
 8008d42:	f7f8 f9bf 	bl	80010c4 <HAL_GPIO_Init>

	/*Configure GPIO pins : PA11 PA12 */
	GPIO_InitStruct.Pin = GPIO_PIN_11 | GPIO_PIN_12;
 8008d46:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008d4a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008d4c:	2302      	movs	r3, #2
 8008d4e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d50:	2300      	movs	r3, #0
 8008d52:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008d54:	2300      	movs	r3, #0
 8008d56:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008d58:	f107 031c 	add.w	r3, r7, #28
 8008d5c:	4619      	mov	r1, r3
 8008d5e:	4810      	ldr	r0, [pc, #64]	; (8008da0 <MX_GPIO_Init+0x23c>)
 8008d60:	f7f8 f9b0 	bl	80010c4 <HAL_GPIO_Init>

	/*Configure GPIO pins : UCPD_DBn_Pin LED_BLUE_Pin */
	GPIO_InitStruct.Pin = UCPD_DBn_Pin | LED_BLUE_Pin;
 8008d64:	23a0      	movs	r3, #160	; 0xa0
 8008d66:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008d68:	2301      	movs	r3, #1
 8008d6a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008d70:	2300      	movs	r3, #0
 8008d72:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008d74:	f107 031c 	add.w	r3, r7, #28
 8008d78:	4619      	mov	r1, r3
 8008d7a:	4807      	ldr	r0, [pc, #28]	; (8008d98 <MX_GPIO_Init+0x234>)
 8008d7c:	f7f8 f9a2 	bl	80010c4 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8008d80:	bf00      	nop
 8008d82:	3730      	adds	r7, #48	; 0x30
 8008d84:	46bd      	mov	sp, r7
 8008d86:	bd80      	pop	{r7, pc}
 8008d88:	46020c00 	.word	0x46020c00
 8008d8c:	42021400 	.word	0x42021400
 8008d90:	42021800 	.word	0x42021800
 8008d94:	42020800 	.word	0x42020800
 8008d98:	42020400 	.word	0x42020400
 8008d9c:	10110000 	.word	0x10110000
 8008da0:	42020000 	.word	0x42020000

08008da4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8008da4:	b480      	push	{r7}
 8008da6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8008da8:	b672      	cpsid	i
}
 8008daa:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8008dac:	e7fe      	b.n	8008dac <Error_Handler+0x8>
	...

08008db0 <downloadFirmwareToFlash>:
 * @param   flashAddress  The starting address of where to put firmware in flash. Must be an address corresponding to the start of a flash page.
 * @param   flashBank     The flash bank that the firmware should be written too.
 * @param   size          The size of the firmware in bytes that will be downloaded over UART.
 * @retval  Status code indicating success or failure of firmware download.
 */
HAL_StatusTypeDef downloadFirmwareToFlash(UART_HandleTypeDef *huart, uint32_t flashAddress, int size) {
 8008db0:	b580      	push	{r7, lr}
 8008db2:	f5ad 5d00 	sub.w	sp, sp, #8192	; 0x2000
 8008db6:	b08a      	sub	sp, #40	; 0x28
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008dbe:	f843 0c1c 	str.w	r0, [r3, #-28]
 8008dc2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008dc6:	f843 1c20 	str.w	r1, [r3, #-32]
 8008dca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008dce:	f843 2c24 	str.w	r2, [r3, #-36]
	if (flashAddress % FLASH_PAGE_SIZE != 0) {
 8008dd2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008dd6:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8008dda:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d004      	beq.n	8008dec <downloadFirmwareToFlash+0x3c>
		printf("Error: input parameter 'flashAddress' must be an address corresponding to the start of a flash page (i.e. a multiple of FLASH_PAGE_SIZE).\n");
 8008de2:	48ae      	ldr	r0, [pc, #696]	; (800909c <downloadFirmwareToFlash+0x2ec>)
 8008de4:	f001 fb24 	bl	800a430 <puts>
		return HAL_ERROR;
 8008de8:	2301      	movs	r3, #1
 8008dea:	e151      	b.n	8009090 <downloadFirmwareToFlash+0x2e0>
	}

	// Receive and store to flash 1 page (8KB) at a time
	int numPages = size / FLASH_PAGE_SIZE;
 8008dec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008df0:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8008df4:	0b5b      	lsrs	r3, r3, #13
 8008df6:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8008dfa:	f102 0220 	add.w	r2, r2, #32
 8008dfe:	6013      	str	r3, [r2, #0]
	int leftOverBytes = size - (numPages * FLASH_PAGE_SIZE);
 8008e00:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008e04:	f853 2c24 	ldr.w	r2, [r3, #-36]
 8008e08:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8008e0c:	f103 0320 	add.w	r3, r3, #32
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	035b      	lsls	r3, r3, #13
 8008e14:	1ad3      	subs	r3, r2, r3
 8008e16:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8008e1a:	f102 021c 	add.w	r2, r2, #28
 8008e1e:	6013      	str	r3, [r2, #0]
	printf("Downloading %d pages of %d bytes each + %d left over bytes to flash.\n", numPages, FLASH_PAGE_SIZE, leftOverBytes);
 8008e20:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8008e24:	f103 031c 	add.w	r3, r3, #28
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008e2e:	f507 5100 	add.w	r1, r7, #8192	; 0x2000
 8008e32:	f101 0120 	add.w	r1, r1, #32
 8008e36:	6809      	ldr	r1, [r1, #0]
 8008e38:	4899      	ldr	r0, [pc, #612]	; (80090a0 <downloadFirmwareToFlash+0x2f0>)
 8008e3a:	f001 fa8b 	bl	800a354 <iprintf>

	char firmwarePage[FLASH_PAGE_SIZE];


	uint32_t flashPage = (flashAddress - 0x08000000) / FLASH_PAGE_SIZE; // starting page
 8008e3e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008e42:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8008e46:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8008e4a:	0b5b      	lsrs	r3, r3, #13
 8008e4c:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8008e50:	f102 0218 	add.w	r2, r2, #24
 8008e54:	6013      	str	r3, [r2, #0]

	for (int i = 0; i < numPages; i++) {
 8008e56:	2300      	movs	r3, #0
 8008e58:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8008e5c:	f102 0224 	add.w	r2, r2, #36	; 0x24
 8008e60:	6013      	str	r3, [r2, #0]
 8008e62:	e07d      	b.n	8008f60 <downloadFirmwareToFlash+0x1b0>
		// received FLASH_PAGE_SIZE bytes over uart
		while (uart_rx_it_get_length(get_UART_num(huart)) != FLASH_PAGE_SIZE) {
 8008e64:	bf00      	nop
 8008e66:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008e6a:	f853 0c1c 	ldr.w	r0, [r3, #-28]
 8008e6e:	f000 fd91 	bl	8009994 <get_UART_num>
 8008e72:	4603      	mov	r3, r0
 8008e74:	4618      	mov	r0, r3
 8008e76:	f000 ff0f 	bl	8009c98 <uart_rx_it_get_length>
 8008e7a:	4603      	mov	r3, r0
 8008e7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008e80:	d1f1      	bne.n	8008e66 <downloadFirmwareToFlash+0xb6>
//		HAL_	StatusTypeDef status = HAL_UART_Receive(huart, (uint8_t *) firmwarePage, FLASH_PAGE_SIZE, HAL_MAX_DELAY);
//		if (status != HAL_OK) {
//			printf("Error: failed to receive firmware data (page = %d) over UART (status = %d)\n", i, status);
//			return status;
//		}
		if (uart_rx_it(huart, FLASH_PAGE_SIZE, firmwarePage) != FLASH_PAGE_SIZE) {
 8008e82:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008e86:	3b10      	subs	r3, #16
 8008e88:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8008e8c:	4610      	mov	r0, r2
 8008e8e:	461a      	mov	r2, r3
 8008e90:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008e94:	f850 0c1c 	ldr.w	r0, [r0, #-28]
 8008e98:	f000 fdd2 	bl	8009a40 <uart_rx_it>
 8008e9c:	4603      	mov	r3, r0
 8008e9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008ea2:	d004      	beq.n	8008eae <downloadFirmwareToFlash+0xfe>
			// did not received correct amount of bytes
			printf("Error: did not receive correct amount of bytes.\n");
 8008ea4:	487f      	ldr	r0, [pc, #508]	; (80090a4 <downloadFirmwareToFlash+0x2f4>)
 8008ea6:	f001 fac3 	bl	800a430 <puts>
			return HAL_ERROR;
 8008eaa:	2301      	movs	r3, #1
 8008eac:	e0f0      	b.n	8009090 <downloadFirmwareToFlash+0x2e0>
		}

		uart_rx_it_clear_buffer(get_UART_num(huart));
 8008eae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008eb2:	f853 0c1c 	ldr.w	r0, [r3, #-28]
 8008eb6:	f000 fd6d 	bl	8009994 <get_UART_num>
 8008eba:	4603      	mov	r3, r0
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	f000 ff07 	bl	8009cd0 <uart_rx_it_clear_buffer>

		// write firmware page to flash
		if (eraseFlashPage_Advanced(flashPage+i) != HAL_OK) {
 8008ec2:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8008ec6:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8008eca:	681a      	ldr	r2, [r3, #0]
 8008ecc:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8008ed0:	f103 0318 	add.w	r3, r3, #24
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	4413      	add	r3, r2
 8008ed8:	4618      	mov	r0, r3
 8008eda:	f7ff fb7f 	bl	80085dc <eraseFlashPage_Advanced>
 8008ede:	4603      	mov	r3, r0
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d001      	beq.n	8008ee8 <downloadFirmwareToFlash+0x138>
			return HAL_ERROR;
 8008ee4:	2301      	movs	r3, #1
 8008ee6:	e0d3      	b.n	8009090 <downloadFirmwareToFlash+0x2e0>
		}
		if (writeFlashPage(flashPage+i, firmwarePage) != HAL_OK) {
 8008ee8:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8008eec:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8008ef0:	681a      	ldr	r2, [r3, #0]
 8008ef2:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8008ef6:	f103 0318 	add.w	r3, r3, #24
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	4413      	add	r3, r2
 8008efe:	461a      	mov	r2, r3
 8008f00:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008f04:	3b10      	subs	r3, #16
 8008f06:	4619      	mov	r1, r3
 8008f08:	4610      	mov	r0, r2
 8008f0a:	f7ff fb35 	bl	8008578 <writeFlashPage>
 8008f0e:	4603      	mov	r3, r0
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d001      	beq.n	8008f18 <downloadFirmwareToFlash+0x168>
			return HAL_ERROR;
 8008f14:	2301      	movs	r3, #1
 8008f16:	e0bb      	b.n	8009090 <downloadFirmwareToFlash+0x2e0>
//		if (writeFlashPage(flashPage+i, firmwarePage) != HAL_OK) {
//			return HAL_ERROR;
//		}


		printf("Downloaded page %d, sending confirmation:\n", i);
 8008f18:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8008f1c:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8008f20:	6819      	ldr	r1, [r3, #0]
 8008f22:	4861      	ldr	r0, [pc, #388]	; (80090a8 <downloadFirmwareToFlash+0x2f8>)
 8008f24:	f001 fa16 	bl	800a354 <iprintf>

		// send confirmation signal to receive next page
		char confirmation[] = {0xFF};
 8008f28:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008f2c:	22ff      	movs	r2, #255	; 0xff
 8008f2e:	f803 2c14 	strb.w	r2, [r3, #-20]
		uart_tx(huart, 1, confirmation);
 8008f32:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008f36:	3b14      	subs	r3, #20
 8008f38:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8008f3c:	4610      	mov	r0, r2
 8008f3e:	461a      	mov	r2, r3
 8008f40:	2101      	movs	r1, #1
 8008f42:	f850 0c1c 	ldr.w	r0, [r0, #-28]
 8008f46:	f000 fd47 	bl	80099d8 <uart_tx>
	for (int i = 0; i < numPages; i++) {
 8008f4a:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8008f4e:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	3301      	adds	r3, #1
 8008f56:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8008f5a:	f102 0224 	add.w	r2, r2, #36	; 0x24
 8008f5e:	6013      	str	r3, [r2, #0]
 8008f60:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8008f64:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8008f68:	681a      	ldr	r2, [r3, #0]
 8008f6a:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8008f6e:	f103 0320 	add.w	r3, r3, #32
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	429a      	cmp	r2, r3
 8008f76:	f6ff af75 	blt.w	8008e64 <downloadFirmwareToFlash+0xb4>
	}

	// receive left over bytes
	if (leftOverBytes != 0) {
 8008f7a:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8008f7e:	f103 031c 	add.w	r3, r3, #28
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	f000 8082 	beq.w	800908e <downloadFirmwareToFlash+0x2de>
		// clear firmwarePage buffer
		memset((void *) firmwarePage, 255, FLASH_PAGE_SIZE);
 8008f8a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008f8e:	3b10      	subs	r3, #16
 8008f90:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008f94:	21ff      	movs	r1, #255	; 0xff
 8008f96:	4618      	mov	r0, r3
 8008f98:	f001 fb2a 	bl	800a5f0 <memset>

		while (uart_rx_it_get_length(get_UART_num(huart)) != leftOverBytes) {
 8008f9c:	bf00      	nop
 8008f9e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008fa2:	f853 0c1c 	ldr.w	r0, [r3, #-28]
 8008fa6:	f000 fcf5 	bl	8009994 <get_UART_num>
 8008faa:	4603      	mov	r3, r0
 8008fac:	4618      	mov	r0, r3
 8008fae:	f000 fe73 	bl	8009c98 <uart_rx_it_get_length>
 8008fb2:	4602      	mov	r2, r0
 8008fb4:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8008fb8:	f103 031c 	add.w	r3, r3, #28
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	4293      	cmp	r3, r2
 8008fc0:	d1ed      	bne.n	8008f9e <downloadFirmwareToFlash+0x1ee>
			// wait until all left over bytes have been received
		}
		if (uart_rx_it(huart, leftOverBytes, firmwarePage) != leftOverBytes) {
 8008fc2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008fc6:	3b10      	subs	r3, #16
 8008fc8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8008fcc:	4610      	mov	r0, r2
 8008fce:	461a      	mov	r2, r3
 8008fd0:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8008fd4:	f103 031c 	add.w	r3, r3, #28
 8008fd8:	6819      	ldr	r1, [r3, #0]
 8008fda:	f850 0c1c 	ldr.w	r0, [r0, #-28]
 8008fde:	f000 fd2f 	bl	8009a40 <uart_rx_it>
 8008fe2:	4602      	mov	r2, r0
 8008fe4:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8008fe8:	f103 031c 	add.w	r3, r3, #28
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	4293      	cmp	r3, r2
 8008ff0:	d004      	beq.n	8008ffc <downloadFirmwareToFlash+0x24c>
			printf("Error: did not receive correct amount of bytes.\n");
 8008ff2:	482c      	ldr	r0, [pc, #176]	; (80090a4 <downloadFirmwareToFlash+0x2f4>)
 8008ff4:	f001 fa1c 	bl	800a430 <puts>
			return HAL_ERROR;
 8008ff8:	2301      	movs	r3, #1
 8008ffa:	e049      	b.n	8009090 <downloadFirmwareToFlash+0x2e0>
		}

		uart_rx_it_clear_buffer(get_UART_num(huart));
 8008ffc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009000:	f853 0c1c 	ldr.w	r0, [r3, #-28]
 8009004:	f000 fcc6 	bl	8009994 <get_UART_num>
 8009008:	4603      	mov	r3, r0
 800900a:	4618      	mov	r0, r3
 800900c:	f000 fe60 	bl	8009cd0 <uart_rx_it_clear_buffer>


		// write received data to flash
		if (eraseFlashPage_Advanced(flashPage + numPages) != HAL_OK) {
 8009010:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8009014:	f103 0320 	add.w	r3, r3, #32
 8009018:	681a      	ldr	r2, [r3, #0]
 800901a:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800901e:	f103 0318 	add.w	r3, r3, #24
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	4413      	add	r3, r2
 8009026:	4618      	mov	r0, r3
 8009028:	f7ff fad8 	bl	80085dc <eraseFlashPage_Advanced>
 800902c:	4603      	mov	r3, r0
 800902e:	2b00      	cmp	r3, #0
 8009030:	d001      	beq.n	8009036 <downloadFirmwareToFlash+0x286>
			return HAL_ERROR;
 8009032:	2301      	movs	r3, #1
 8009034:	e02c      	b.n	8009090 <downloadFirmwareToFlash+0x2e0>
		}
		if (writeFlashPage(flashPage + numPages, firmwarePage) != HAL_OK) {
 8009036:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800903a:	f103 0320 	add.w	r3, r3, #32
 800903e:	681a      	ldr	r2, [r3, #0]
 8009040:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8009044:	f103 0318 	add.w	r3, r3, #24
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	4413      	add	r3, r2
 800904c:	461a      	mov	r2, r3
 800904e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009052:	3b10      	subs	r3, #16
 8009054:	4619      	mov	r1, r3
 8009056:	4610      	mov	r0, r2
 8009058:	f7ff fa8e 	bl	8008578 <writeFlashPage>
 800905c:	4603      	mov	r3, r0
 800905e:	2b00      	cmp	r3, #0
 8009060:	d001      	beq.n	8009066 <downloadFirmwareToFlash+0x2b6>
			return HAL_ERROR;
 8009062:	2301      	movs	r3, #1
 8009064:	e014      	b.n	8009090 <downloadFirmwareToFlash+0x2e0>
		}

		printf("Downloaded extra bytes. Sending confirmation:\n");
 8009066:	4811      	ldr	r0, [pc, #68]	; (80090ac <downloadFirmwareToFlash+0x2fc>)
 8009068:	f001 f9e2 	bl	800a430 <puts>

		char confirmation[] = {0xFF};
 800906c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009070:	22ff      	movs	r2, #255	; 0xff
 8009072:	f803 2c18 	strb.w	r2, [r3, #-24]
		uart_tx(huart, 1, confirmation);
 8009076:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800907a:	3b18      	subs	r3, #24
 800907c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8009080:	4610      	mov	r0, r2
 8009082:	461a      	mov	r2, r3
 8009084:	2101      	movs	r1, #1
 8009086:	f850 0c1c 	ldr.w	r0, [r0, #-28]
 800908a:	f000 fca5 	bl	80099d8 <uart_tx>

	}


	return HAL_OK;
 800908e:	2300      	movs	r3, #0
}
 8009090:	4618      	mov	r0, r3
 8009092:	f507 5700 	add.w	r7, r7, #8192	; 0x2000
 8009096:	3728      	adds	r7, #40	; 0x28
 8009098:	46bd      	mov	sp, r7
 800909a:	bd80      	pop	{r7, pc}
 800909c:	0800bec4 	.word	0x0800bec4
 80090a0:	0800bf50 	.word	0x0800bf50
 80090a4:	0800bf98 	.word	0x0800bf98
 80090a8:	0800bfc8 	.word	0x0800bfc8
 80090ac:	0800bff4 	.word	0x0800bff4

080090b0 <uploadFirmwareToBT122>:
 *
 * @param   flashAddress The start address in flash where the firmware data is stored.
 * @param   firmwareSize The size of the firmware data in bytes.
 * @retval
 */
FirmwareInfo uploadFirmwareToBT122(UART_HandleTypeDef *huart, const uint32_t flashAddress, const uint32_t firmwareSize) {
 80090b0:	b5b0      	push	{r4, r5, r7, lr}
 80090b2:	b0ae      	sub	sp, #184	; 0xb8
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	60f8      	str	r0, [r7, #12]
 80090b8:	60b9      	str	r1, [r7, #8]
 80090ba:	607a      	str	r2, [r7, #4]
 80090bc:	603b      	str	r3, [r7, #0]
	//update firmware using BGAPI

	// set BT122 UART mode to BGAPI mode
	setBT122UARTMode(BGAPI_MODE);
 80090be:	2000      	movs	r0, #0
 80090c0:	f7ff f9a6 	bl	8008410 <setBT122UARTMode>
	// Buffer for storing data from the serial port
	static char bg_buffer[BGLIB_MSG_MAXLEN];
	// Length of message payload data.
	uint16_t msg_length;
	// flag for while loop
	int firmwareFlag = 1;
 80090c4:	2301      	movs	r3, #1
 80090c6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	// keep track of how many bytes of firmware we have written
	int firmwareBytesWritten = 0;
 80090ca:	2300      	movs	r3, #0
 80090cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

	// FirmwareInfo return variable
	FirmwareInfo fi;
	fi.oldBootloaderVersion = 0;
 80090d0:	2300      	movs	r3, #0
 80090d2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	fi.major = 0;
 80090d6:	2300      	movs	r3, #0
 80090d8:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
	fi.minor = 0;
 80090dc:	2300      	movs	r3, #0
 80090de:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
	fi.patch = 0;
 80090e2:	2300      	movs	r3, #0
 80090e4:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
	fi.build = 0;
 80090e8:	2300      	movs	r3, #0
 80090ea:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
	fi.newBootloaderVersion = 0;
 80090ee:	2300      	movs	r3, #0
 80090f0:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
	fi.hardwareType = 0;
 80090f4:	2300      	movs	r3, #0
 80090f6:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2

	// start firmware upgrade process by booting into DFU mode (1)
	//dumo_cmd_system_reset((uint8_t) 1);
	dumo_cmd_dfu_reset((uint8_t) 1);
 80090fa:	4b94      	ldr	r3, [pc, #592]	; (800934c <uploadFirmwareToBT122+0x29c>)
 80090fc:	2201      	movs	r2, #1
 80090fe:	711a      	strb	r2, [r3, #4]
 8009100:	4b92      	ldr	r3, [pc, #584]	; (800934c <uploadFirmwareToBT122+0x29c>)
 8009102:	f44f 7290 	mov.w	r2, #288	; 0x120
 8009106:	601a      	str	r2, [r3, #0]
 8009108:	4b91      	ldr	r3, [pc, #580]	; (8009350 <uploadFirmwareToBT122+0x2a0>)
 800910a:	681c      	ldr	r4, [r3, #0]
 800910c:	2300      	movs	r3, #0
 800910e:	2200      	movs	r2, #0
 8009110:	498e      	ldr	r1, [pc, #568]	; (800934c <uploadFirmwareToBT122+0x29c>)
 8009112:	2005      	movs	r0, #5
 8009114:	47a0      	blx	r4

	while (firmwareFlag) {
 8009116:	e1cf      	b.n	80094b8 <uploadFirmwareToBT122+0x408>
		// Read enough data from UART to get BGAPI message header
		ret = uart_rx_it(huart, 1, bg_buffer);
 8009118:	4a8e      	ldr	r2, [pc, #568]	; (8009354 <uploadFirmwareToBT122+0x2a4>)
 800911a:	2101      	movs	r1, #1
 800911c:	68b8      	ldr	r0, [r7, #8]
 800911e:	f000 fc8f 	bl	8009a40 <uart_rx_it>
 8009122:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
		if (ret < 0) {
 8009126:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800912a:	2b00      	cmp	r3, #0
 800912c:	da0b      	bge.n	8009146 <uploadFirmwareToBT122+0x96>
			//Error_Handler();
			fi.status = HAL_ERROR;
 800912e:	2301      	movs	r3, #1
 8009130:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
			return fi;
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	461d      	mov	r5, r3
 8009138:	f107 0490 	add.w	r4, r7, #144	; 0x90
 800913c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800913e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009140:	6823      	ldr	r3, [r4, #0]
 8009142:	602b      	str	r3, [r5, #0]
 8009144:	e1c8      	b.n	80094d8 <uploadFirmwareToBT122+0x428>
		}

		// If first byte is zero skip it to avoid possible De-synchronization due to inherent UART framing error on module reset
		if (bg_buffer[0] == 0) {
 8009146:	4b83      	ldr	r3, [pc, #524]	; (8009354 <uploadFirmwareToBT122+0x2a4>)
 8009148:	781b      	ldrb	r3, [r3, #0]
 800914a:	2b00      	cmp	r3, #0
 800914c:	d107      	bne.n	800915e <uploadFirmwareToBT122+0xae>
			ret = uart_rx_it(huart, BGLIB_MSG_HEADER_LEN, bg_buffer);
 800914e:	4a81      	ldr	r2, [pc, #516]	; (8009354 <uploadFirmwareToBT122+0x2a4>)
 8009150:	2104      	movs	r1, #4
 8009152:	68b8      	ldr	r0, [r7, #8]
 8009154:	f000 fc74 	bl	8009a40 <uart_rx_it>
 8009158:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
 800915c:	e007      	b.n	800916e <uploadFirmwareToBT122+0xbe>
		} else {
			ret = uart_rx_it(huart, BGLIB_MSG_HEADER_LEN - 1, bg_buffer + 1);
 800915e:	4b7e      	ldr	r3, [pc, #504]	; (8009358 <uploadFirmwareToBT122+0x2a8>)
 8009160:	461a      	mov	r2, r3
 8009162:	2103      	movs	r1, #3
 8009164:	68b8      	ldr	r0, [r7, #8]
 8009166:	f000 fc6b 	bl	8009a40 <uart_rx_it>
 800916a:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
		}
		if (ret < 0) {
 800916e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009172:	2b00      	cmp	r3, #0
 8009174:	da0b      	bge.n	800918e <uploadFirmwareToBT122+0xde>
			//Error_Handler();
			fi.status = HAL_ERROR;
 8009176:	2301      	movs	r3, #1
 8009178:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
			return fi;
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	461d      	mov	r5, r3
 8009180:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8009184:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009186:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009188:	6823      	ldr	r3, [r4, #0]
 800918a:	602b      	str	r3, [r5, #0]
 800918c:	e1a4      	b.n	80094d8 <uploadFirmwareToBT122+0x428>
		}

		// The buffer now contains the message header. Refer to BGAPI protocol definition for details on packet format.
		msg_length = BGLIB_MSG_LEN(bg_buffer);
 800918e:	4b71      	ldr	r3, [pc, #452]	; (8009354 <uploadFirmwareToBT122+0x2a4>)
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	b29b      	uxth	r3, r3
 8009194:	021b      	lsls	r3, r3, #8
 8009196:	b29b      	uxth	r3, r3
 8009198:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800919c:	b29a      	uxth	r2, r3
 800919e:	4b6d      	ldr	r3, [pc, #436]	; (8009354 <uploadFirmwareToBT122+0x2a4>)
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	0a1b      	lsrs	r3, r3, #8
 80091a4:	b29b      	uxth	r3, r3
 80091a6:	b2db      	uxtb	r3, r3
 80091a8:	b29b      	uxth	r3, r3
 80091aa:	4313      	orrs	r3, r2
 80091ac:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
		// Read the payload data if required and store it after the header.
		if (msg_length) {
 80091b0:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d018      	beq.n	80091ea <uploadFirmwareToBT122+0x13a>
			ret = uart_rx_it(huart, msg_length, &bg_buffer[BGLIB_MSG_HEADER_LEN]);
 80091b8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80091bc:	4a67      	ldr	r2, [pc, #412]	; (800935c <uploadFirmwareToBT122+0x2ac>)
 80091be:	4619      	mov	r1, r3
 80091c0:	68b8      	ldr	r0, [r7, #8]
 80091c2:	f000 fc3d 	bl	8009a40 <uart_rx_it>
 80091c6:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
			if (ret < 0) {
 80091ca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	da0b      	bge.n	80091ea <uploadFirmwareToBT122+0x13a>
				//Error_Handler();
				fi.status = HAL_ERROR;
 80091d2:	2301      	movs	r3, #1
 80091d4:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
				return fi;
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	461d      	mov	r5, r3
 80091dc:	f107 0490 	add.w	r4, r7, #144	; 0x90
 80091e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80091e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80091e4:	6823      	ldr	r3, [r4, #0]
 80091e6:	602b      	str	r3, [r5, #0]
 80091e8:	e176      	b.n	80094d8 <uploadFirmwareToBT122+0x428>
			}
		}
		// To access the payload part of the message
		pck = BGLIB_MSG(bg_buffer);
 80091ea:	4b5a      	ldr	r3, [pc, #360]	; (8009354 <uploadFirmwareToBT122+0x2a4>)
 80091ec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

		// upload new firmware
		switch (BGLIB_MSG_ID(bg_buffer)) {
 80091f0:	4b58      	ldr	r3, [pc, #352]	; (8009354 <uploadFirmwareToBT122+0x2a4>)
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80091f8:	f023 0307 	bic.w	r3, r3, #7
 80091fc:	4a58      	ldr	r2, [pc, #352]	; (8009360 <uploadFirmwareToBT122+0x2b0>)
 80091fe:	4293      	cmp	r3, r2
 8009200:	f000 80fd 	beq.w	80093fe <uploadFirmwareToBT122+0x34e>
 8009204:	4a56      	ldr	r2, [pc, #344]	; (8009360 <uploadFirmwareToBT122+0x2b0>)
 8009206:	4293      	cmp	r3, r2
 8009208:	f200 814b 	bhi.w	80094a2 <uploadFirmwareToBT122+0x3f2>
 800920c:	4a55      	ldr	r2, [pc, #340]	; (8009364 <uploadFirmwareToBT122+0x2b4>)
 800920e:	4293      	cmp	r3, r2
 8009210:	d068      	beq.n	80092e4 <uploadFirmwareToBT122+0x234>
 8009212:	4a54      	ldr	r2, [pc, #336]	; (8009364 <uploadFirmwareToBT122+0x2b4>)
 8009214:	4293      	cmp	r3, r2
 8009216:	f200 8144 	bhi.w	80094a2 <uploadFirmwareToBT122+0x3f2>
 800921a:	4a53      	ldr	r2, [pc, #332]	; (8009368 <uploadFirmwareToBT122+0x2b8>)
 800921c:	4293      	cmp	r3, r2
 800921e:	d045      	beq.n	80092ac <uploadFirmwareToBT122+0x1fc>
 8009220:	4a51      	ldr	r2, [pc, #324]	; (8009368 <uploadFirmwareToBT122+0x2b8>)
 8009222:	4293      	cmp	r3, r2
 8009224:	f200 813d 	bhi.w	80094a2 <uploadFirmwareToBT122+0x3f2>
 8009228:	2ba0      	cmp	r3, #160	; 0xa0
 800922a:	d004      	beq.n	8009236 <uploadFirmwareToBT122+0x186>
 800922c:	4a4f      	ldr	r2, [pc, #316]	; (800936c <uploadFirmwareToBT122+0x2bc>)
 800922e:	4293      	cmp	r3, r2
 8009230:	f000 8112 	beq.w	8009458 <uploadFirmwareToBT122+0x3a8>
 8009234:	e135      	b.n	80094a2 <uploadFirmwareToBT122+0x3f2>
		case dumo_evt_dfu_boot_id:
			// if we boot into dfu mode after writing all flash data, then that means something was wrong with firmware image
			if (firmwareBytesWritten == firmwareSize) {
 8009236:	683b      	ldr	r3, [r7, #0]
 8009238:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800923c:	429a      	cmp	r2, r3
 800923e:	d11c      	bne.n	800927a <uploadFirmwareToBT122+0x1ca>
				printf("Error: problem with firmware image.. failed to boot with new firmware.\n");
 8009240:	484b      	ldr	r0, [pc, #300]	; (8009370 <uploadFirmwareToBT122+0x2c0>)
 8009242:	f001 f8f5 	bl	800a430 <puts>
				dumo_cmd_dfu_reset(0);
 8009246:	4b41      	ldr	r3, [pc, #260]	; (800934c <uploadFirmwareToBT122+0x29c>)
 8009248:	2200      	movs	r2, #0
 800924a:	711a      	strb	r2, [r3, #4]
 800924c:	4b3f      	ldr	r3, [pc, #252]	; (800934c <uploadFirmwareToBT122+0x29c>)
 800924e:	f44f 7290 	mov.w	r2, #288	; 0x120
 8009252:	601a      	str	r2, [r3, #0]
 8009254:	4b3e      	ldr	r3, [pc, #248]	; (8009350 <uploadFirmwareToBT122+0x2a0>)
 8009256:	681c      	ldr	r4, [r3, #0]
 8009258:	2300      	movs	r3, #0
 800925a:	2200      	movs	r2, #0
 800925c:	493b      	ldr	r1, [pc, #236]	; (800934c <uploadFirmwareToBT122+0x29c>)
 800925e:	2005      	movs	r0, #5
 8009260:	47a0      	blx	r4
				fi.status = HAL_ERROR;
 8009262:	2301      	movs	r3, #1
 8009264:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
				return fi;
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	461d      	mov	r5, r3
 800926c:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8009270:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009272:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009274:	6823      	ldr	r3, [r4, #0]
 8009276:	602b      	str	r3, [r5, #0]
 8009278:	e12e      	b.n	80094d8 <uploadFirmwareToBT122+0x428>
			}

			// This event is triggered when device is booted into DFU mode.
			fi.oldBootloaderVersion = pck->evt_dfu_boot.version;
 800927a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800927e:	685b      	ldr	r3, [r3, #4]
 8009280:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

			printf("Booted into DFU mode: version = %ld\n", fi.oldBootloaderVersion);
 8009284:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009288:	4619      	mov	r1, r3
 800928a:	483a      	ldr	r0, [pc, #232]	; (8009374 <uploadFirmwareToBT122+0x2c4>)
 800928c:	f001 f862 	bl	800a354 <iprintf>

			// After re-booting device into DFU mode, start flash upload process by defining starting address.
			// When uploading firmware + bootloader, value 0x00000000 should be used
			dumo_cmd_dfu_flash_set_address(0x00000000);
 8009290:	4b2e      	ldr	r3, [pc, #184]	; (800934c <uploadFirmwareToBT122+0x29c>)
 8009292:	2200      	movs	r2, #0
 8009294:	605a      	str	r2, [r3, #4]
 8009296:	4b2d      	ldr	r3, [pc, #180]	; (800934c <uploadFirmwareToBT122+0x29c>)
 8009298:	4a37      	ldr	r2, [pc, #220]	; (8009378 <uploadFirmwareToBT122+0x2c8>)
 800929a:	601a      	str	r2, [r3, #0]
 800929c:	4b2c      	ldr	r3, [pc, #176]	; (8009350 <uploadFirmwareToBT122+0x2a0>)
 800929e:	681c      	ldr	r4, [r3, #0]
 80092a0:	2300      	movs	r3, #0
 80092a2:	2200      	movs	r2, #0
 80092a4:	4929      	ldr	r1, [pc, #164]	; (800934c <uploadFirmwareToBT122+0x29c>)
 80092a6:	2008      	movs	r0, #8
 80092a8:	47a0      	blx	r4

			break;
 80092aa:	e105      	b.n	80094b8 <uploadFirmwareToBT122+0x408>
		case dumo_rsp_dfu_flash_set_address_id:
			// Used to define the starting address on the flash to where the new firmware will be written in.

			// Check result code (0: success, non-zero: error occurred)
			ret = pck->rsp_dfu_flash_set_address.result;
 80092ac:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80092b0:	889b      	ldrh	r3, [r3, #4]
 80092b2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			if (ret == 0) {
 80092b6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d103      	bne.n	80092c6 <uploadFirmwareToBT122+0x216>
				printf("dfu_flash_set_address: Success\n");
 80092be:	482f      	ldr	r0, [pc, #188]	; (800937c <uploadFirmwareToBT122+0x2cc>)
 80092c0:	f001 f8b6 	bl	800a430 <puts>
 80092c4:	e00e      	b.n	80092e4 <uploadFirmwareToBT122+0x234>
			} else {
				printf("dfu_flash_set_address: Error\n");
 80092c6:	482e      	ldr	r0, [pc, #184]	; (8009380 <uploadFirmwareToBT122+0x2d0>)
 80092c8:	f001 f8b2 	bl	800a430 <puts>
				fi.status = HAL_ERROR;
 80092cc:	2301      	movs	r3, #1
 80092ce:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
				return fi;
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	461d      	mov	r5, r3
 80092d6:	f107 0490 	add.w	r4, r7, #144	; 0x90
 80092da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80092dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80092de:	6823      	ldr	r3, [r4, #0]
 80092e0:	602b      	str	r3, [r5, #0]
 80092e2:	e0f9      	b.n	80094d8 <uploadFirmwareToBT122+0x428>

			// Fall-through to next case if dfu_flash_set_address was successful.

		case dumo_rsp_dfu_flash_upload_id:
			// check result code of previous flash upload (if not a fall-through)
			if (BGLIB_MSG_ID(bg_buffer) == dumo_rsp_dfu_flash_upload_id) {
 80092e4:	4b1b      	ldr	r3, [pc, #108]	; (8009354 <uploadFirmwareToBT122+0x2a4>)
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80092ec:	f023 0307 	bic.w	r3, r3, #7
 80092f0:	4a1c      	ldr	r2, [pc, #112]	; (8009364 <uploadFirmwareToBT122+0x2b4>)
 80092f2:	4293      	cmp	r3, r2
 80092f4:	d119      	bne.n	800932a <uploadFirmwareToBT122+0x27a>
				ret = pck->rsp_dfu_flash_upload.result;
 80092f6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80092fa:	889b      	ldrh	r3, [r3, #4]
 80092fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
				if (ret == 0) {
 8009300:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009304:	2b00      	cmp	r3, #0
 8009306:	d010      	beq.n	800932a <uploadFirmwareToBT122+0x27a>
					//printf("dfu_flash_upload %d: Success\n", firmware_bytes_written);
				} else {
					printf("dfu_flash_upload %d: Error\n", firmwareBytesWritten);
 8009308:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 800930c:	481d      	ldr	r0, [pc, #116]	; (8009384 <uploadFirmwareToBT122+0x2d4>)
 800930e:	f001 f821 	bl	800a354 <iprintf>
					fi.status = HAL_ERROR;
 8009312:	2301      	movs	r3, #1
 8009314:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
					return fi;
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	461d      	mov	r5, r3
 800931c:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8009320:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009322:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009324:	6823      	ldr	r3, [r4, #0]
 8009326:	602b      	str	r3, [r5, #0]
 8009328:	e0d6      	b.n	80094d8 <uploadFirmwareToBT122+0x428>
				}
			}

			// check how much firmware has been written to BT122
			if (firmwareBytesWritten == firmwareSize) {
 800932a:	683b      	ldr	r3, [r7, #0]
 800932c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009330:	429a      	cmp	r2, r3
 8009332:	d129      	bne.n	8009388 <uploadFirmwareToBT122+0x2d8>
				// if we have written all firmware bytes, go to flash_upload_finish
				dumo_cmd_dfu_flash_upload_finish();
 8009334:	4b05      	ldr	r3, [pc, #20]	; (800934c <uploadFirmwareToBT122+0x29c>)
 8009336:	4a0a      	ldr	r2, [pc, #40]	; (8009360 <uploadFirmwareToBT122+0x2b0>)
 8009338:	601a      	str	r2, [r3, #0]
 800933a:	4b05      	ldr	r3, [pc, #20]	; (8009350 <uploadFirmwareToBT122+0x2a0>)
 800933c:	681c      	ldr	r4, [r3, #0]
 800933e:	2300      	movs	r3, #0
 8009340:	2200      	movs	r2, #0
 8009342:	4902      	ldr	r1, [pc, #8]	; (800934c <uploadFirmwareToBT122+0x29c>)
 8009344:	2004      	movs	r0, #4
 8009346:	47a0      	blx	r4
 8009348:	e0b6      	b.n	80094b8 <uploadFirmwareToBT122+0x408>
 800934a:	bf00      	nop
 800934c:	200000a4 	.word	0x200000a4
 8009350:	200000c0 	.word	0x200000c0
 8009354:	2000023c 	.word	0x2000023c
 8009358:	2000023d 	.word	0x2000023d
 800935c:	20000240 	.word	0x20000240
 8009360:	03000020 	.word	0x03000020
 8009364:	02000020 	.word	0x02000020
 8009368:	01000020 	.word	0x01000020
 800936c:	000100a0 	.word	0x000100a0
 8009370:	0800c024 	.word	0x0800c024
 8009374:	0800c06c 	.word	0x0800c06c
 8009378:	01000420 	.word	0x01000420
 800937c:	0800c094 	.word	0x0800c094
 8009380:	0800c0b4 	.word	0x0800c0b4
 8009384:	0800c0d4 	.word	0x0800c0d4
			} else {
				// else keep writing firmware data to BT122
				// upload 128 bytes at a time
				char firmwareChunk[128];
				memcpy(firmwareChunk, (void *) flashAddress + firmwareBytesWritten, 128);
 8009388:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	4413      	add	r3, r2
 8009390:	461a      	mov	r2, r3
 8009392:	f107 0310 	add.w	r3, r7, #16
 8009396:	4611      	mov	r1, r2
 8009398:	2280      	movs	r2, #128	; 0x80
 800939a:	4618      	mov	r0, r3
 800939c:	f001 f9b2 	bl	800a704 <memcpy>

				dumo_cmd_dfu_flash_upload(128, firmwareChunk);
 80093a0:	4b4f      	ldr	r3, [pc, #316]	; (80094e0 <uploadFirmwareToBT122+0x430>)
 80093a2:	2280      	movs	r2, #128	; 0x80
 80093a4:	711a      	strb	r2, [r3, #4]
 80093a6:	4b4e      	ldr	r3, [pc, #312]	; (80094e0 <uploadFirmwareToBT122+0x430>)
 80093a8:	791b      	ldrb	r3, [r3, #4]
 80093aa:	3301      	adds	r3, #1
 80093ac:	0a1a      	lsrs	r2, r3, #8
 80093ae:	4b4c      	ldr	r3, [pc, #304]	; (80094e0 <uploadFirmwareToBT122+0x430>)
 80093b0:	791b      	ldrb	r3, [r3, #4]
 80093b2:	3301      	adds	r3, #1
 80093b4:	021b      	lsls	r3, r3, #8
 80093b6:	b29b      	uxth	r3, r3
 80093b8:	4313      	orrs	r3, r2
 80093ba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80093be:	f043 0320 	orr.w	r3, r3, #32
 80093c2:	4a47      	ldr	r2, [pc, #284]	; (80094e0 <uploadFirmwareToBT122+0x430>)
 80093c4:	6013      	str	r3, [r2, #0]
 80093c6:	4b47      	ldr	r3, [pc, #284]	; (80094e4 <uploadFirmwareToBT122+0x434>)
 80093c8:	681c      	ldr	r4, [r3, #0]
 80093ca:	4b45      	ldr	r3, [pc, #276]	; (80094e0 <uploadFirmwareToBT122+0x430>)
 80093cc:	791b      	ldrb	r3, [r3, #4]
 80093ce:	b29a      	uxth	r2, r3
 80093d0:	f107 0310 	add.w	r3, r7, #16
 80093d4:	4942      	ldr	r1, [pc, #264]	; (80094e0 <uploadFirmwareToBT122+0x430>)
 80093d6:	2005      	movs	r0, #5
 80093d8:	47a0      	blx	r4
				firmwareBytesWritten += 128;
 80093da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80093de:	3380      	adds	r3, #128	; 0x80
 80093e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

				// Print updates on progress
				if (firmwareBytesWritten % 8192 == 0) {
 80093e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80093e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d163      	bne.n	80094b8 <uploadFirmwareToBT122+0x408>
					printf("Written %d / %ld bytes.\n", firmwareBytesWritten, firmwareSize);
 80093f0:	683a      	ldr	r2, [r7, #0]
 80093f2:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 80093f6:	483c      	ldr	r0, [pc, #240]	; (80094e8 <uploadFirmwareToBT122+0x438>)
 80093f8:	f000 ffac 	bl	800a354 <iprintf>
				}
			}

			break;
 80093fc:	e05c      	b.n	80094b8 <uploadFirmwareToBT122+0x408>
		case dumo_rsp_dfu_flash_upload_finish_id:
			//Command used to tell to the device that the DFU file has been fully uploaded successfully.

			// check result code of dfu_flash_upload_finish
			ret = pck->rsp_dfu_flash_upload_finish.result;
 80093fe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009402:	889b      	ldrh	r3, [r3, #4]
 8009404:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			if (ret == 0) {
 8009408:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800940c:	2b00      	cmp	r3, #0
 800940e:	d114      	bne.n	800943a <uploadFirmwareToBT122+0x38a>
				printf("dfu_flash_upload_finish: Success\n");
 8009410:	4836      	ldr	r0, [pc, #216]	; (80094ec <uploadFirmwareToBT122+0x43c>)
 8009412:	f001 f80d 	bl	800a430 <puts>
				fi.status = HAL_ERROR;
				return fi;
			}

			// Command used to reset the system to normal mode.
			printf("\r\nFirmware upload - OK -> Rebooting . . .\n");
 8009416:	4836      	ldr	r0, [pc, #216]	; (80094f0 <uploadFirmwareToBT122+0x440>)
 8009418:	f001 f80a 	bl	800a430 <puts>
			dumo_cmd_dfu_reset(0);
 800941c:	4b30      	ldr	r3, [pc, #192]	; (80094e0 <uploadFirmwareToBT122+0x430>)
 800941e:	2200      	movs	r2, #0
 8009420:	711a      	strb	r2, [r3, #4]
 8009422:	4b2f      	ldr	r3, [pc, #188]	; (80094e0 <uploadFirmwareToBT122+0x430>)
 8009424:	f44f 7290 	mov.w	r2, #288	; 0x120
 8009428:	601a      	str	r2, [r3, #0]
 800942a:	4b2e      	ldr	r3, [pc, #184]	; (80094e4 <uploadFirmwareToBT122+0x434>)
 800942c:	681c      	ldr	r4, [r3, #0]
 800942e:	2300      	movs	r3, #0
 8009430:	2200      	movs	r2, #0
 8009432:	492b      	ldr	r1, [pc, #172]	; (80094e0 <uploadFirmwareToBT122+0x430>)
 8009434:	2005      	movs	r0, #5
 8009436:	47a0      	blx	r4

			break;
 8009438:	e03e      	b.n	80094b8 <uploadFirmwareToBT122+0x408>
				printf("dfu_flash_upload_finish: Error\n");
 800943a:	482e      	ldr	r0, [pc, #184]	; (80094f4 <uploadFirmwareToBT122+0x444>)
 800943c:	f000 fff8 	bl	800a430 <puts>
				fi.status = HAL_ERROR;
 8009440:	2301      	movs	r3, #1
 8009442:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
				return fi;
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	461d      	mov	r5, r3
 800944a:	f107 0490 	add.w	r4, r7, #144	; 0x90
 800944e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009450:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009452:	6823      	ldr	r3, [r4, #0]
 8009454:	602b      	str	r3, [r5, #0]
 8009456:	e03f      	b.n	80094d8 <uploadFirmwareToBT122+0x428>
		case dumo_evt_system_boot_id:
			// This event is triggered when device boots into normal mode
			fi.major = pck->evt_system_boot.major;
 8009458:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800945c:	889b      	ldrh	r3, [r3, #4]
 800945e:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
			fi.minor = pck->evt_system_boot.minor;
 8009462:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009466:	88db      	ldrh	r3, [r3, #6]
 8009468:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
			fi.patch = pck->evt_system_boot.patch;
 800946c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009470:	891b      	ldrh	r3, [r3, #8]
 8009472:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
			fi.build = pck->evt_system_boot.build;
 8009476:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800947a:	895b      	ldrh	r3, [r3, #10]
 800947c:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
			fi.newBootloaderVersion = pck->evt_system_boot.bootloader;
 8009480:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009484:	899b      	ldrh	r3, [r3, #12]
 8009486:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
			fi.hardwareType = pck->evt_system_boot.hw;
 800948a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800948e:	89db      	ldrh	r3, [r3, #14]
 8009490:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2

			fi.status = HAL_OK;
 8009494:	2300      	movs	r3, #0
 8009496:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90

			// Sets firmware_flag to 0 after successful firmware upload to come out of infinite loop.
			firmwareFlag = 0;
 800949a:	2300      	movs	r3, #0
 800949c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

			break;
 80094a0:	e00a      	b.n	80094b8 <uploadFirmwareToBT122+0x408>
		default:
			printf("BGAPI response does match an expected rsp/evt.  unknown ID = %ld\n", BGLIB_MSG_ID(bg_buffer));
 80094a2:	4b15      	ldr	r3, [pc, #84]	; (80094f8 <uploadFirmwareToBT122+0x448>)
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80094aa:	f023 0307 	bic.w	r3, r3, #7
 80094ae:	4619      	mov	r1, r3
 80094b0:	4812      	ldr	r0, [pc, #72]	; (80094fc <uploadFirmwareToBT122+0x44c>)
 80094b2:	f000 ff4f 	bl	800a354 <iprintf>
			break;
 80094b6:	bf00      	nop
	while (firmwareFlag) {
 80094b8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80094bc:	2b00      	cmp	r3, #0
 80094be:	f47f ae2b 	bne.w	8009118 <uploadFirmwareToBT122+0x68>
		}
	}

	printf("BT122 firmware upgrade procedure complete.\n");
 80094c2:	480f      	ldr	r0, [pc, #60]	; (8009500 <uploadFirmwareToBT122+0x450>)
 80094c4:	f000 ffb4 	bl	800a430 <puts>

	return fi;
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	461d      	mov	r5, r3
 80094cc:	f107 0490 	add.w	r4, r7, #144	; 0x90
 80094d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80094d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80094d4:	6823      	ldr	r3, [r4, #0]
 80094d6:	602b      	str	r3, [r5, #0]
}
 80094d8:	68f8      	ldr	r0, [r7, #12]
 80094da:	37b8      	adds	r7, #184	; 0xb8
 80094dc:	46bd      	mov	sp, r7
 80094de:	bdb0      	pop	{r4, r5, r7, pc}
 80094e0:	200000a4 	.word	0x200000a4
 80094e4:	200000c0 	.word	0x200000c0
 80094e8:	0800c0f0 	.word	0x0800c0f0
 80094ec:	0800c10c 	.word	0x0800c10c
 80094f0:	0800c150 	.word	0x0800c150
 80094f4:	0800c130 	.word	0x0800c130
 80094f8:	2000023c 	.word	0x2000023c
 80094fc:	0800c17c 	.word	0x0800c17c
 8009500:	0800c1c0 	.word	0x0800c1c0

08009504 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8009504:	b480      	push	{r7}
 8009506:	b083      	sub	sp, #12
 8009508:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800950a:	4b0a      	ldr	r3, [pc, #40]	; (8009534 <HAL_MspInit+0x30>)
 800950c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009510:	4a08      	ldr	r2, [pc, #32]	; (8009534 <HAL_MspInit+0x30>)
 8009512:	f043 0304 	orr.w	r3, r3, #4
 8009516:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800951a:	4b06      	ldr	r3, [pc, #24]	; (8009534 <HAL_MspInit+0x30>)
 800951c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009520:	f003 0304 	and.w	r3, r3, #4
 8009524:	607b      	str	r3, [r7, #4]
 8009526:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8009528:	bf00      	nop
 800952a:	370c      	adds	r7, #12
 800952c:	46bd      	mov	sp, r7
 800952e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009532:	4770      	bx	lr
 8009534:	46020c00 	.word	0x46020c00

08009538 <HAL_HASH_MspInit>:
* This function configures the hardware resources used in this example
* @param hhash: HASH handle pointer
* @retval None
*/
void HAL_HASH_MspInit(HASH_HandleTypeDef* hhash)
{
 8009538:	b480      	push	{r7}
 800953a:	b085      	sub	sp, #20
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HASH_MspInit 0 */

  /* USER CODE END HASH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_HASH_CLK_ENABLE();
 8009540:	4b0a      	ldr	r3, [pc, #40]	; (800956c <HAL_HASH_MspInit+0x34>)
 8009542:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009546:	4a09      	ldr	r2, [pc, #36]	; (800956c <HAL_HASH_MspInit+0x34>)
 8009548:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800954c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8009550:	4b06      	ldr	r3, [pc, #24]	; (800956c <HAL_HASH_MspInit+0x34>)
 8009552:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009556:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800955a:	60fb      	str	r3, [r7, #12]
 800955c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN HASH_MspInit 1 */

  /* USER CODE END HASH_MspInit 1 */

}
 800955e:	bf00      	nop
 8009560:	3714      	adds	r7, #20
 8009562:	46bd      	mov	sp, r7
 8009564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009568:	4770      	bx	lr
 800956a:	bf00      	nop
 800956c:	46020c00 	.word	0x46020c00

08009570 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8009570:	b580      	push	{r7, lr}
 8009572:	b0c2      	sub	sp, #264	; 0x108
 8009574:	af00      	add	r7, sp, #0
 8009576:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800957a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800957e:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009580:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8009584:	2200      	movs	r2, #0
 8009586:	601a      	str	r2, [r3, #0]
 8009588:	605a      	str	r2, [r3, #4]
 800958a:	609a      	str	r2, [r3, #8]
 800958c:	60da      	str	r2, [r3, #12]
 800958e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8009590:	f107 0318 	add.w	r3, r7, #24
 8009594:	22d8      	movs	r2, #216	; 0xd8
 8009596:	2100      	movs	r1, #0
 8009598:	4618      	mov	r0, r3
 800959a:	f001 f829 	bl	800a5f0 <memset>
  if(huart->Instance==USART1)
 800959e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	4a5a      	ldr	r2, [pc, #360]	; (8009714 <HAL_UART_MspInit+0x1a4>)
 80095ac:	4293      	cmp	r3, r2
 80095ae:	d14e      	bne.n	800964e <HAL_UART_MspInit+0xde>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80095b0:	f04f 0201 	mov.w	r2, #1
 80095b4:	f04f 0300 	mov.w	r3, #0
 80095b8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80095bc:	2300      	movs	r3, #0
 80095be:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80095c0:	f107 0318 	add.w	r3, r7, #24
 80095c4:	4618      	mov	r0, r3
 80095c6:	f7f9 ff73 	bl	80034b0 <HAL_RCCEx_PeriphCLKConfig>
 80095ca:	4603      	mov	r3, r0
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d001      	beq.n	80095d4 <HAL_UART_MspInit+0x64>
    {
      Error_Handler();
 80095d0:	f7ff fbe8 	bl	8008da4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80095d4:	4b50      	ldr	r3, [pc, #320]	; (8009718 <HAL_UART_MspInit+0x1a8>)
 80095d6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80095da:	4a4f      	ldr	r2, [pc, #316]	; (8009718 <HAL_UART_MspInit+0x1a8>)
 80095dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80095e0:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 80095e4:	4b4c      	ldr	r3, [pc, #304]	; (8009718 <HAL_UART_MspInit+0x1a8>)
 80095e6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80095ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80095ee:	617b      	str	r3, [r7, #20]
 80095f0:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80095f2:	4b49      	ldr	r3, [pc, #292]	; (8009718 <HAL_UART_MspInit+0x1a8>)
 80095f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80095f8:	4a47      	ldr	r2, [pc, #284]	; (8009718 <HAL_UART_MspInit+0x1a8>)
 80095fa:	f043 0301 	orr.w	r3, r3, #1
 80095fe:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8009602:	4b45      	ldr	r3, [pc, #276]	; (8009718 <HAL_UART_MspInit+0x1a8>)
 8009604:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009608:	f003 0301 	and.w	r3, r3, #1
 800960c:	613b      	str	r3, [r7, #16]
 800960e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = T_VCP_TX_Pin|T_VCP_RX_Pin;
 8009610:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8009614:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009618:	2302      	movs	r3, #2
 800961a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800961e:	2300      	movs	r3, #0
 8009620:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009624:	2300      	movs	r3, #0
 8009626:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800962a:	2307      	movs	r3, #7
 800962c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009630:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8009634:	4619      	mov	r1, r3
 8009636:	4839      	ldr	r0, [pc, #228]	; (800971c <HAL_UART_MspInit+0x1ac>)
 8009638:	f7f7 fd44 	bl	80010c4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800963c:	2200      	movs	r2, #0
 800963e:	2100      	movs	r1, #0
 8009640:	203d      	movs	r0, #61	; 0x3d
 8009642:	f7f7 f94e 	bl	80008e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8009646:	203d      	movs	r0, #61	; 0x3d
 8009648:	f7f7 f965 	bl	8000916 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800964c:	e05d      	b.n	800970a <HAL_UART_MspInit+0x19a>
  else if(huart->Instance==USART2)
 800964e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009652:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	4a31      	ldr	r2, [pc, #196]	; (8009720 <HAL_UART_MspInit+0x1b0>)
 800965c:	4293      	cmp	r3, r2
 800965e:	d154      	bne.n	800970a <HAL_UART_MspInit+0x19a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8009660:	f04f 0202 	mov.w	r2, #2
 8009664:	f04f 0300 	mov.w	r3, #0
 8009668:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800966c:	2300      	movs	r3, #0
 800966e:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8009670:	f107 0318 	add.w	r3, r7, #24
 8009674:	4618      	mov	r0, r3
 8009676:	f7f9 ff1b 	bl	80034b0 <HAL_RCCEx_PeriphCLKConfig>
 800967a:	4603      	mov	r3, r0
 800967c:	2b00      	cmp	r3, #0
 800967e:	d001      	beq.n	8009684 <HAL_UART_MspInit+0x114>
      Error_Handler();
 8009680:	f7ff fb90 	bl	8008da4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8009684:	4b24      	ldr	r3, [pc, #144]	; (8009718 <HAL_UART_MspInit+0x1a8>)
 8009686:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800968a:	4a23      	ldr	r2, [pc, #140]	; (8009718 <HAL_UART_MspInit+0x1a8>)
 800968c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009690:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8009694:	4b20      	ldr	r3, [pc, #128]	; (8009718 <HAL_UART_MspInit+0x1a8>)
 8009696:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800969a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800969e:	60fb      	str	r3, [r7, #12]
 80096a0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80096a2:	4b1d      	ldr	r3, [pc, #116]	; (8009718 <HAL_UART_MspInit+0x1a8>)
 80096a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80096a8:	4a1b      	ldr	r2, [pc, #108]	; (8009718 <HAL_UART_MspInit+0x1a8>)
 80096aa:	f043 0308 	orr.w	r3, r3, #8
 80096ae:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80096b2:	4b19      	ldr	r3, [pc, #100]	; (8009718 <HAL_UART_MspInit+0x1a8>)
 80096b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80096b8:	f003 0208 	and.w	r2, r3, #8
 80096bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80096c0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80096c4:	601a      	str	r2, [r3, #0]
 80096c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80096ca:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80096ce:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80096d0:	2378      	movs	r3, #120	; 0x78
 80096d2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80096d6:	2302      	movs	r3, #2
 80096d8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80096dc:	2300      	movs	r3, #0
 80096de:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80096e2:	2300      	movs	r3, #0
 80096e4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80096e8:	2307      	movs	r3, #7
 80096ea:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80096ee:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80096f2:	4619      	mov	r1, r3
 80096f4:	480b      	ldr	r0, [pc, #44]	; (8009724 <HAL_UART_MspInit+0x1b4>)
 80096f6:	f7f7 fce5 	bl	80010c4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80096fa:	2200      	movs	r2, #0
 80096fc:	2100      	movs	r1, #0
 80096fe:	203e      	movs	r0, #62	; 0x3e
 8009700:	f7f7 f8ef 	bl	80008e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8009704:	203e      	movs	r0, #62	; 0x3e
 8009706:	f7f7 f906 	bl	8000916 <HAL_NVIC_EnableIRQ>
}
 800970a:	bf00      	nop
 800970c:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8009710:	46bd      	mov	sp, r7
 8009712:	bd80      	pop	{r7, pc}
 8009714:	40013800 	.word	0x40013800
 8009718:	46020c00 	.word	0x46020c00
 800971c:	42020000 	.word	0x42020000
 8009720:	40004400 	.word	0x40004400
 8009724:	42020c00 	.word	0x42020c00

08009728 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8009728:	b480      	push	{r7}
 800972a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800972c:	e7fe      	b.n	800972c <NMI_Handler+0x4>

0800972e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800972e:	b480      	push	{r7}
 8009730:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8009732:	e7fe      	b.n	8009732 <HardFault_Handler+0x4>

08009734 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8009734:	b480      	push	{r7}
 8009736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8009738:	e7fe      	b.n	8009738 <MemManage_Handler+0x4>

0800973a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800973a:	b480      	push	{r7}
 800973c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800973e:	e7fe      	b.n	800973e <BusFault_Handler+0x4>

08009740 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8009740:	b480      	push	{r7}
 8009742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8009744:	e7fe      	b.n	8009744 <UsageFault_Handler+0x4>

08009746 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8009746:	b480      	push	{r7}
 8009748:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800974a:	bf00      	nop
 800974c:	46bd      	mov	sp, r7
 800974e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009752:	4770      	bx	lr

08009754 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8009754:	b480      	push	{r7}
 8009756:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8009758:	bf00      	nop
 800975a:	46bd      	mov	sp, r7
 800975c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009760:	4770      	bx	lr

08009762 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8009762:	b480      	push	{r7}
 8009764:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8009766:	bf00      	nop
 8009768:	46bd      	mov	sp, r7
 800976a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976e:	4770      	bx	lr

08009770 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8009770:	b580      	push	{r7, lr}
 8009772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8009774:	f7f6 ff80 	bl	8000678 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8009778:	bf00      	nop
 800977a:	bd80      	pop	{r7, pc}

0800977c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800977c:	b580      	push	{r7, lr}
 800977e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8009780:	4802      	ldr	r0, [pc, #8]	; (800978c <USART1_IRQHandler+0x10>)
 8009782:	f7fc ff47 	bl	8006614 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8009786:	bf00      	nop
 8009788:	bd80      	pop	{r7, pc}
 800978a:	bf00      	nop
 800978c:	2000010c 	.word	0x2000010c

08009790 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8009790:	b580      	push	{r7, lr}
 8009792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8009794:	4802      	ldr	r0, [pc, #8]	; (80097a0 <USART2_IRQHandler+0x10>)
 8009796:	f7fc ff3d 	bl	8006614 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800979a:	bf00      	nop
 800979c:	bd80      	pop	{r7, pc}
 800979e:	bf00      	nop
 80097a0:	200001a0 	.word	0x200001a0

080097a4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80097a4:	b580      	push	{r7, lr}
 80097a6:	b086      	sub	sp, #24
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	60f8      	str	r0, [r7, #12]
 80097ac:	60b9      	str	r1, [r7, #8]
 80097ae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80097b0:	2300      	movs	r3, #0
 80097b2:	617b      	str	r3, [r7, #20]
 80097b4:	e00a      	b.n	80097cc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80097b6:	f3af 8000 	nop.w
 80097ba:	4601      	mov	r1, r0
 80097bc:	68bb      	ldr	r3, [r7, #8]
 80097be:	1c5a      	adds	r2, r3, #1
 80097c0:	60ba      	str	r2, [r7, #8]
 80097c2:	b2ca      	uxtb	r2, r1
 80097c4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80097c6:	697b      	ldr	r3, [r7, #20]
 80097c8:	3301      	adds	r3, #1
 80097ca:	617b      	str	r3, [r7, #20]
 80097cc:	697a      	ldr	r2, [r7, #20]
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	429a      	cmp	r2, r3
 80097d2:	dbf0      	blt.n	80097b6 <_read+0x12>
  }

  return len;
 80097d4:	687b      	ldr	r3, [r7, #4]
}
 80097d6:	4618      	mov	r0, r3
 80097d8:	3718      	adds	r7, #24
 80097da:	46bd      	mov	sp, r7
 80097dc:	bd80      	pop	{r7, pc}

080097de <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80097de:	b580      	push	{r7, lr}
 80097e0:	b086      	sub	sp, #24
 80097e2:	af00      	add	r7, sp, #0
 80097e4:	60f8      	str	r0, [r7, #12]
 80097e6:	60b9      	str	r1, [r7, #8]
 80097e8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80097ea:	2300      	movs	r3, #0
 80097ec:	617b      	str	r3, [r7, #20]
 80097ee:	e009      	b.n	8009804 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80097f0:	68bb      	ldr	r3, [r7, #8]
 80097f2:	1c5a      	adds	r2, r3, #1
 80097f4:	60ba      	str	r2, [r7, #8]
 80097f6:	781b      	ldrb	r3, [r3, #0]
 80097f8:	4618      	mov	r0, r3
 80097fa:	f7fe ff6f 	bl	80086dc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80097fe:	697b      	ldr	r3, [r7, #20]
 8009800:	3301      	adds	r3, #1
 8009802:	617b      	str	r3, [r7, #20]
 8009804:	697a      	ldr	r2, [r7, #20]
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	429a      	cmp	r2, r3
 800980a:	dbf1      	blt.n	80097f0 <_write+0x12>
  }
  return len;
 800980c:	687b      	ldr	r3, [r7, #4]
}
 800980e:	4618      	mov	r0, r3
 8009810:	3718      	adds	r7, #24
 8009812:	46bd      	mov	sp, r7
 8009814:	bd80      	pop	{r7, pc}

08009816 <_close>:

int _close(int file)
{
 8009816:	b480      	push	{r7}
 8009818:	b083      	sub	sp, #12
 800981a:	af00      	add	r7, sp, #0
 800981c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800981e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009822:	4618      	mov	r0, r3
 8009824:	370c      	adds	r7, #12
 8009826:	46bd      	mov	sp, r7
 8009828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982c:	4770      	bx	lr

0800982e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800982e:	b480      	push	{r7}
 8009830:	b083      	sub	sp, #12
 8009832:	af00      	add	r7, sp, #0
 8009834:	6078      	str	r0, [r7, #4]
 8009836:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8009838:	683b      	ldr	r3, [r7, #0]
 800983a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800983e:	605a      	str	r2, [r3, #4]
  return 0;
 8009840:	2300      	movs	r3, #0
}
 8009842:	4618      	mov	r0, r3
 8009844:	370c      	adds	r7, #12
 8009846:	46bd      	mov	sp, r7
 8009848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984c:	4770      	bx	lr

0800984e <_isatty>:

int _isatty(int file)
{
 800984e:	b480      	push	{r7}
 8009850:	b083      	sub	sp, #12
 8009852:	af00      	add	r7, sp, #0
 8009854:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8009856:	2301      	movs	r3, #1
}
 8009858:	4618      	mov	r0, r3
 800985a:	370c      	adds	r7, #12
 800985c:	46bd      	mov	sp, r7
 800985e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009862:	4770      	bx	lr

08009864 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8009864:	b480      	push	{r7}
 8009866:	b085      	sub	sp, #20
 8009868:	af00      	add	r7, sp, #0
 800986a:	60f8      	str	r0, [r7, #12]
 800986c:	60b9      	str	r1, [r7, #8]
 800986e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8009870:	2300      	movs	r3, #0
}
 8009872:	4618      	mov	r0, r3
 8009874:	3714      	adds	r7, #20
 8009876:	46bd      	mov	sp, r7
 8009878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987c:	4770      	bx	lr
	...

08009880 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8009880:	b580      	push	{r7, lr}
 8009882:	b086      	sub	sp, #24
 8009884:	af00      	add	r7, sp, #0
 8009886:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8009888:	4a14      	ldr	r2, [pc, #80]	; (80098dc <_sbrk+0x5c>)
 800988a:	4b15      	ldr	r3, [pc, #84]	; (80098e0 <_sbrk+0x60>)
 800988c:	1ad3      	subs	r3, r2, r3
 800988e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8009890:	697b      	ldr	r3, [r7, #20]
 8009892:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8009894:	4b13      	ldr	r3, [pc, #76]	; (80098e4 <_sbrk+0x64>)
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	2b00      	cmp	r3, #0
 800989a:	d102      	bne.n	80098a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800989c:	4b11      	ldr	r3, [pc, #68]	; (80098e4 <_sbrk+0x64>)
 800989e:	4a12      	ldr	r2, [pc, #72]	; (80098e8 <_sbrk+0x68>)
 80098a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80098a2:	4b10      	ldr	r3, [pc, #64]	; (80098e4 <_sbrk+0x64>)
 80098a4:	681a      	ldr	r2, [r3, #0]
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	4413      	add	r3, r2
 80098aa:	693a      	ldr	r2, [r7, #16]
 80098ac:	429a      	cmp	r2, r3
 80098ae:	d207      	bcs.n	80098c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80098b0:	f000 fefc 	bl	800a6ac <__errno>
 80098b4:	4603      	mov	r3, r0
 80098b6:	220c      	movs	r2, #12
 80098b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80098ba:	f04f 33ff 	mov.w	r3, #4294967295
 80098be:	e009      	b.n	80098d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80098c0:	4b08      	ldr	r3, [pc, #32]	; (80098e4 <_sbrk+0x64>)
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80098c6:	4b07      	ldr	r3, [pc, #28]	; (80098e4 <_sbrk+0x64>)
 80098c8:	681a      	ldr	r2, [r3, #0]
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	4413      	add	r3, r2
 80098ce:	4a05      	ldr	r2, [pc, #20]	; (80098e4 <_sbrk+0x64>)
 80098d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80098d2:	68fb      	ldr	r3, [r7, #12]
}
 80098d4:	4618      	mov	r0, r3
 80098d6:	3718      	adds	r7, #24
 80098d8:	46bd      	mov	sp, r7
 80098da:	bd80      	pop	{r7, pc}
 80098dc:	20270000 	.word	0x20270000
 80098e0:	00000400 	.word	0x00000400
 80098e4:	20000a40 	.word	0x20000a40
 80098e8:	20006bd0 	.word	0x20006bd0

080098ec <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80098ec:	b480      	push	{r7}
 80098ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80098f0:	4b18      	ldr	r3, [pc, #96]	; (8009954 <SystemInit+0x68>)
 80098f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80098f6:	4a17      	ldr	r2, [pc, #92]	; (8009954 <SystemInit+0x68>)
 80098f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80098fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8009900:	4b15      	ldr	r3, [pc, #84]	; (8009958 <SystemInit+0x6c>)
 8009902:	2201      	movs	r2, #1
 8009904:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8009906:	4b14      	ldr	r3, [pc, #80]	; (8009958 <SystemInit+0x6c>)
 8009908:	2200      	movs	r2, #0
 800990a:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 800990c:	4b12      	ldr	r3, [pc, #72]	; (8009958 <SystemInit+0x6c>)
 800990e:	2200      	movs	r2, #0
 8009910:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8009912:	4b11      	ldr	r3, [pc, #68]	; (8009958 <SystemInit+0x6c>)
 8009914:	2200      	movs	r2, #0
 8009916:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8009918:	4b0f      	ldr	r3, [pc, #60]	; (8009958 <SystemInit+0x6c>)
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	4a0e      	ldr	r2, [pc, #56]	; (8009958 <SystemInit+0x6c>)
 800991e:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8009922:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8009926:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8009928:	4b0b      	ldr	r3, [pc, #44]	; (8009958 <SystemInit+0x6c>)
 800992a:	2200      	movs	r2, #0
 800992c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 800992e:	4b0a      	ldr	r3, [pc, #40]	; (8009958 <SystemInit+0x6c>)
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	4a09      	ldr	r2, [pc, #36]	; (8009958 <SystemInit+0x6c>)
 8009934:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009938:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 800993a:	4b07      	ldr	r3, [pc, #28]	; (8009958 <SystemInit+0x6c>)
 800993c:	2200      	movs	r2, #0
 800993e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8009940:	4b04      	ldr	r3, [pc, #16]	; (8009954 <SystemInit+0x68>)
 8009942:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8009946:	609a      	str	r2, [r3, #8]
  #endif
}
 8009948:	bf00      	nop
 800994a:	46bd      	mov	sp, r7
 800994c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009950:	4770      	bx	lr
 8009952:	bf00      	nop
 8009954:	e000ed00 	.word	0xe000ed00
 8009958:	46020c00 	.word	0x46020c00

0800995c <register_UART>:
UART_HandleTypeDef *UARTHandles[MAX_NUMBER_UART_HANDLES] = {NULL};
/**
 * Associates the huartNum with a UART_HandleTypeDef pointer.
 * This is mainly so that uart_rx and uart_rx_it can have the same function prototype.
 */
int register_UART(int huartNum, UART_HandleTypeDef *huart) {
 800995c:	b480      	push	{r7}
 800995e:	b083      	sub	sp, #12
 8009960:	af00      	add	r7, sp, #0
 8009962:	6078      	str	r0, [r7, #4]
 8009964:	6039      	str	r1, [r7, #0]
	if (huartNum >= MAX_NUMBER_UART_HANDLES || huartNum < 1) {
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	2b09      	cmp	r3, #9
 800996a:	dc02      	bgt.n	8009972 <register_UART+0x16>
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	2b00      	cmp	r3, #0
 8009970:	dc02      	bgt.n	8009978 <register_UART+0x1c>
		return -1;
 8009972:	f04f 33ff 	mov.w	r3, #4294967295
 8009976:	e005      	b.n	8009984 <register_UART+0x28>
	}
	UARTHandles[huartNum] = huart;
 8009978:	4905      	ldr	r1, [pc, #20]	; (8009990 <register_UART+0x34>)
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	683a      	ldr	r2, [r7, #0]
 800997e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	return huartNum;
 8009982:	687b      	ldr	r3, [r7, #4]
}
 8009984:	4618      	mov	r0, r3
 8009986:	370c      	adds	r7, #12
 8009988:	46bd      	mov	sp, r7
 800998a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998e:	4770      	bx	lr
 8009990:	20000a44 	.word	0x20000a44

08009994 <get_UART_num>:

/**
 * Checks if huart pointer is in the UARTHandles array, if so returns the number else returns -1.
 */
int get_UART_num(UART_HandleTypeDef *huart){
 8009994:	b480      	push	{r7}
 8009996:	b085      	sub	sp, #20
 8009998:	af00      	add	r7, sp, #0
 800999a:	6078      	str	r0, [r7, #4]
	// get huartNum
	int huartNum = -1;
 800999c:	f04f 33ff 	mov.w	r3, #4294967295
 80099a0:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < MAX_NUMBER_UART_HANDLES; i++) {
 80099a2:	2300      	movs	r3, #0
 80099a4:	60bb      	str	r3, [r7, #8]
 80099a6:	e00b      	b.n	80099c0 <get_UART_num+0x2c>
		if (UARTHandles[i] == huart) {
 80099a8:	4a0a      	ldr	r2, [pc, #40]	; (80099d4 <get_UART_num+0x40>)
 80099aa:	68bb      	ldr	r3, [r7, #8]
 80099ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80099b0:	687a      	ldr	r2, [r7, #4]
 80099b2:	429a      	cmp	r2, r3
 80099b4:	d101      	bne.n	80099ba <get_UART_num+0x26>
			huartNum = i;
 80099b6:	68bb      	ldr	r3, [r7, #8]
 80099b8:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < MAX_NUMBER_UART_HANDLES; i++) {
 80099ba:	68bb      	ldr	r3, [r7, #8]
 80099bc:	3301      	adds	r3, #1
 80099be:	60bb      	str	r3, [r7, #8]
 80099c0:	68bb      	ldr	r3, [r7, #8]
 80099c2:	2b09      	cmp	r3, #9
 80099c4:	ddf0      	ble.n	80099a8 <get_UART_num+0x14>
		}
	}
	return huartNum;
 80099c6:	68fb      	ldr	r3, [r7, #12]
}
 80099c8:	4618      	mov	r0, r3
 80099ca:	3714      	adds	r7, #20
 80099cc:	46bd      	mov	sp, r7
 80099ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d2:	4770      	bx	lr
 80099d4:	20000a44 	.word	0x20000a44

080099d8 <uart_tx>:
 * @param   dataLength The number of bytes that will be transmitted.
 * @param   data Pointer to the char array containing the data to be transmitted. Should be at least <dataLength>
 * 			bytes long, or else unspecified behavior will result.
 * @retval  The number of bytes transmitted.
 */
int uart_tx(UART_HandleTypeDef *huart, int dataLength, const char *data) {
 80099d8:	b580      	push	{r7, lr}
 80099da:	b086      	sub	sp, #24
 80099dc:	af00      	add	r7, sp, #0
 80099de:	60f8      	str	r0, [r7, #12]
 80099e0:	60b9      	str	r1, [r7, #8]
 80099e2:	607a      	str	r2, [r7, #4]
	/* Variable for storing function return values. */
	HAL_StatusTypeDef ret;
	/* The amount of bytes written. */
	uint16_t data_written;
	/* The amount of bytes still needed to be written. */
	uint16_t data_to_write = dataLength;
 80099e4:	68bb      	ldr	r3, [r7, #8]
 80099e6:	82fb      	strh	r3, [r7, #22]
  }

  printf("\r\n");
#endif

	while (data_to_write) {
 80099e8:	e020      	b.n	8009a2c <uart_tx+0x54>
		//ret = WriteFile(uart_handle, data, data_to_write, &data_written, NULL);
		do {
			ret = HAL_UART_Transmit(huart, (uint8_t*) data, 1, HAL_MAX_DELAY);
 80099ea:	f04f 33ff 	mov.w	r3, #4294967295
 80099ee:	2201      	movs	r2, #1
 80099f0:	6879      	ldr	r1, [r7, #4]
 80099f2:	68f8      	ldr	r0, [r7, #12]
 80099f4:	f7fc fd2e 	bl	8006454 <HAL_UART_Transmit>
 80099f8:	4603      	mov	r3, r0
 80099fa:	757b      	strb	r3, [r7, #21]
		} while (ret != HAL_OK);
 80099fc:	7d7b      	ldrb	r3, [r7, #21]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d1f3      	bne.n	80099ea <uart_tx+0x12>

		data_written = 1;
 8009a02:	2301      	movs	r3, #1
 8009a04:	827b      	strh	r3, [r7, #18]

		if (ret != HAL_OK) {
 8009a06:	7d7b      	ldrb	r3, [r7, #21]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d007      	beq.n	8009a1c <uart_tx+0x44>
			printf("Failed to transmit on UART: %d\r\n", ret);
 8009a0c:	7d7b      	ldrb	r3, [r7, #21]
 8009a0e:	4619      	mov	r1, r3
 8009a10:	480a      	ldr	r0, [pc, #40]	; (8009a3c <uart_tx+0x64>)
 8009a12:	f000 fc9f 	bl	800a354 <iprintf>
			return -1;
 8009a16:	f04f 33ff 	mov.w	r3, #4294967295
 8009a1a:	e00b      	b.n	8009a34 <uart_tx+0x5c>
		}

		data_to_write -= data_written;
 8009a1c:	8afa      	ldrh	r2, [r7, #22]
 8009a1e:	8a7b      	ldrh	r3, [r7, #18]
 8009a20:	1ad3      	subs	r3, r2, r3
 8009a22:	82fb      	strh	r3, [r7, #22]
		data += data_written;
 8009a24:	8a7b      	ldrh	r3, [r7, #18]
 8009a26:	687a      	ldr	r2, [r7, #4]
 8009a28:	4413      	add	r3, r2
 8009a2a:	607b      	str	r3, [r7, #4]
	while (data_to_write) {
 8009a2c:	8afb      	ldrh	r3, [r7, #22]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d1db      	bne.n	80099ea <uart_tx+0x12>
	}

	//FlushFileBuffers(uart_handle);

	return dataLength;
 8009a32:	68bb      	ldr	r3, [r7, #8]
}
 8009a34:	4618      	mov	r0, r3
 8009a36:	3718      	adds	r7, #24
 8009a38:	46bd      	mov	sp, r7
 8009a3a:	bd80      	pop	{r7, pc}
 8009a3c:	0800c1ec 	.word	0x0800c1ec

08009a40 <uart_rx_it>:
 * @param   huartNum The UART identifier. Ex: huart1 -> 1, huart2 -> 2.
 * @param   dataLength The number of bytes to be read from the UART.
 * @param   data The buffer to store the recieved data in.
 * @retval  The number of bytes read from the UART, or -1 if there was an error.
 */
int uart_rx_it(UART_HandleTypeDef *huart, int dataLength, char *data) {
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b088      	sub	sp, #32
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	60f8      	str	r0, [r7, #12]
 8009a48:	60b9      	str	r1, [r7, #8]
 8009a4a:	607a      	str	r2, [r7, #4]
	// get huartNum
	int huartNum = -1;
 8009a4c:	f04f 33ff 	mov.w	r3, #4294967295
 8009a50:	61fb      	str	r3, [r7, #28]
	for (int i = 0; i < MAX_NUMBER_UART_HANDLES; i++) {
 8009a52:	2300      	movs	r3, #0
 8009a54:	61bb      	str	r3, [r7, #24]
 8009a56:	e00b      	b.n	8009a70 <uart_rx_it+0x30>
		if (UARTHandles[i] == huart) {
 8009a58:	4a17      	ldr	r2, [pc, #92]	; (8009ab8 <uart_rx_it+0x78>)
 8009a5a:	69bb      	ldr	r3, [r7, #24]
 8009a5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009a60:	68fa      	ldr	r2, [r7, #12]
 8009a62:	429a      	cmp	r2, r3
 8009a64:	d101      	bne.n	8009a6a <uart_rx_it+0x2a>
			huartNum = i;
 8009a66:	69bb      	ldr	r3, [r7, #24]
 8009a68:	61fb      	str	r3, [r7, #28]
	for (int i = 0; i < MAX_NUMBER_UART_HANDLES; i++) {
 8009a6a:	69bb      	ldr	r3, [r7, #24]
 8009a6c:	3301      	adds	r3, #1
 8009a6e:	61bb      	str	r3, [r7, #24]
 8009a70:	69bb      	ldr	r3, [r7, #24]
 8009a72:	2b09      	cmp	r3, #9
 8009a74:	ddf0      	ble.n	8009a58 <uart_rx_it+0x18>
		}
	}

	/* The amount of bytes still needed to be read. */
	uint16_t data_to_read = dataLength;
 8009a76:	68bb      	ldr	r3, [r7, #8]
 8009a78:	82fb      	strh	r3, [r7, #22]

#ifdef UART_DEBUG
  printf("uart_rx() - dataLength: %d\r\n", dataLength);
#endif

	while (data_to_read) {
 8009a7a:	e015      	b.n	8009aa8 <uart_rx_it+0x68>
		if (uart_rx_it_get_length(huartNum) > 0) {
 8009a7c:	69f8      	ldr	r0, [r7, #28]
 8009a7e:	f000 f90b 	bl	8009c98 <uart_rx_it_get_length>
 8009a82:	4603      	mov	r3, r0
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	dd0f      	ble.n	8009aa8 <uart_rx_it+0x68>
			data_read = uart_rx_it_get(huartNum, data_to_read, data);
 8009a88:	8afb      	ldrh	r3, [r7, #22]
 8009a8a:	687a      	ldr	r2, [r7, #4]
 8009a8c:	4619      	mov	r1, r3
 8009a8e:	69f8      	ldr	r0, [r7, #28]
 8009a90:	f000 f88a 	bl	8009ba8 <uart_rx_it_get>
 8009a94:	4603      	mov	r3, r0
 8009a96:	82bb      	strh	r3, [r7, #20]
			if (data_read == -1) {
				return data_read;
			}
			data_to_read -= data_read;
 8009a98:	8afa      	ldrh	r2, [r7, #22]
 8009a9a:	8abb      	ldrh	r3, [r7, #20]
 8009a9c:	1ad3      	subs	r3, r2, r3
 8009a9e:	82fb      	strh	r3, [r7, #22]
			data += data_read;
 8009aa0:	8abb      	ldrh	r3, [r7, #20]
 8009aa2:	687a      	ldr	r2, [r7, #4]
 8009aa4:	4413      	add	r3, r2
 8009aa6:	607b      	str	r3, [r7, #4]
	while (data_to_read) {
 8009aa8:	8afb      	ldrh	r3, [r7, #22]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d1e6      	bne.n	8009a7c <uart_rx_it+0x3c>
  }

  printf("\r\n");
#endif

	return dataLength;
 8009aae:	68bb      	ldr	r3, [r7, #8]
}
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	3720      	adds	r7, #32
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	bd80      	pop	{r7, pc}
 8009ab8:	20000a44 	.word	0x20000a44

08009abc <uart_rx_it_put>:
 * @param   dataLength The number of bytes received.
 * @param   data Pointer to the array containing the received data.
 * @retval  Returns -1 if error, otherwise returns the number of bytes that were added
 * 			to the UART buffer.
 */
int uart_rx_it_put(int huartNum, int dataLength, char *data) {
 8009abc:	b480      	push	{r7}
 8009abe:	b087      	sub	sp, #28
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	60f8      	str	r0, [r7, #12]
 8009ac4:	60b9      	str	r1, [r7, #8]
 8009ac6:	607a      	str	r2, [r7, #4]
	// Check which huart
	if (huartNum == 1) {
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	2b01      	cmp	r3, #1
 8009acc:	d12b      	bne.n	8009b26 <uart_rx_it_put+0x6a>
		// copy data to rx circular buffer
		for (int i = 0; i < dataLength; i++) {
 8009ace:	2300      	movs	r3, #0
 8009ad0:	617b      	str	r3, [r7, #20]
 8009ad2:	e023      	b.n	8009b1c <uart_rx_it_put+0x60>
			// check if buffer is full before adding more
			if (uart1_rx_it_buffer_length == UART_IT_BUFFER_LENGTH) {
 8009ad4:	4b2e      	ldr	r3, [pc, #184]	; (8009b90 <uart_rx_it_put+0xd4>)
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009adc:	d101      	bne.n	8009ae2 <uart_rx_it_put+0x26>
				// return number of bytes actually added to buffer
				return i;
 8009ade:	697b      	ldr	r3, [r7, #20]
 8009ae0:	e050      	b.n	8009b84 <uart_rx_it_put+0xc8>
			}

			uart1_rx_it_buffer[uart1_rx_it_put_idx] = data[i];
 8009ae2:	697b      	ldr	r3, [r7, #20]
 8009ae4:	687a      	ldr	r2, [r7, #4]
 8009ae6:	441a      	add	r2, r3
 8009ae8:	4b2a      	ldr	r3, [pc, #168]	; (8009b94 <uart_rx_it_put+0xd8>)
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	7811      	ldrb	r1, [r2, #0]
 8009aee:	4a2a      	ldr	r2, [pc, #168]	; (8009b98 <uart_rx_it_put+0xdc>)
 8009af0:	54d1      	strb	r1, [r2, r3]
			uart1_rx_it_put_idx++;
 8009af2:	4b28      	ldr	r3, [pc, #160]	; (8009b94 <uart_rx_it_put+0xd8>)
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	3301      	adds	r3, #1
 8009af8:	4a26      	ldr	r2, [pc, #152]	; (8009b94 <uart_rx_it_put+0xd8>)
 8009afa:	6013      	str	r3, [r2, #0]
			uart1_rx_it_buffer_length++;
 8009afc:	4b24      	ldr	r3, [pc, #144]	; (8009b90 <uart_rx_it_put+0xd4>)
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	3301      	adds	r3, #1
 8009b02:	4a23      	ldr	r2, [pc, #140]	; (8009b90 <uart_rx_it_put+0xd4>)
 8009b04:	6013      	str	r3, [r2, #0]

			// reached end of circular buffer, go back to beginning
			if (uart1_rx_it_put_idx == UART_IT_BUFFER_LENGTH) {
 8009b06:	4b23      	ldr	r3, [pc, #140]	; (8009b94 <uart_rx_it_put+0xd8>)
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009b0e:	d102      	bne.n	8009b16 <uart_rx_it_put+0x5a>
				uart1_rx_it_put_idx = 0;
 8009b10:	4b20      	ldr	r3, [pc, #128]	; (8009b94 <uart_rx_it_put+0xd8>)
 8009b12:	2200      	movs	r2, #0
 8009b14:	601a      	str	r2, [r3, #0]
		for (int i = 0; i < dataLength; i++) {
 8009b16:	697b      	ldr	r3, [r7, #20]
 8009b18:	3301      	adds	r3, #1
 8009b1a:	617b      	str	r3, [r7, #20]
 8009b1c:	697a      	ldr	r2, [r7, #20]
 8009b1e:	68bb      	ldr	r3, [r7, #8]
 8009b20:	429a      	cmp	r2, r3
 8009b22:	dbd7      	blt.n	8009ad4 <uart_rx_it_put+0x18>
 8009b24:	e02d      	b.n	8009b82 <uart_rx_it_put+0xc6>
			}
		}
	} else if (huartNum == 2) {
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	2b02      	cmp	r3, #2
 8009b2a:	d12a      	bne.n	8009b82 <uart_rx_it_put+0xc6>
		// copy data to rx circular buffer
		for (int i = 0; i < dataLength; i++) {
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	613b      	str	r3, [r7, #16]
 8009b30:	e023      	b.n	8009b7a <uart_rx_it_put+0xbe>
			// check if buffer is full before adding more
			if (uart2_rx_it_buffer_length == UART_IT_BUFFER_LENGTH) {
 8009b32:	4b1a      	ldr	r3, [pc, #104]	; (8009b9c <uart_rx_it_put+0xe0>)
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009b3a:	d101      	bne.n	8009b40 <uart_rx_it_put+0x84>
				// return number of bytes actually added to buffer
				return i;
 8009b3c:	693b      	ldr	r3, [r7, #16]
 8009b3e:	e021      	b.n	8009b84 <uart_rx_it_put+0xc8>
			}

			uart2_rx_it_buffer[uart2_rx_it_put_idx] = data[i];
 8009b40:	693b      	ldr	r3, [r7, #16]
 8009b42:	687a      	ldr	r2, [r7, #4]
 8009b44:	441a      	add	r2, r3
 8009b46:	4b16      	ldr	r3, [pc, #88]	; (8009ba0 <uart_rx_it_put+0xe4>)
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	7811      	ldrb	r1, [r2, #0]
 8009b4c:	4a15      	ldr	r2, [pc, #84]	; (8009ba4 <uart_rx_it_put+0xe8>)
 8009b4e:	54d1      	strb	r1, [r2, r3]
			uart2_rx_it_put_idx++;
 8009b50:	4b13      	ldr	r3, [pc, #76]	; (8009ba0 <uart_rx_it_put+0xe4>)
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	3301      	adds	r3, #1
 8009b56:	4a12      	ldr	r2, [pc, #72]	; (8009ba0 <uart_rx_it_put+0xe4>)
 8009b58:	6013      	str	r3, [r2, #0]
			uart2_rx_it_buffer_length++;
 8009b5a:	4b10      	ldr	r3, [pc, #64]	; (8009b9c <uart_rx_it_put+0xe0>)
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	3301      	adds	r3, #1
 8009b60:	4a0e      	ldr	r2, [pc, #56]	; (8009b9c <uart_rx_it_put+0xe0>)
 8009b62:	6013      	str	r3, [r2, #0]

			// reached end of circular buffer, go back to beginning
			if (uart2_rx_it_put_idx == UART_IT_BUFFER_LENGTH) {
 8009b64:	4b0e      	ldr	r3, [pc, #56]	; (8009ba0 <uart_rx_it_put+0xe4>)
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009b6c:	d102      	bne.n	8009b74 <uart_rx_it_put+0xb8>
				uart2_rx_it_put_idx = 0;
 8009b6e:	4b0c      	ldr	r3, [pc, #48]	; (8009ba0 <uart_rx_it_put+0xe4>)
 8009b70:	2200      	movs	r2, #0
 8009b72:	601a      	str	r2, [r3, #0]
		for (int i = 0; i < dataLength; i++) {
 8009b74:	693b      	ldr	r3, [r7, #16]
 8009b76:	3301      	adds	r3, #1
 8009b78:	613b      	str	r3, [r7, #16]
 8009b7a:	693a      	ldr	r2, [r7, #16]
 8009b7c:	68bb      	ldr	r3, [r7, #8]
 8009b7e:	429a      	cmp	r2, r3
 8009b80:	dbd7      	blt.n	8009b32 <uart_rx_it_put+0x76>
			}
		}
	}
	return dataLength;
 8009b82:	68bb      	ldr	r3, [r7, #8]
}
 8009b84:	4618      	mov	r0, r3
 8009b86:	371c      	adds	r7, #28
 8009b88:	46bd      	mov	sp, r7
 8009b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8e:	4770      	bx	lr
 8009b90:	20000a6c 	.word	0x20000a6c
 8009b94:	20000a70 	.word	0x20000a70
 8009b98:	20000a78 	.word	0x20000a78
 8009b9c:	20003a78 	.word	0x20003a78
 8009ba0:	20003a7c 	.word	0x20003a7c
 8009ba4:	20003a84 	.word	0x20003a84

08009ba8 <uart_rx_it_get>:
 * @param   dataLength The number of bytes of data that will be consumed from the UART buffer.
 * @param	data The pointer to the char buffer where the received data will be written to.
 * @retval  Returns -1 if error, otherwise returns the number of bytes that were
 * 			actually read from the UART buffer.
 */
int uart_rx_it_get(int huartNum, int dataLength, char *data) {
 8009ba8:	b480      	push	{r7}
 8009baa:	b087      	sub	sp, #28
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	60f8      	str	r0, [r7, #12]
 8009bb0:	60b9      	str	r1, [r7, #8]
 8009bb2:	607a      	str	r2, [r7, #4]
	// Check which huart
	if (huartNum == 1) {
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	2b01      	cmp	r3, #1
 8009bb8:	d12a      	bne.n	8009c10 <uart_rx_it_get+0x68>
		for (int i = 0; i < dataLength; i++) {
 8009bba:	2300      	movs	r3, #0
 8009bbc:	617b      	str	r3, [r7, #20]
 8009bbe:	e022      	b.n	8009c06 <uart_rx_it_get+0x5e>
			// check that buffer has any data to read
			if (uart1_rx_it_buffer_length == 0) {
 8009bc0:	4b2d      	ldr	r3, [pc, #180]	; (8009c78 <uart_rx_it_get+0xd0>)
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d101      	bne.n	8009bcc <uart_rx_it_get+0x24>
				// return number of bytes actually read from buffer
				return i;
 8009bc8:	697b      	ldr	r3, [r7, #20]
 8009bca:	e04f      	b.n	8009c6c <uart_rx_it_get+0xc4>
			}

			data[i] = uart1_rx_it_buffer[uart1_rx_it_get_idx];
 8009bcc:	4b2b      	ldr	r3, [pc, #172]	; (8009c7c <uart_rx_it_get+0xd4>)
 8009bce:	681a      	ldr	r2, [r3, #0]
 8009bd0:	697b      	ldr	r3, [r7, #20]
 8009bd2:	6879      	ldr	r1, [r7, #4]
 8009bd4:	440b      	add	r3, r1
 8009bd6:	492a      	ldr	r1, [pc, #168]	; (8009c80 <uart_rx_it_get+0xd8>)
 8009bd8:	5c8a      	ldrb	r2, [r1, r2]
 8009bda:	701a      	strb	r2, [r3, #0]
			uart1_rx_it_get_idx++;
 8009bdc:	4b27      	ldr	r3, [pc, #156]	; (8009c7c <uart_rx_it_get+0xd4>)
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	3301      	adds	r3, #1
 8009be2:	4a26      	ldr	r2, [pc, #152]	; (8009c7c <uart_rx_it_get+0xd4>)
 8009be4:	6013      	str	r3, [r2, #0]
			uart1_rx_it_buffer_length--;
 8009be6:	4b24      	ldr	r3, [pc, #144]	; (8009c78 <uart_rx_it_get+0xd0>)
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	3b01      	subs	r3, #1
 8009bec:	4a22      	ldr	r2, [pc, #136]	; (8009c78 <uart_rx_it_get+0xd0>)
 8009bee:	6013      	str	r3, [r2, #0]

			// reached end of circular buffer, go back to beginning
			if (uart1_rx_it_put_idx == UART_IT_BUFFER_LENGTH) {
 8009bf0:	4b24      	ldr	r3, [pc, #144]	; (8009c84 <uart_rx_it_get+0xdc>)
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009bf8:	d102      	bne.n	8009c00 <uart_rx_it_get+0x58>
				uart1_rx_it_put_idx = 0;
 8009bfa:	4b22      	ldr	r3, [pc, #136]	; (8009c84 <uart_rx_it_get+0xdc>)
 8009bfc:	2200      	movs	r2, #0
 8009bfe:	601a      	str	r2, [r3, #0]
		for (int i = 0; i < dataLength; i++) {
 8009c00:	697b      	ldr	r3, [r7, #20]
 8009c02:	3301      	adds	r3, #1
 8009c04:	617b      	str	r3, [r7, #20]
 8009c06:	697a      	ldr	r2, [r7, #20]
 8009c08:	68bb      	ldr	r3, [r7, #8]
 8009c0a:	429a      	cmp	r2, r3
 8009c0c:	dbd8      	blt.n	8009bc0 <uart_rx_it_get+0x18>
 8009c0e:	e02c      	b.n	8009c6a <uart_rx_it_get+0xc2>
			}
		}
	} else if (huartNum == 2) {
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	2b02      	cmp	r3, #2
 8009c14:	d129      	bne.n	8009c6a <uart_rx_it_get+0xc2>
		for (int i = 0; i < dataLength; i++) {
 8009c16:	2300      	movs	r3, #0
 8009c18:	613b      	str	r3, [r7, #16]
 8009c1a:	e022      	b.n	8009c62 <uart_rx_it_get+0xba>
			// check that buffer has any data to read
			if (uart2_rx_it_buffer_length == 0) {
 8009c1c:	4b1a      	ldr	r3, [pc, #104]	; (8009c88 <uart_rx_it_get+0xe0>)
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d101      	bne.n	8009c28 <uart_rx_it_get+0x80>
				// return number of bytes actually read from buffer
				return i;
 8009c24:	693b      	ldr	r3, [r7, #16]
 8009c26:	e021      	b.n	8009c6c <uart_rx_it_get+0xc4>
			}

			data[i] = uart2_rx_it_buffer[uart2_rx_it_get_idx];
 8009c28:	4b18      	ldr	r3, [pc, #96]	; (8009c8c <uart_rx_it_get+0xe4>)
 8009c2a:	681a      	ldr	r2, [r3, #0]
 8009c2c:	693b      	ldr	r3, [r7, #16]
 8009c2e:	6879      	ldr	r1, [r7, #4]
 8009c30:	440b      	add	r3, r1
 8009c32:	4917      	ldr	r1, [pc, #92]	; (8009c90 <uart_rx_it_get+0xe8>)
 8009c34:	5c8a      	ldrb	r2, [r1, r2]
 8009c36:	701a      	strb	r2, [r3, #0]
			uart2_rx_it_get_idx++;
 8009c38:	4b14      	ldr	r3, [pc, #80]	; (8009c8c <uart_rx_it_get+0xe4>)
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	3301      	adds	r3, #1
 8009c3e:	4a13      	ldr	r2, [pc, #76]	; (8009c8c <uart_rx_it_get+0xe4>)
 8009c40:	6013      	str	r3, [r2, #0]
			uart2_rx_it_buffer_length--;
 8009c42:	4b11      	ldr	r3, [pc, #68]	; (8009c88 <uart_rx_it_get+0xe0>)
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	3b01      	subs	r3, #1
 8009c48:	4a0f      	ldr	r2, [pc, #60]	; (8009c88 <uart_rx_it_get+0xe0>)
 8009c4a:	6013      	str	r3, [r2, #0]

			// reached end of circular buffer, go back to beginning
			if (uart2_rx_it_put_idx == UART_IT_BUFFER_LENGTH) {
 8009c4c:	4b11      	ldr	r3, [pc, #68]	; (8009c94 <uart_rx_it_get+0xec>)
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009c54:	d102      	bne.n	8009c5c <uart_rx_it_get+0xb4>
				uart2_rx_it_put_idx = 0;
 8009c56:	4b0f      	ldr	r3, [pc, #60]	; (8009c94 <uart_rx_it_get+0xec>)
 8009c58:	2200      	movs	r2, #0
 8009c5a:	601a      	str	r2, [r3, #0]
		for (int i = 0; i < dataLength; i++) {
 8009c5c:	693b      	ldr	r3, [r7, #16]
 8009c5e:	3301      	adds	r3, #1
 8009c60:	613b      	str	r3, [r7, #16]
 8009c62:	693a      	ldr	r2, [r7, #16]
 8009c64:	68bb      	ldr	r3, [r7, #8]
 8009c66:	429a      	cmp	r2, r3
 8009c68:	dbd8      	blt.n	8009c1c <uart_rx_it_get+0x74>
			}
		}
	}

	return dataLength;
 8009c6a:	68bb      	ldr	r3, [r7, #8]
}
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	371c      	adds	r7, #28
 8009c70:	46bd      	mov	sp, r7
 8009c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c76:	4770      	bx	lr
 8009c78:	20000a6c 	.word	0x20000a6c
 8009c7c:	20000a74 	.word	0x20000a74
 8009c80:	20000a78 	.word	0x20000a78
 8009c84:	20000a70 	.word	0x20000a70
 8009c88:	20003a78 	.word	0x20003a78
 8009c8c:	20003a80 	.word	0x20003a80
 8009c90:	20003a84 	.word	0x20003a84
 8009c94:	20003a7c 	.word	0x20003a7c

08009c98 <uart_rx_it_get_length>:
 * 			is the number of bytes that have been received but have not yet been processed by the program. They can be
 * 			obtained using the uart_rx_it() function.
 * @param   huartNum The UART identifier. Ex: huart1 -> 1, huart2 -> 2.
 * @retval  The current length of the UART RX buffer.
 */
int uart_rx_it_get_length(int huartNum) {
 8009c98:	b480      	push	{r7}
 8009c9a:	b083      	sub	sp, #12
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	6078      	str	r0, [r7, #4]
	if (huartNum == 1) {
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	2b01      	cmp	r3, #1
 8009ca4:	d102      	bne.n	8009cac <uart_rx_it_get_length+0x14>
		return uart1_rx_it_buffer_length;
 8009ca6:	4b08      	ldr	r3, [pc, #32]	; (8009cc8 <uart_rx_it_get_length+0x30>)
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	e007      	b.n	8009cbc <uart_rx_it_get_length+0x24>
	} else if (huartNum == 2) {
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	2b02      	cmp	r3, #2
 8009cb0:	d102      	bne.n	8009cb8 <uart_rx_it_get_length+0x20>
		return uart2_rx_it_buffer_length;
 8009cb2:	4b06      	ldr	r3, [pc, #24]	; (8009ccc <uart_rx_it_get_length+0x34>)
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	e001      	b.n	8009cbc <uart_rx_it_get_length+0x24>
	}
	return -1;
 8009cb8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	370c      	adds	r7, #12
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc6:	4770      	bx	lr
 8009cc8:	20000a6c 	.word	0x20000a6c
 8009ccc:	20003a78 	.word	0x20003a78

08009cd0 <uart_rx_it_clear_buffer>:
 * @note    Does not technically clear the buffer, just resets put idx, get idx and length to 0. This will cause newly received
 * 			data to overwrite the old data, essentially clearing the buffer.
 * @param   huartNum The UART identifier. Ex: huart1 -> 1, huart2 -> 2
 * @retval  void
 */
void uart_rx_it_clear_buffer(int huartNum) {
 8009cd0:	b480      	push	{r7}
 8009cd2:	b083      	sub	sp, #12
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	6078      	str	r0, [r7, #4]
	if (huartNum == 1) {
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	2b01      	cmp	r3, #1
 8009cdc:	d109      	bne.n	8009cf2 <uart_rx_it_clear_buffer+0x22>
		uart1_rx_it_buffer_length = 0;
 8009cde:	4b0e      	ldr	r3, [pc, #56]	; (8009d18 <uart_rx_it_clear_buffer+0x48>)
 8009ce0:	2200      	movs	r2, #0
 8009ce2:	601a      	str	r2, [r3, #0]
		uart1_rx_it_put_idx = 0;
 8009ce4:	4b0d      	ldr	r3, [pc, #52]	; (8009d1c <uart_rx_it_clear_buffer+0x4c>)
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	601a      	str	r2, [r3, #0]
		uart1_rx_it_get_idx = 0;
 8009cea:	4b0d      	ldr	r3, [pc, #52]	; (8009d20 <uart_rx_it_clear_buffer+0x50>)
 8009cec:	2200      	movs	r2, #0
 8009cee:	601a      	str	r2, [r3, #0]
	else if (huartNum == 2) {
		uart2_rx_it_buffer_length = 0;
		uart2_rx_it_put_idx = 0;
		uart2_rx_it_get_idx = 0;
	}
}
 8009cf0:	e00b      	b.n	8009d0a <uart_rx_it_clear_buffer+0x3a>
	else if (huartNum == 2) {
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	2b02      	cmp	r3, #2
 8009cf6:	d108      	bne.n	8009d0a <uart_rx_it_clear_buffer+0x3a>
		uart2_rx_it_buffer_length = 0;
 8009cf8:	4b0a      	ldr	r3, [pc, #40]	; (8009d24 <uart_rx_it_clear_buffer+0x54>)
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	601a      	str	r2, [r3, #0]
		uart2_rx_it_put_idx = 0;
 8009cfe:	4b0a      	ldr	r3, [pc, #40]	; (8009d28 <uart_rx_it_clear_buffer+0x58>)
 8009d00:	2200      	movs	r2, #0
 8009d02:	601a      	str	r2, [r3, #0]
		uart2_rx_it_get_idx = 0;
 8009d04:	4b09      	ldr	r3, [pc, #36]	; (8009d2c <uart_rx_it_clear_buffer+0x5c>)
 8009d06:	2200      	movs	r2, #0
 8009d08:	601a      	str	r2, [r3, #0]
}
 8009d0a:	bf00      	nop
 8009d0c:	370c      	adds	r7, #12
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d14:	4770      	bx	lr
 8009d16:	bf00      	nop
 8009d18:	20000a6c 	.word	0x20000a6c
 8009d1c:	20000a70 	.word	0x20000a70
 8009d20:	20000a74 	.word	0x20000a74
 8009d24:	20003a78 	.word	0x20003a78
 8009d28:	20003a7c 	.word	0x20003a7c
 8009d2c:	20003a80 	.word	0x20003a80

08009d30 <printBuffer>:
 *
 * @param buffer Char buffer to be printed
 * @param length Amount of characters to be printed from buffer
 * @param format The format specifier used to print the elements of the char array (ex: "%c" or "%x")
 */
void printBuffer(char *buffer, int length, char *format) {
 8009d30:	b580      	push	{r7, lr}
 8009d32:	b088      	sub	sp, #32
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	60f8      	str	r0, [r7, #12]
 8009d38:	60b9      	str	r1, [r7, #8]
 8009d3a:	607a      	str	r2, [r7, #4]
	char buffer_name[5] = "buff\0";
 8009d3c:	4a13      	ldr	r2, [pc, #76]	; (8009d8c <printBuffer+0x5c>)
 8009d3e:	f107 0314 	add.w	r3, r7, #20
 8009d42:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009d46:	6018      	str	r0, [r3, #0]
 8009d48:	3304      	adds	r3, #4
 8009d4a:	7019      	strb	r1, [r3, #0]
	printf("%s: ", buffer_name);
 8009d4c:	f107 0314 	add.w	r3, r7, #20
 8009d50:	4619      	mov	r1, r3
 8009d52:	480f      	ldr	r0, [pc, #60]	; (8009d90 <printBuffer+0x60>)
 8009d54:	f000 fafe 	bl	800a354 <iprintf>
	for (int i = 0; i < length; i++) {
 8009d58:	2300      	movs	r3, #0
 8009d5a:	61fb      	str	r3, [r7, #28]
 8009d5c:	e00a      	b.n	8009d74 <printBuffer+0x44>
		printf(format, buffer[i]);
 8009d5e:	69fb      	ldr	r3, [r7, #28]
 8009d60:	68fa      	ldr	r2, [r7, #12]
 8009d62:	4413      	add	r3, r2
 8009d64:	781b      	ldrb	r3, [r3, #0]
 8009d66:	4619      	mov	r1, r3
 8009d68:	6878      	ldr	r0, [r7, #4]
 8009d6a:	f000 faf3 	bl	800a354 <iprintf>
	for (int i = 0; i < length; i++) {
 8009d6e:	69fb      	ldr	r3, [r7, #28]
 8009d70:	3301      	adds	r3, #1
 8009d72:	61fb      	str	r3, [r7, #28]
 8009d74:	69fa      	ldr	r2, [r7, #28]
 8009d76:	68bb      	ldr	r3, [r7, #8]
 8009d78:	429a      	cmp	r2, r3
 8009d7a:	dbf0      	blt.n	8009d5e <printBuffer+0x2e>
	}
	printf("\n");
 8009d7c:	200a      	movs	r0, #10
 8009d7e:	f000 fafb 	bl	800a378 <putchar>
}
 8009d82:	bf00      	nop
 8009d84:	3720      	adds	r7, #32
 8009d86:	46bd      	mov	sp, r7
 8009d88:	bd80      	pop	{r7, pc}
 8009d8a:	bf00      	nop
 8009d8c:	0800c228 	.word	0x0800c228
 8009d90:	0800c220 	.word	0x0800c220

08009d94 <isBigEndian>:
// CUSTOM HASHING FUNCTIONS -> not sure if this is actually possible

/**
 * Returns 0 if little Endian, 1 if big Endian.
 */
int isBigEndian() {
 8009d94:	b480      	push	{r7}
 8009d96:	b083      	sub	sp, #12
 8009d98:	af00      	add	r7, sp, #0
	const int i = 1;
 8009d9a:	2301      	movs	r3, #1
 8009d9c:	607b      	str	r3, [r7, #4]
	return ((*(char *) &i) == 0);
 8009d9e:	1d3b      	adds	r3, r7, #4
 8009da0:	781b      	ldrb	r3, [r3, #0]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	bf0c      	ite	eq
 8009da6:	2301      	moveq	r3, #1
 8009da8:	2300      	movne	r3, #0
 8009daa:	b2db      	uxtb	r3, r3
}
 8009dac:	4618      	mov	r0, r3
 8009dae:	370c      	adds	r7, #12
 8009db0:	46bd      	mov	sp, r7
 8009db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db6:	4770      	bx	lr

08009db8 <fixEndianness>:
 * Use to fix endianness of buffer. Buffer length must be multiple of 4.
 *
 * @param buffer
 * @param size Size of buffer in bytes.
 */
HAL_StatusTypeDef fixEndianness(uint8_t *buffer, int size) {
 8009db8:	b580      	push	{r7, lr}
 8009dba:	b084      	sub	sp, #16
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	6078      	str	r0, [r7, #4]
 8009dc0:	6039      	str	r1, [r7, #0]
	if (size % 4 != 0) {
 8009dc2:	683b      	ldr	r3, [r7, #0]
 8009dc4:	f003 0303 	and.w	r3, r3, #3
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d001      	beq.n	8009dd0 <fixEndianness+0x18>
		return HAL_ERROR;
 8009dcc:	2301      	movs	r3, #1
 8009dce:	e069      	b.n	8009ea4 <fixEndianness+0xec>
	}
	for (int i = 0; i < size / 4; i++) {
 8009dd0:	2300      	movs	r3, #0
 8009dd2:	60fb      	str	r3, [r7, #12]
 8009dd4:	e05c      	b.n	8009e90 <fixEndianness+0xd8>
		//uint8_t *temp = (uint8_t *) (buffer + (i*4));
		unsigned char c0, c1, c2, c3;
		c0 = buffer[i*4 + 0];
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	009b      	lsls	r3, r3, #2
 8009dda:	461a      	mov	r2, r3
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	4413      	add	r3, r2
 8009de0:	781b      	ldrb	r3, [r3, #0]
 8009de2:	72fb      	strb	r3, [r7, #11]
		c1 = buffer[i*4 + 1];
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	009b      	lsls	r3, r3, #2
 8009de8:	3301      	adds	r3, #1
 8009dea:	687a      	ldr	r2, [r7, #4]
 8009dec:	4413      	add	r3, r2
 8009dee:	781b      	ldrb	r3, [r3, #0]
 8009df0:	72bb      	strb	r3, [r7, #10]
		c2 = buffer[i*4 + 2];
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	009b      	lsls	r3, r3, #2
 8009df6:	3302      	adds	r3, #2
 8009df8:	687a      	ldr	r2, [r7, #4]
 8009dfa:	4413      	add	r3, r2
 8009dfc:	781b      	ldrb	r3, [r3, #0]
 8009dfe:	727b      	strb	r3, [r7, #9]
		c3 = buffer[i*4 + 3];
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	009b      	lsls	r3, r3, #2
 8009e04:	3303      	adds	r3, #3
 8009e06:	687a      	ldr	r2, [r7, #4]
 8009e08:	4413      	add	r3, r2
 8009e0a:	781b      	ldrb	r3, [r3, #0]
 8009e0c:	723b      	strb	r3, [r7, #8]
		if (isBigEndian()) {
 8009e0e:	f7ff ffc1 	bl	8009d94 <isBigEndian>
 8009e12:	4603      	mov	r3, r0
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d01c      	beq.n	8009e52 <fixEndianness+0x9a>
			buffer[i*4 + 0] = c0;
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	009b      	lsls	r3, r3, #2
 8009e1c:	461a      	mov	r2, r3
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	4413      	add	r3, r2
 8009e22:	7afa      	ldrb	r2, [r7, #11]
 8009e24:	701a      	strb	r2, [r3, #0]
			buffer[i*4 + 1] = c1;
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	009b      	lsls	r3, r3, #2
 8009e2a:	3301      	adds	r3, #1
 8009e2c:	687a      	ldr	r2, [r7, #4]
 8009e2e:	4413      	add	r3, r2
 8009e30:	7aba      	ldrb	r2, [r7, #10]
 8009e32:	701a      	strb	r2, [r3, #0]
			buffer[i*4 + 2] = c2;
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	009b      	lsls	r3, r3, #2
 8009e38:	3302      	adds	r3, #2
 8009e3a:	687a      	ldr	r2, [r7, #4]
 8009e3c:	4413      	add	r3, r2
 8009e3e:	7a7a      	ldrb	r2, [r7, #9]
 8009e40:	701a      	strb	r2, [r3, #0]
			buffer[i*4 + 3] = c3;
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	009b      	lsls	r3, r3, #2
 8009e46:	3303      	adds	r3, #3
 8009e48:	687a      	ldr	r2, [r7, #4]
 8009e4a:	4413      	add	r3, r2
 8009e4c:	7a3a      	ldrb	r2, [r7, #8]
 8009e4e:	701a      	strb	r2, [r3, #0]
 8009e50:	e01b      	b.n	8009e8a <fixEndianness+0xd2>
		} else {
			buffer[i*4 + 0] = c3;
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	009b      	lsls	r3, r3, #2
 8009e56:	461a      	mov	r2, r3
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	4413      	add	r3, r2
 8009e5c:	7a3a      	ldrb	r2, [r7, #8]
 8009e5e:	701a      	strb	r2, [r3, #0]
			buffer[i*4 + 1] = c2;
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	009b      	lsls	r3, r3, #2
 8009e64:	3301      	adds	r3, #1
 8009e66:	687a      	ldr	r2, [r7, #4]
 8009e68:	4413      	add	r3, r2
 8009e6a:	7a7a      	ldrb	r2, [r7, #9]
 8009e6c:	701a      	strb	r2, [r3, #0]
			buffer[i*4 + 2] = c1;
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	009b      	lsls	r3, r3, #2
 8009e72:	3302      	adds	r3, #2
 8009e74:	687a      	ldr	r2, [r7, #4]
 8009e76:	4413      	add	r3, r2
 8009e78:	7aba      	ldrb	r2, [r7, #10]
 8009e7a:	701a      	strb	r2, [r3, #0]
			buffer[i*4 + 3] = c0;
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	009b      	lsls	r3, r3, #2
 8009e80:	3303      	adds	r3, #3
 8009e82:	687a      	ldr	r2, [r7, #4]
 8009e84:	4413      	add	r3, r2
 8009e86:	7afa      	ldrb	r2, [r7, #11]
 8009e88:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < size / 4; i++) {
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	3301      	adds	r3, #1
 8009e8e:	60fb      	str	r3, [r7, #12]
 8009e90:	683b      	ldr	r3, [r7, #0]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	da00      	bge.n	8009e98 <fixEndianness+0xe0>
 8009e96:	3303      	adds	r3, #3
 8009e98:	109b      	asrs	r3, r3, #2
 8009e9a:	461a      	mov	r2, r3
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	4293      	cmp	r3, r2
 8009ea0:	db99      	blt.n	8009dd6 <fixEndianness+0x1e>
		}
	}

	return HAL_OK;
 8009ea2:	2300      	movs	r3, #0
}
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	3710      	adds	r7, #16
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	bd80      	pop	{r7, pc}

08009eac <computeHashFromFlash>:
 * @param flashAddress The starting address of the byte array in memory.
 * @param size The length of the byte array to compute the hash for.
 * @param digest Pointer to the 32 byte array that will store the SHA256 output digest.
 * @retval Status of the operation.
 */
HAL_StatusTypeDef computeHashFromFlash(HASH_HandleTypeDef *hhash, uint32_t flashAddress, int size, char *digest) {
 8009eac:	b590      	push	{r4, r7, lr}
 8009eae:	f5ad 5d00 	sub.w	sp, sp, #8192	; 0x2000
 8009eb2:	b08b      	sub	sp, #44	; 0x2c
 8009eb4:	af02      	add	r7, sp, #8
 8009eb6:	f107 0420 	add.w	r4, r7, #32
 8009eba:	f844 0c14 	str.w	r0, [r4, #-20]
 8009ebe:	f107 0020 	add.w	r0, r7, #32
 8009ec2:	f840 1c18 	str.w	r1, [r0, #-24]
 8009ec6:	f107 0120 	add.w	r1, r7, #32
 8009eca:	f841 2c1c 	str.w	r2, [r1, #-28]
 8009ece:	f107 0220 	add.w	r2, r7, #32
 8009ed2:	f842 3c20 	str.w	r3, [r2, #-32]
	// Compute hash 1 flash page at a time.
	int numPages = size / FLASH_PAGE_SIZE;
 8009ed6:	f107 0320 	add.w	r3, r7, #32
 8009eda:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8009ede:	0b5b      	lsrs	r3, r3, #13
 8009ee0:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8009ee4:	f102 0218 	add.w	r2, r2, #24
 8009ee8:	6013      	str	r3, [r2, #0]
	int leftOverBytes = size - (numPages * FLASH_PAGE_SIZE);
 8009eea:	f107 0320 	add.w	r3, r7, #32
 8009eee:	f853 2c1c 	ldr.w	r2, [r3, #-28]
 8009ef2:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8009ef6:	f103 0318 	add.w	r3, r3, #24
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	035b      	lsls	r3, r3, #13
 8009efe:	1ad3      	subs	r3, r2, r3
 8009f00:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8009f04:	f102 0214 	add.w	r2, r2, #20
 8009f08:	6013      	str	r3, [r2, #0]
	printf("Computing SHA256 Hash of %d bytes in flash starting at address: %08lx\n", size, flashAddress);
 8009f0a:	f107 0320 	add.w	r3, r7, #32
 8009f0e:	461a      	mov	r2, r3
 8009f10:	f107 0320 	add.w	r3, r7, #32
 8009f14:	f852 2c18 	ldr.w	r2, [r2, #-24]
 8009f18:	f853 1c1c 	ldr.w	r1, [r3, #-28]
 8009f1c:	4847      	ldr	r0, [pc, #284]	; (800a03c <computeHashFromFlash+0x190>)
 8009f1e:	f000 fa19 	bl	800a354 <iprintf>

	char firmwarePage[FLASH_PAGE_SIZE];

	for (int i = 0; i < numPages; i++) {
 8009f22:	2300      	movs	r3, #0
 8009f24:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8009f28:	f102 021c 	add.w	r2, r2, #28
 8009f2c:	6013      	str	r3, [r2, #0]
 8009f2e:	e043      	b.n	8009fb8 <computeHashFromFlash+0x10c>
		memcpy(firmwarePage, (char *) flashAddress, FLASH_PAGE_SIZE);
 8009f30:	f107 0320 	add.w	r3, r7, #32
 8009f34:	f853 2c18 	ldr.w	r2, [r3, #-24]
 8009f38:	f107 0320 	add.w	r3, r7, #32
 8009f3c:	3b0c      	subs	r3, #12
 8009f3e:	4611      	mov	r1, r2
 8009f40:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8009f44:	4618      	mov	r0, r3
 8009f46:	f000 fbdd 	bl	800a704 <memcpy>
		fixEndianness((uint8_t *) firmwarePage, FLASH_PAGE_SIZE);
 8009f4a:	f107 0320 	add.w	r3, r7, #32
 8009f4e:	3b0c      	subs	r3, #12
 8009f50:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009f54:	4618      	mov	r0, r3
 8009f56:	f7ff ff2f 	bl	8009db8 <fixEndianness>
		if (HAL_HASHEx_SHA256_Accmlt(hhash, (uint8_t *) firmwarePage, FLASH_PAGE_SIZE) != HAL_OK) {
 8009f5a:	f107 0320 	add.w	r3, r7, #32
 8009f5e:	3b0c      	subs	r3, #12
 8009f60:	f107 0220 	add.w	r2, r7, #32
 8009f64:	4610      	mov	r0, r2
 8009f66:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8009f6a:	4619      	mov	r1, r3
 8009f6c:	f850 0c14 	ldr.w	r0, [r0, #-20]
 8009f70:	f7f7 fe96 	bl	8001ca0 <HAL_HASHEx_SHA256_Accmlt>
 8009f74:	4603      	mov	r3, r0
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d008      	beq.n	8009f8c <computeHashFromFlash+0xe0>
			printf("Error: accumulating hash at addr = %08lx\n", flashAddress);
 8009f7a:	f107 0320 	add.w	r3, r7, #32
 8009f7e:	f853 1c18 	ldr.w	r1, [r3, #-24]
 8009f82:	482f      	ldr	r0, [pc, #188]	; (800a040 <computeHashFromFlash+0x194>)
 8009f84:	f000 f9e6 	bl	800a354 <iprintf>
			return HAL_ERROR;
 8009f88:	2301      	movs	r3, #1
 8009f8a:	e050      	b.n	800a02e <computeHashFromFlash+0x182>
		}
		flashAddress += FLASH_PAGE_SIZE;
 8009f8c:	f107 0320 	add.w	r3, r7, #32
 8009f90:	461a      	mov	r2, r3
 8009f92:	f107 0320 	add.w	r3, r7, #32
 8009f96:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8009f9a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8009f9e:	f842 3c18 	str.w	r3, [r2, #-24]
	for (int i = 0; i < numPages; i++) {
 8009fa2:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8009fa6:	f103 031c 	add.w	r3, r3, #28
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	3301      	adds	r3, #1
 8009fae:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8009fb2:	f102 021c 	add.w	r2, r2, #28
 8009fb6:	6013      	str	r3, [r2, #0]
 8009fb8:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8009fbc:	f103 031c 	add.w	r3, r3, #28
 8009fc0:	681a      	ldr	r2, [r3, #0]
 8009fc2:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8009fc6:	f103 0318 	add.w	r3, r3, #24
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	429a      	cmp	r2, r3
 8009fce:	dbaf      	blt.n	8009f30 <computeHashFromFlash+0x84>
	}

	// do leftover and call accumlt_end
	memcpy(firmwarePage, (char *) flashAddress, leftOverBytes);
 8009fd0:	f107 0320 	add.w	r3, r7, #32
 8009fd4:	f853 1c18 	ldr.w	r1, [r3, #-24]
 8009fd8:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8009fdc:	f103 0314 	add.w	r3, r3, #20
 8009fe0:	681a      	ldr	r2, [r3, #0]
 8009fe2:	f107 0320 	add.w	r3, r7, #32
 8009fe6:	3b0c      	subs	r3, #12
 8009fe8:	4618      	mov	r0, r3
 8009fea:	f000 fb8b 	bl	800a704 <memcpy>
	if (HAL_HASHEx_SHA256_Accmlt_End(hhash, (uint8_t *) firmwarePage, leftOverBytes, (uint8_t *) digest, HAL_MAX_DELAY) != HAL_OK) {
 8009fee:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8009ff2:	f103 0314 	add.w	r3, r3, #20
 8009ff6:	681a      	ldr	r2, [r3, #0]
 8009ff8:	f107 0320 	add.w	r3, r7, #32
 8009ffc:	461c      	mov	r4, r3
 8009ffe:	f107 0120 	add.w	r1, r7, #32
 800a002:	390c      	subs	r1, #12
 800a004:	f107 0320 	add.w	r3, r7, #32
 800a008:	4618      	mov	r0, r3
 800a00a:	f04f 33ff 	mov.w	r3, #4294967295
 800a00e:	9300      	str	r3, [sp, #0]
 800a010:	f854 3c20 	ldr.w	r3, [r4, #-32]
 800a014:	f850 0c14 	ldr.w	r0, [r0, #-20]
 800a018:	f7f7 fe54 	bl	8001cc4 <HAL_HASHEx_SHA256_Accmlt_End>
 800a01c:	4603      	mov	r3, r0
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d004      	beq.n	800a02c <computeHashFromFlash+0x180>
		printf("Error: calling accmlt_end\n");
 800a022:	4808      	ldr	r0, [pc, #32]	; (800a044 <computeHashFromFlash+0x198>)
 800a024:	f000 fa04 	bl	800a430 <puts>
		return HAL_ERROR;
 800a028:	2301      	movs	r3, #1
 800a02a:	e000      	b.n	800a02e <computeHashFromFlash+0x182>
	}

	return HAL_OK;
 800a02c:	2300      	movs	r3, #0
}
 800a02e:	4618      	mov	r0, r3
 800a030:	f507 5700 	add.w	r7, r7, #8192	; 0x2000
 800a034:	3724      	adds	r7, #36	; 0x24
 800a036:	46bd      	mov	sp, r7
 800a038:	bd90      	pop	{r4, r7, pc}
 800a03a:	bf00      	nop
 800a03c:	0800c230 	.word	0x0800c230
 800a040:	0800c278 	.word	0x0800c278
 800a044:	0800c2a4 	.word	0x0800c2a4

0800a048 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 800a048:	f8df d034 	ldr.w	sp, [pc, #52]	; 800a080 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 800a04c:	f7ff fc4e 	bl	80098ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800a050:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800a052:	e003      	b.n	800a05c <LoopCopyDataInit>

0800a054 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800a054:	4b0b      	ldr	r3, [pc, #44]	; (800a084 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800a056:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800a058:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800a05a:	3104      	adds	r1, #4

0800a05c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800a05c:	480a      	ldr	r0, [pc, #40]	; (800a088 <LoopForever+0xa>)
	ldr	r3, =_edata
 800a05e:	4b0b      	ldr	r3, [pc, #44]	; (800a08c <LoopForever+0xe>)
	adds	r2, r0, r1
 800a060:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800a062:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800a064:	d3f6      	bcc.n	800a054 <CopyDataInit>
	ldr	r2, =_sbss
 800a066:	4a0a      	ldr	r2, [pc, #40]	; (800a090 <LoopForever+0x12>)
	b	LoopFillZerobss
 800a068:	e002      	b.n	800a070 <LoopFillZerobss>

0800a06a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800a06a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800a06c:	f842 3b04 	str.w	r3, [r2], #4

0800a070 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800a070:	4b08      	ldr	r3, [pc, #32]	; (800a094 <LoopForever+0x16>)
	cmp	r2, r3
 800a072:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800a074:	d3f9      	bcc.n	800a06a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800a076:	f000 fb1f 	bl	800a6b8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800a07a:	f7fe fbab 	bl	80087d4 <main>

0800a07e <LoopForever>:

LoopForever:
    b LoopForever
 800a07e:	e7fe      	b.n	800a07e <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 800a080:	20270000 	.word	0x20270000
	ldr	r3, =_sidata
 800a084:	0800c464 	.word	0x0800c464
	ldr	r0, =_sdata
 800a088:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800a08c:	20000084 	.word	0x20000084
	ldr	r2, =_sbss
 800a090:	20000084 	.word	0x20000084
	ldr	r3, = _ebss
 800a094:	20006bce 	.word	0x20006bce

0800a098 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800a098:	e7fe      	b.n	800a098 <ADC1_2_IRQHandler>
	...

0800a09c <sbrk_aligned>:
 800a09c:	b570      	push	{r4, r5, r6, lr}
 800a09e:	4e0e      	ldr	r6, [pc, #56]	; (800a0d8 <sbrk_aligned+0x3c>)
 800a0a0:	460c      	mov	r4, r1
 800a0a2:	4605      	mov	r5, r0
 800a0a4:	6831      	ldr	r1, [r6, #0]
 800a0a6:	b911      	cbnz	r1, 800a0ae <sbrk_aligned+0x12>
 800a0a8:	f000 fade 	bl	800a668 <_sbrk_r>
 800a0ac:	6030      	str	r0, [r6, #0]
 800a0ae:	4621      	mov	r1, r4
 800a0b0:	4628      	mov	r0, r5
 800a0b2:	f000 fad9 	bl	800a668 <_sbrk_r>
 800a0b6:	1c43      	adds	r3, r0, #1
 800a0b8:	d00a      	beq.n	800a0d0 <sbrk_aligned+0x34>
 800a0ba:	1cc4      	adds	r4, r0, #3
 800a0bc:	f024 0403 	bic.w	r4, r4, #3
 800a0c0:	42a0      	cmp	r0, r4
 800a0c2:	d007      	beq.n	800a0d4 <sbrk_aligned+0x38>
 800a0c4:	1a21      	subs	r1, r4, r0
 800a0c6:	4628      	mov	r0, r5
 800a0c8:	f000 face 	bl	800a668 <_sbrk_r>
 800a0cc:	3001      	adds	r0, #1
 800a0ce:	d101      	bne.n	800a0d4 <sbrk_aligned+0x38>
 800a0d0:	f04f 34ff 	mov.w	r4, #4294967295
 800a0d4:	4620      	mov	r0, r4
 800a0d6:	bd70      	pop	{r4, r5, r6, pc}
 800a0d8:	20006a88 	.word	0x20006a88

0800a0dc <_malloc_r>:
 800a0dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a0e0:	1ccd      	adds	r5, r1, #3
 800a0e2:	4607      	mov	r7, r0
 800a0e4:	f025 0503 	bic.w	r5, r5, #3
 800a0e8:	3508      	adds	r5, #8
 800a0ea:	2d0c      	cmp	r5, #12
 800a0ec:	bf38      	it	cc
 800a0ee:	250c      	movcc	r5, #12
 800a0f0:	2d00      	cmp	r5, #0
 800a0f2:	db01      	blt.n	800a0f8 <_malloc_r+0x1c>
 800a0f4:	42a9      	cmp	r1, r5
 800a0f6:	d905      	bls.n	800a104 <_malloc_r+0x28>
 800a0f8:	230c      	movs	r3, #12
 800a0fa:	2600      	movs	r6, #0
 800a0fc:	603b      	str	r3, [r7, #0]
 800a0fe:	4630      	mov	r0, r6
 800a100:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a104:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a1d8 <_malloc_r+0xfc>
 800a108:	f000 f868 	bl	800a1dc <__malloc_lock>
 800a10c:	f8d8 3000 	ldr.w	r3, [r8]
 800a110:	461c      	mov	r4, r3
 800a112:	bb5c      	cbnz	r4, 800a16c <_malloc_r+0x90>
 800a114:	4629      	mov	r1, r5
 800a116:	4638      	mov	r0, r7
 800a118:	f7ff ffc0 	bl	800a09c <sbrk_aligned>
 800a11c:	1c43      	adds	r3, r0, #1
 800a11e:	4604      	mov	r4, r0
 800a120:	d155      	bne.n	800a1ce <_malloc_r+0xf2>
 800a122:	f8d8 4000 	ldr.w	r4, [r8]
 800a126:	4626      	mov	r6, r4
 800a128:	2e00      	cmp	r6, #0
 800a12a:	d145      	bne.n	800a1b8 <_malloc_r+0xdc>
 800a12c:	2c00      	cmp	r4, #0
 800a12e:	d048      	beq.n	800a1c2 <_malloc_r+0xe6>
 800a130:	6823      	ldr	r3, [r4, #0]
 800a132:	4631      	mov	r1, r6
 800a134:	4638      	mov	r0, r7
 800a136:	eb04 0903 	add.w	r9, r4, r3
 800a13a:	f000 fa95 	bl	800a668 <_sbrk_r>
 800a13e:	4581      	cmp	r9, r0
 800a140:	d13f      	bne.n	800a1c2 <_malloc_r+0xe6>
 800a142:	6821      	ldr	r1, [r4, #0]
 800a144:	4638      	mov	r0, r7
 800a146:	1a6d      	subs	r5, r5, r1
 800a148:	4629      	mov	r1, r5
 800a14a:	f7ff ffa7 	bl	800a09c <sbrk_aligned>
 800a14e:	3001      	adds	r0, #1
 800a150:	d037      	beq.n	800a1c2 <_malloc_r+0xe6>
 800a152:	6823      	ldr	r3, [r4, #0]
 800a154:	442b      	add	r3, r5
 800a156:	6023      	str	r3, [r4, #0]
 800a158:	f8d8 3000 	ldr.w	r3, [r8]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d038      	beq.n	800a1d2 <_malloc_r+0xf6>
 800a160:	685a      	ldr	r2, [r3, #4]
 800a162:	42a2      	cmp	r2, r4
 800a164:	d12b      	bne.n	800a1be <_malloc_r+0xe2>
 800a166:	2200      	movs	r2, #0
 800a168:	605a      	str	r2, [r3, #4]
 800a16a:	e00f      	b.n	800a18c <_malloc_r+0xb0>
 800a16c:	6822      	ldr	r2, [r4, #0]
 800a16e:	1b52      	subs	r2, r2, r5
 800a170:	d41f      	bmi.n	800a1b2 <_malloc_r+0xd6>
 800a172:	2a0b      	cmp	r2, #11
 800a174:	d917      	bls.n	800a1a6 <_malloc_r+0xca>
 800a176:	1961      	adds	r1, r4, r5
 800a178:	42a3      	cmp	r3, r4
 800a17a:	6025      	str	r5, [r4, #0]
 800a17c:	bf18      	it	ne
 800a17e:	6059      	strne	r1, [r3, #4]
 800a180:	6863      	ldr	r3, [r4, #4]
 800a182:	bf08      	it	eq
 800a184:	f8c8 1000 	streq.w	r1, [r8]
 800a188:	5162      	str	r2, [r4, r5]
 800a18a:	604b      	str	r3, [r1, #4]
 800a18c:	f104 060b 	add.w	r6, r4, #11
 800a190:	4638      	mov	r0, r7
 800a192:	f000 f829 	bl	800a1e8 <__malloc_unlock>
 800a196:	1d23      	adds	r3, r4, #4
 800a198:	f026 0607 	bic.w	r6, r6, #7
 800a19c:	1af2      	subs	r2, r6, r3
 800a19e:	d0ae      	beq.n	800a0fe <_malloc_r+0x22>
 800a1a0:	1b9b      	subs	r3, r3, r6
 800a1a2:	50a3      	str	r3, [r4, r2]
 800a1a4:	e7ab      	b.n	800a0fe <_malloc_r+0x22>
 800a1a6:	42a3      	cmp	r3, r4
 800a1a8:	6862      	ldr	r2, [r4, #4]
 800a1aa:	d1dd      	bne.n	800a168 <_malloc_r+0x8c>
 800a1ac:	f8c8 2000 	str.w	r2, [r8]
 800a1b0:	e7ec      	b.n	800a18c <_malloc_r+0xb0>
 800a1b2:	4623      	mov	r3, r4
 800a1b4:	6864      	ldr	r4, [r4, #4]
 800a1b6:	e7ac      	b.n	800a112 <_malloc_r+0x36>
 800a1b8:	4634      	mov	r4, r6
 800a1ba:	6876      	ldr	r6, [r6, #4]
 800a1bc:	e7b4      	b.n	800a128 <_malloc_r+0x4c>
 800a1be:	4613      	mov	r3, r2
 800a1c0:	e7cc      	b.n	800a15c <_malloc_r+0x80>
 800a1c2:	230c      	movs	r3, #12
 800a1c4:	4638      	mov	r0, r7
 800a1c6:	603b      	str	r3, [r7, #0]
 800a1c8:	f000 f80e 	bl	800a1e8 <__malloc_unlock>
 800a1cc:	e797      	b.n	800a0fe <_malloc_r+0x22>
 800a1ce:	6025      	str	r5, [r4, #0]
 800a1d0:	e7dc      	b.n	800a18c <_malloc_r+0xb0>
 800a1d2:	605b      	str	r3, [r3, #4]
 800a1d4:	deff      	udf	#255	; 0xff
 800a1d6:	bf00      	nop
 800a1d8:	20006a84 	.word	0x20006a84

0800a1dc <__malloc_lock>:
 800a1dc:	4801      	ldr	r0, [pc, #4]	; (800a1e4 <__malloc_lock+0x8>)
 800a1de:	f000 ba8f 	b.w	800a700 <__retarget_lock_acquire_recursive>
 800a1e2:	bf00      	nop
 800a1e4:	20006bcc 	.word	0x20006bcc

0800a1e8 <__malloc_unlock>:
 800a1e8:	4801      	ldr	r0, [pc, #4]	; (800a1f0 <__malloc_unlock+0x8>)
 800a1ea:	f000 ba8a 	b.w	800a702 <__retarget_lock_release_recursive>
 800a1ee:	bf00      	nop
 800a1f0:	20006bcc 	.word	0x20006bcc

0800a1f4 <std>:
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	b510      	push	{r4, lr}
 800a1f8:	4604      	mov	r4, r0
 800a1fa:	6083      	str	r3, [r0, #8]
 800a1fc:	8181      	strh	r1, [r0, #12]
 800a1fe:	4619      	mov	r1, r3
 800a200:	6643      	str	r3, [r0, #100]	; 0x64
 800a202:	81c2      	strh	r2, [r0, #14]
 800a204:	2208      	movs	r2, #8
 800a206:	6183      	str	r3, [r0, #24]
 800a208:	e9c0 3300 	strd	r3, r3, [r0]
 800a20c:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a210:	305c      	adds	r0, #92	; 0x5c
 800a212:	f000 f9ed 	bl	800a5f0 <memset>
 800a216:	4b05      	ldr	r3, [pc, #20]	; (800a22c <std+0x38>)
 800a218:	6224      	str	r4, [r4, #32]
 800a21a:	6263      	str	r3, [r4, #36]	; 0x24
 800a21c:	4b04      	ldr	r3, [pc, #16]	; (800a230 <std+0x3c>)
 800a21e:	62a3      	str	r3, [r4, #40]	; 0x28
 800a220:	4b04      	ldr	r3, [pc, #16]	; (800a234 <std+0x40>)
 800a222:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a224:	4b04      	ldr	r3, [pc, #16]	; (800a238 <std+0x44>)
 800a226:	6323      	str	r3, [r4, #48]	; 0x30
 800a228:	bd10      	pop	{r4, pc}
 800a22a:	bf00      	nop
 800a22c:	0800a441 	.word	0x0800a441
 800a230:	0800a463 	.word	0x0800a463
 800a234:	0800a49b 	.word	0x0800a49b
 800a238:	0800a4bf 	.word	0x0800a4bf

0800a23c <stdio_exit_handler>:
 800a23c:	4a02      	ldr	r2, [pc, #8]	; (800a248 <stdio_exit_handler+0xc>)
 800a23e:	4903      	ldr	r1, [pc, #12]	; (800a24c <stdio_exit_handler+0x10>)
 800a240:	4803      	ldr	r0, [pc, #12]	; (800a250 <stdio_exit_handler+0x14>)
 800a242:	f000 b869 	b.w	800a318 <_fwalk_sglue>
 800a246:	bf00      	nop
 800a248:	20000028 	.word	0x20000028
 800a24c:	0800ae6d 	.word	0x0800ae6d
 800a250:	20000034 	.word	0x20000034

0800a254 <cleanup_stdio>:
 800a254:	6841      	ldr	r1, [r0, #4]
 800a256:	4b0c      	ldr	r3, [pc, #48]	; (800a288 <cleanup_stdio+0x34>)
 800a258:	4299      	cmp	r1, r3
 800a25a:	b510      	push	{r4, lr}
 800a25c:	4604      	mov	r4, r0
 800a25e:	d001      	beq.n	800a264 <cleanup_stdio+0x10>
 800a260:	f000 fe04 	bl	800ae6c <_fflush_r>
 800a264:	68a1      	ldr	r1, [r4, #8]
 800a266:	4b09      	ldr	r3, [pc, #36]	; (800a28c <cleanup_stdio+0x38>)
 800a268:	4299      	cmp	r1, r3
 800a26a:	d002      	beq.n	800a272 <cleanup_stdio+0x1e>
 800a26c:	4620      	mov	r0, r4
 800a26e:	f000 fdfd 	bl	800ae6c <_fflush_r>
 800a272:	68e1      	ldr	r1, [r4, #12]
 800a274:	4b06      	ldr	r3, [pc, #24]	; (800a290 <cleanup_stdio+0x3c>)
 800a276:	4299      	cmp	r1, r3
 800a278:	d004      	beq.n	800a284 <cleanup_stdio+0x30>
 800a27a:	4620      	mov	r0, r4
 800a27c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a280:	f000 bdf4 	b.w	800ae6c <_fflush_r>
 800a284:	bd10      	pop	{r4, pc}
 800a286:	bf00      	nop
 800a288:	20006a8c 	.word	0x20006a8c
 800a28c:	20006af4 	.word	0x20006af4
 800a290:	20006b5c 	.word	0x20006b5c

0800a294 <global_stdio_init.part.0>:
 800a294:	b510      	push	{r4, lr}
 800a296:	4b0b      	ldr	r3, [pc, #44]	; (800a2c4 <global_stdio_init.part.0+0x30>)
 800a298:	2104      	movs	r1, #4
 800a29a:	4c0b      	ldr	r4, [pc, #44]	; (800a2c8 <global_stdio_init.part.0+0x34>)
 800a29c:	4a0b      	ldr	r2, [pc, #44]	; (800a2cc <global_stdio_init.part.0+0x38>)
 800a29e:	4620      	mov	r0, r4
 800a2a0:	601a      	str	r2, [r3, #0]
 800a2a2:	2200      	movs	r2, #0
 800a2a4:	f7ff ffa6 	bl	800a1f4 <std>
 800a2a8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800a2ac:	2201      	movs	r2, #1
 800a2ae:	2109      	movs	r1, #9
 800a2b0:	f7ff ffa0 	bl	800a1f4 <std>
 800a2b4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800a2b8:	2202      	movs	r2, #2
 800a2ba:	2112      	movs	r1, #18
 800a2bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a2c0:	f7ff bf98 	b.w	800a1f4 <std>
 800a2c4:	20006bc4 	.word	0x20006bc4
 800a2c8:	20006a8c 	.word	0x20006a8c
 800a2cc:	0800a23d 	.word	0x0800a23d

0800a2d0 <__sfp_lock_acquire>:
 800a2d0:	4801      	ldr	r0, [pc, #4]	; (800a2d8 <__sfp_lock_acquire+0x8>)
 800a2d2:	f000 ba15 	b.w	800a700 <__retarget_lock_acquire_recursive>
 800a2d6:	bf00      	nop
 800a2d8:	20006bcd 	.word	0x20006bcd

0800a2dc <__sfp_lock_release>:
 800a2dc:	4801      	ldr	r0, [pc, #4]	; (800a2e4 <__sfp_lock_release+0x8>)
 800a2de:	f000 ba10 	b.w	800a702 <__retarget_lock_release_recursive>
 800a2e2:	bf00      	nop
 800a2e4:	20006bcd 	.word	0x20006bcd

0800a2e8 <__sinit>:
 800a2e8:	b510      	push	{r4, lr}
 800a2ea:	4604      	mov	r4, r0
 800a2ec:	f7ff fff0 	bl	800a2d0 <__sfp_lock_acquire>
 800a2f0:	6a23      	ldr	r3, [r4, #32]
 800a2f2:	b11b      	cbz	r3, 800a2fc <__sinit+0x14>
 800a2f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a2f8:	f7ff bff0 	b.w	800a2dc <__sfp_lock_release>
 800a2fc:	4b04      	ldr	r3, [pc, #16]	; (800a310 <__sinit+0x28>)
 800a2fe:	6223      	str	r3, [r4, #32]
 800a300:	4b04      	ldr	r3, [pc, #16]	; (800a314 <__sinit+0x2c>)
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	2b00      	cmp	r3, #0
 800a306:	d1f5      	bne.n	800a2f4 <__sinit+0xc>
 800a308:	f7ff ffc4 	bl	800a294 <global_stdio_init.part.0>
 800a30c:	e7f2      	b.n	800a2f4 <__sinit+0xc>
 800a30e:	bf00      	nop
 800a310:	0800a255 	.word	0x0800a255
 800a314:	20006bc4 	.word	0x20006bc4

0800a318 <_fwalk_sglue>:
 800a318:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a31c:	4607      	mov	r7, r0
 800a31e:	4688      	mov	r8, r1
 800a320:	4614      	mov	r4, r2
 800a322:	2600      	movs	r6, #0
 800a324:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a328:	f1b9 0901 	subs.w	r9, r9, #1
 800a32c:	d505      	bpl.n	800a33a <_fwalk_sglue+0x22>
 800a32e:	6824      	ldr	r4, [r4, #0]
 800a330:	2c00      	cmp	r4, #0
 800a332:	d1f7      	bne.n	800a324 <_fwalk_sglue+0xc>
 800a334:	4630      	mov	r0, r6
 800a336:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a33a:	89ab      	ldrh	r3, [r5, #12]
 800a33c:	2b01      	cmp	r3, #1
 800a33e:	d907      	bls.n	800a350 <_fwalk_sglue+0x38>
 800a340:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a344:	3301      	adds	r3, #1
 800a346:	d003      	beq.n	800a350 <_fwalk_sglue+0x38>
 800a348:	4629      	mov	r1, r5
 800a34a:	4638      	mov	r0, r7
 800a34c:	47c0      	blx	r8
 800a34e:	4306      	orrs	r6, r0
 800a350:	3568      	adds	r5, #104	; 0x68
 800a352:	e7e9      	b.n	800a328 <_fwalk_sglue+0x10>

0800a354 <iprintf>:
 800a354:	b40f      	push	{r0, r1, r2, r3}
 800a356:	b507      	push	{r0, r1, r2, lr}
 800a358:	4906      	ldr	r1, [pc, #24]	; (800a374 <iprintf+0x20>)
 800a35a:	ab04      	add	r3, sp, #16
 800a35c:	6808      	ldr	r0, [r1, #0]
 800a35e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a362:	6881      	ldr	r1, [r0, #8]
 800a364:	9301      	str	r3, [sp, #4]
 800a366:	f000 fa51 	bl	800a80c <_vfiprintf_r>
 800a36a:	b003      	add	sp, #12
 800a36c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a370:	b004      	add	sp, #16
 800a372:	4770      	bx	lr
 800a374:	20000080 	.word	0x20000080

0800a378 <putchar>:
 800a378:	4b02      	ldr	r3, [pc, #8]	; (800a384 <putchar+0xc>)
 800a37a:	4601      	mov	r1, r0
 800a37c:	6818      	ldr	r0, [r3, #0]
 800a37e:	6882      	ldr	r2, [r0, #8]
 800a380:	f000 bdfd 	b.w	800af7e <_putc_r>
 800a384:	20000080 	.word	0x20000080

0800a388 <_puts_r>:
 800a388:	6a03      	ldr	r3, [r0, #32]
 800a38a:	b570      	push	{r4, r5, r6, lr}
 800a38c:	4605      	mov	r5, r0
 800a38e:	460e      	mov	r6, r1
 800a390:	6884      	ldr	r4, [r0, #8]
 800a392:	b90b      	cbnz	r3, 800a398 <_puts_r+0x10>
 800a394:	f7ff ffa8 	bl	800a2e8 <__sinit>
 800a398:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a39a:	07db      	lsls	r3, r3, #31
 800a39c:	d405      	bmi.n	800a3aa <_puts_r+0x22>
 800a39e:	89a3      	ldrh	r3, [r4, #12]
 800a3a0:	0598      	lsls	r0, r3, #22
 800a3a2:	d402      	bmi.n	800a3aa <_puts_r+0x22>
 800a3a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a3a6:	f000 f9ab 	bl	800a700 <__retarget_lock_acquire_recursive>
 800a3aa:	89a3      	ldrh	r3, [r4, #12]
 800a3ac:	0719      	lsls	r1, r3, #28
 800a3ae:	d513      	bpl.n	800a3d8 <_puts_r+0x50>
 800a3b0:	6923      	ldr	r3, [r4, #16]
 800a3b2:	b18b      	cbz	r3, 800a3d8 <_puts_r+0x50>
 800a3b4:	3e01      	subs	r6, #1
 800a3b6:	68a3      	ldr	r3, [r4, #8]
 800a3b8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a3bc:	3b01      	subs	r3, #1
 800a3be:	60a3      	str	r3, [r4, #8]
 800a3c0:	b9e9      	cbnz	r1, 800a3fe <_puts_r+0x76>
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	da2e      	bge.n	800a424 <_puts_r+0x9c>
 800a3c6:	4622      	mov	r2, r4
 800a3c8:	210a      	movs	r1, #10
 800a3ca:	4628      	mov	r0, r5
 800a3cc:	f000 f87b 	bl	800a4c6 <__swbuf_r>
 800a3d0:	3001      	adds	r0, #1
 800a3d2:	d007      	beq.n	800a3e4 <_puts_r+0x5c>
 800a3d4:	250a      	movs	r5, #10
 800a3d6:	e007      	b.n	800a3e8 <_puts_r+0x60>
 800a3d8:	4621      	mov	r1, r4
 800a3da:	4628      	mov	r0, r5
 800a3dc:	f000 f8b0 	bl	800a540 <__swsetup_r>
 800a3e0:	2800      	cmp	r0, #0
 800a3e2:	d0e7      	beq.n	800a3b4 <_puts_r+0x2c>
 800a3e4:	f04f 35ff 	mov.w	r5, #4294967295
 800a3e8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a3ea:	07da      	lsls	r2, r3, #31
 800a3ec:	d405      	bmi.n	800a3fa <_puts_r+0x72>
 800a3ee:	89a3      	ldrh	r3, [r4, #12]
 800a3f0:	059b      	lsls	r3, r3, #22
 800a3f2:	d402      	bmi.n	800a3fa <_puts_r+0x72>
 800a3f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a3f6:	f000 f984 	bl	800a702 <__retarget_lock_release_recursive>
 800a3fa:	4628      	mov	r0, r5
 800a3fc:	bd70      	pop	{r4, r5, r6, pc}
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	da04      	bge.n	800a40c <_puts_r+0x84>
 800a402:	69a2      	ldr	r2, [r4, #24]
 800a404:	429a      	cmp	r2, r3
 800a406:	dc06      	bgt.n	800a416 <_puts_r+0x8e>
 800a408:	290a      	cmp	r1, #10
 800a40a:	d004      	beq.n	800a416 <_puts_r+0x8e>
 800a40c:	6823      	ldr	r3, [r4, #0]
 800a40e:	1c5a      	adds	r2, r3, #1
 800a410:	6022      	str	r2, [r4, #0]
 800a412:	7019      	strb	r1, [r3, #0]
 800a414:	e7cf      	b.n	800a3b6 <_puts_r+0x2e>
 800a416:	4622      	mov	r2, r4
 800a418:	4628      	mov	r0, r5
 800a41a:	f000 f854 	bl	800a4c6 <__swbuf_r>
 800a41e:	3001      	adds	r0, #1
 800a420:	d1c9      	bne.n	800a3b6 <_puts_r+0x2e>
 800a422:	e7df      	b.n	800a3e4 <_puts_r+0x5c>
 800a424:	6823      	ldr	r3, [r4, #0]
 800a426:	250a      	movs	r5, #10
 800a428:	1c5a      	adds	r2, r3, #1
 800a42a:	6022      	str	r2, [r4, #0]
 800a42c:	701d      	strb	r5, [r3, #0]
 800a42e:	e7db      	b.n	800a3e8 <_puts_r+0x60>

0800a430 <puts>:
 800a430:	4b02      	ldr	r3, [pc, #8]	; (800a43c <puts+0xc>)
 800a432:	4601      	mov	r1, r0
 800a434:	6818      	ldr	r0, [r3, #0]
 800a436:	f7ff bfa7 	b.w	800a388 <_puts_r>
 800a43a:	bf00      	nop
 800a43c:	20000080 	.word	0x20000080

0800a440 <__sread>:
 800a440:	b510      	push	{r4, lr}
 800a442:	460c      	mov	r4, r1
 800a444:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a448:	f000 f8fc 	bl	800a644 <_read_r>
 800a44c:	2800      	cmp	r0, #0
 800a44e:	bfab      	itete	ge
 800a450:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a452:	89a3      	ldrhlt	r3, [r4, #12]
 800a454:	181b      	addge	r3, r3, r0
 800a456:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a45a:	bfac      	ite	ge
 800a45c:	6563      	strge	r3, [r4, #84]	; 0x54
 800a45e:	81a3      	strhlt	r3, [r4, #12]
 800a460:	bd10      	pop	{r4, pc}

0800a462 <__swrite>:
 800a462:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a466:	461f      	mov	r7, r3
 800a468:	898b      	ldrh	r3, [r1, #12]
 800a46a:	4605      	mov	r5, r0
 800a46c:	460c      	mov	r4, r1
 800a46e:	05db      	lsls	r3, r3, #23
 800a470:	4616      	mov	r6, r2
 800a472:	d505      	bpl.n	800a480 <__swrite+0x1e>
 800a474:	2302      	movs	r3, #2
 800a476:	2200      	movs	r2, #0
 800a478:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a47c:	f000 f8d0 	bl	800a620 <_lseek_r>
 800a480:	89a3      	ldrh	r3, [r4, #12]
 800a482:	4632      	mov	r2, r6
 800a484:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a488:	4628      	mov	r0, r5
 800a48a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a48e:	81a3      	strh	r3, [r4, #12]
 800a490:	463b      	mov	r3, r7
 800a492:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a496:	f000 b8f7 	b.w	800a688 <_write_r>

0800a49a <__sseek>:
 800a49a:	b510      	push	{r4, lr}
 800a49c:	460c      	mov	r4, r1
 800a49e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4a2:	f000 f8bd 	bl	800a620 <_lseek_r>
 800a4a6:	1c43      	adds	r3, r0, #1
 800a4a8:	89a3      	ldrh	r3, [r4, #12]
 800a4aa:	bf15      	itete	ne
 800a4ac:	6560      	strne	r0, [r4, #84]	; 0x54
 800a4ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a4b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a4b6:	81a3      	strheq	r3, [r4, #12]
 800a4b8:	bf18      	it	ne
 800a4ba:	81a3      	strhne	r3, [r4, #12]
 800a4bc:	bd10      	pop	{r4, pc}

0800a4be <__sclose>:
 800a4be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4c2:	f000 b89d 	b.w	800a600 <_close_r>

0800a4c6 <__swbuf_r>:
 800a4c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4c8:	460e      	mov	r6, r1
 800a4ca:	4614      	mov	r4, r2
 800a4cc:	4605      	mov	r5, r0
 800a4ce:	b118      	cbz	r0, 800a4d8 <__swbuf_r+0x12>
 800a4d0:	6a03      	ldr	r3, [r0, #32]
 800a4d2:	b90b      	cbnz	r3, 800a4d8 <__swbuf_r+0x12>
 800a4d4:	f7ff ff08 	bl	800a2e8 <__sinit>
 800a4d8:	69a3      	ldr	r3, [r4, #24]
 800a4da:	60a3      	str	r3, [r4, #8]
 800a4dc:	89a3      	ldrh	r3, [r4, #12]
 800a4de:	071a      	lsls	r2, r3, #28
 800a4e0:	d525      	bpl.n	800a52e <__swbuf_r+0x68>
 800a4e2:	6923      	ldr	r3, [r4, #16]
 800a4e4:	b31b      	cbz	r3, 800a52e <__swbuf_r+0x68>
 800a4e6:	6823      	ldr	r3, [r4, #0]
 800a4e8:	b2f6      	uxtb	r6, r6
 800a4ea:	6922      	ldr	r2, [r4, #16]
 800a4ec:	4637      	mov	r7, r6
 800a4ee:	1a98      	subs	r0, r3, r2
 800a4f0:	6963      	ldr	r3, [r4, #20]
 800a4f2:	4283      	cmp	r3, r0
 800a4f4:	dc04      	bgt.n	800a500 <__swbuf_r+0x3a>
 800a4f6:	4621      	mov	r1, r4
 800a4f8:	4628      	mov	r0, r5
 800a4fa:	f000 fcb7 	bl	800ae6c <_fflush_r>
 800a4fe:	b9e0      	cbnz	r0, 800a53a <__swbuf_r+0x74>
 800a500:	68a3      	ldr	r3, [r4, #8]
 800a502:	3b01      	subs	r3, #1
 800a504:	60a3      	str	r3, [r4, #8]
 800a506:	6823      	ldr	r3, [r4, #0]
 800a508:	1c5a      	adds	r2, r3, #1
 800a50a:	6022      	str	r2, [r4, #0]
 800a50c:	701e      	strb	r6, [r3, #0]
 800a50e:	1c43      	adds	r3, r0, #1
 800a510:	6962      	ldr	r2, [r4, #20]
 800a512:	429a      	cmp	r2, r3
 800a514:	d004      	beq.n	800a520 <__swbuf_r+0x5a>
 800a516:	89a3      	ldrh	r3, [r4, #12]
 800a518:	07db      	lsls	r3, r3, #31
 800a51a:	d506      	bpl.n	800a52a <__swbuf_r+0x64>
 800a51c:	2e0a      	cmp	r6, #10
 800a51e:	d104      	bne.n	800a52a <__swbuf_r+0x64>
 800a520:	4621      	mov	r1, r4
 800a522:	4628      	mov	r0, r5
 800a524:	f000 fca2 	bl	800ae6c <_fflush_r>
 800a528:	b938      	cbnz	r0, 800a53a <__swbuf_r+0x74>
 800a52a:	4638      	mov	r0, r7
 800a52c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a52e:	4621      	mov	r1, r4
 800a530:	4628      	mov	r0, r5
 800a532:	f000 f805 	bl	800a540 <__swsetup_r>
 800a536:	2800      	cmp	r0, #0
 800a538:	d0d5      	beq.n	800a4e6 <__swbuf_r+0x20>
 800a53a:	f04f 37ff 	mov.w	r7, #4294967295
 800a53e:	e7f4      	b.n	800a52a <__swbuf_r+0x64>

0800a540 <__swsetup_r>:
 800a540:	b538      	push	{r3, r4, r5, lr}
 800a542:	4b2a      	ldr	r3, [pc, #168]	; (800a5ec <__swsetup_r+0xac>)
 800a544:	4605      	mov	r5, r0
 800a546:	460c      	mov	r4, r1
 800a548:	6818      	ldr	r0, [r3, #0]
 800a54a:	b118      	cbz	r0, 800a554 <__swsetup_r+0x14>
 800a54c:	6a03      	ldr	r3, [r0, #32]
 800a54e:	b90b      	cbnz	r3, 800a554 <__swsetup_r+0x14>
 800a550:	f7ff feca 	bl	800a2e8 <__sinit>
 800a554:	89a3      	ldrh	r3, [r4, #12]
 800a556:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a55a:	0718      	lsls	r0, r3, #28
 800a55c:	d422      	bmi.n	800a5a4 <__swsetup_r+0x64>
 800a55e:	06d9      	lsls	r1, r3, #27
 800a560:	d407      	bmi.n	800a572 <__swsetup_r+0x32>
 800a562:	2309      	movs	r3, #9
 800a564:	602b      	str	r3, [r5, #0]
 800a566:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a56a:	f04f 30ff 	mov.w	r0, #4294967295
 800a56e:	81a3      	strh	r3, [r4, #12]
 800a570:	e034      	b.n	800a5dc <__swsetup_r+0x9c>
 800a572:	0758      	lsls	r0, r3, #29
 800a574:	d512      	bpl.n	800a59c <__swsetup_r+0x5c>
 800a576:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a578:	b141      	cbz	r1, 800a58c <__swsetup_r+0x4c>
 800a57a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a57e:	4299      	cmp	r1, r3
 800a580:	d002      	beq.n	800a588 <__swsetup_r+0x48>
 800a582:	4628      	mov	r0, r5
 800a584:	f000 f8cc 	bl	800a720 <_free_r>
 800a588:	2300      	movs	r3, #0
 800a58a:	6363      	str	r3, [r4, #52]	; 0x34
 800a58c:	89a3      	ldrh	r3, [r4, #12]
 800a58e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a592:	81a3      	strh	r3, [r4, #12]
 800a594:	2300      	movs	r3, #0
 800a596:	6063      	str	r3, [r4, #4]
 800a598:	6923      	ldr	r3, [r4, #16]
 800a59a:	6023      	str	r3, [r4, #0]
 800a59c:	89a3      	ldrh	r3, [r4, #12]
 800a59e:	f043 0308 	orr.w	r3, r3, #8
 800a5a2:	81a3      	strh	r3, [r4, #12]
 800a5a4:	6923      	ldr	r3, [r4, #16]
 800a5a6:	b94b      	cbnz	r3, 800a5bc <__swsetup_r+0x7c>
 800a5a8:	89a3      	ldrh	r3, [r4, #12]
 800a5aa:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a5ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a5b2:	d003      	beq.n	800a5bc <__swsetup_r+0x7c>
 800a5b4:	4621      	mov	r1, r4
 800a5b6:	4628      	mov	r0, r5
 800a5b8:	f000 fca5 	bl	800af06 <__smakebuf_r>
 800a5bc:	89a0      	ldrh	r0, [r4, #12]
 800a5be:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a5c2:	f010 0301 	ands.w	r3, r0, #1
 800a5c6:	d00a      	beq.n	800a5de <__swsetup_r+0x9e>
 800a5c8:	2300      	movs	r3, #0
 800a5ca:	60a3      	str	r3, [r4, #8]
 800a5cc:	6963      	ldr	r3, [r4, #20]
 800a5ce:	425b      	negs	r3, r3
 800a5d0:	61a3      	str	r3, [r4, #24]
 800a5d2:	6923      	ldr	r3, [r4, #16]
 800a5d4:	b943      	cbnz	r3, 800a5e8 <__swsetup_r+0xa8>
 800a5d6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a5da:	d1c4      	bne.n	800a566 <__swsetup_r+0x26>
 800a5dc:	bd38      	pop	{r3, r4, r5, pc}
 800a5de:	0781      	lsls	r1, r0, #30
 800a5e0:	bf58      	it	pl
 800a5e2:	6963      	ldrpl	r3, [r4, #20]
 800a5e4:	60a3      	str	r3, [r4, #8]
 800a5e6:	e7f4      	b.n	800a5d2 <__swsetup_r+0x92>
 800a5e8:	2000      	movs	r0, #0
 800a5ea:	e7f7      	b.n	800a5dc <__swsetup_r+0x9c>
 800a5ec:	20000080 	.word	0x20000080

0800a5f0 <memset>:
 800a5f0:	4402      	add	r2, r0
 800a5f2:	4603      	mov	r3, r0
 800a5f4:	4293      	cmp	r3, r2
 800a5f6:	d100      	bne.n	800a5fa <memset+0xa>
 800a5f8:	4770      	bx	lr
 800a5fa:	f803 1b01 	strb.w	r1, [r3], #1
 800a5fe:	e7f9      	b.n	800a5f4 <memset+0x4>

0800a600 <_close_r>:
 800a600:	b538      	push	{r3, r4, r5, lr}
 800a602:	2300      	movs	r3, #0
 800a604:	4d05      	ldr	r5, [pc, #20]	; (800a61c <_close_r+0x1c>)
 800a606:	4604      	mov	r4, r0
 800a608:	4608      	mov	r0, r1
 800a60a:	602b      	str	r3, [r5, #0]
 800a60c:	f7ff f903 	bl	8009816 <_close>
 800a610:	1c43      	adds	r3, r0, #1
 800a612:	d102      	bne.n	800a61a <_close_r+0x1a>
 800a614:	682b      	ldr	r3, [r5, #0]
 800a616:	b103      	cbz	r3, 800a61a <_close_r+0x1a>
 800a618:	6023      	str	r3, [r4, #0]
 800a61a:	bd38      	pop	{r3, r4, r5, pc}
 800a61c:	20006bc8 	.word	0x20006bc8

0800a620 <_lseek_r>:
 800a620:	b538      	push	{r3, r4, r5, lr}
 800a622:	4604      	mov	r4, r0
 800a624:	4d06      	ldr	r5, [pc, #24]	; (800a640 <_lseek_r+0x20>)
 800a626:	4608      	mov	r0, r1
 800a628:	4611      	mov	r1, r2
 800a62a:	2200      	movs	r2, #0
 800a62c:	602a      	str	r2, [r5, #0]
 800a62e:	461a      	mov	r2, r3
 800a630:	f7ff f918 	bl	8009864 <_lseek>
 800a634:	1c43      	adds	r3, r0, #1
 800a636:	d102      	bne.n	800a63e <_lseek_r+0x1e>
 800a638:	682b      	ldr	r3, [r5, #0]
 800a63a:	b103      	cbz	r3, 800a63e <_lseek_r+0x1e>
 800a63c:	6023      	str	r3, [r4, #0]
 800a63e:	bd38      	pop	{r3, r4, r5, pc}
 800a640:	20006bc8 	.word	0x20006bc8

0800a644 <_read_r>:
 800a644:	b538      	push	{r3, r4, r5, lr}
 800a646:	4604      	mov	r4, r0
 800a648:	4d06      	ldr	r5, [pc, #24]	; (800a664 <_read_r+0x20>)
 800a64a:	4608      	mov	r0, r1
 800a64c:	4611      	mov	r1, r2
 800a64e:	2200      	movs	r2, #0
 800a650:	602a      	str	r2, [r5, #0]
 800a652:	461a      	mov	r2, r3
 800a654:	f7ff f8a6 	bl	80097a4 <_read>
 800a658:	1c43      	adds	r3, r0, #1
 800a65a:	d102      	bne.n	800a662 <_read_r+0x1e>
 800a65c:	682b      	ldr	r3, [r5, #0]
 800a65e:	b103      	cbz	r3, 800a662 <_read_r+0x1e>
 800a660:	6023      	str	r3, [r4, #0]
 800a662:	bd38      	pop	{r3, r4, r5, pc}
 800a664:	20006bc8 	.word	0x20006bc8

0800a668 <_sbrk_r>:
 800a668:	b538      	push	{r3, r4, r5, lr}
 800a66a:	2300      	movs	r3, #0
 800a66c:	4d05      	ldr	r5, [pc, #20]	; (800a684 <_sbrk_r+0x1c>)
 800a66e:	4604      	mov	r4, r0
 800a670:	4608      	mov	r0, r1
 800a672:	602b      	str	r3, [r5, #0]
 800a674:	f7ff f904 	bl	8009880 <_sbrk>
 800a678:	1c43      	adds	r3, r0, #1
 800a67a:	d102      	bne.n	800a682 <_sbrk_r+0x1a>
 800a67c:	682b      	ldr	r3, [r5, #0]
 800a67e:	b103      	cbz	r3, 800a682 <_sbrk_r+0x1a>
 800a680:	6023      	str	r3, [r4, #0]
 800a682:	bd38      	pop	{r3, r4, r5, pc}
 800a684:	20006bc8 	.word	0x20006bc8

0800a688 <_write_r>:
 800a688:	b538      	push	{r3, r4, r5, lr}
 800a68a:	4604      	mov	r4, r0
 800a68c:	4d06      	ldr	r5, [pc, #24]	; (800a6a8 <_write_r+0x20>)
 800a68e:	4608      	mov	r0, r1
 800a690:	4611      	mov	r1, r2
 800a692:	2200      	movs	r2, #0
 800a694:	602a      	str	r2, [r5, #0]
 800a696:	461a      	mov	r2, r3
 800a698:	f7ff f8a1 	bl	80097de <_write>
 800a69c:	1c43      	adds	r3, r0, #1
 800a69e:	d102      	bne.n	800a6a6 <_write_r+0x1e>
 800a6a0:	682b      	ldr	r3, [r5, #0]
 800a6a2:	b103      	cbz	r3, 800a6a6 <_write_r+0x1e>
 800a6a4:	6023      	str	r3, [r4, #0]
 800a6a6:	bd38      	pop	{r3, r4, r5, pc}
 800a6a8:	20006bc8 	.word	0x20006bc8

0800a6ac <__errno>:
 800a6ac:	4b01      	ldr	r3, [pc, #4]	; (800a6b4 <__errno+0x8>)
 800a6ae:	6818      	ldr	r0, [r3, #0]
 800a6b0:	4770      	bx	lr
 800a6b2:	bf00      	nop
 800a6b4:	20000080 	.word	0x20000080

0800a6b8 <__libc_init_array>:
 800a6b8:	b570      	push	{r4, r5, r6, lr}
 800a6ba:	4d0d      	ldr	r5, [pc, #52]	; (800a6f0 <__libc_init_array+0x38>)
 800a6bc:	2600      	movs	r6, #0
 800a6be:	4c0d      	ldr	r4, [pc, #52]	; (800a6f4 <__libc_init_array+0x3c>)
 800a6c0:	1b64      	subs	r4, r4, r5
 800a6c2:	10a4      	asrs	r4, r4, #2
 800a6c4:	42a6      	cmp	r6, r4
 800a6c6:	d109      	bne.n	800a6dc <__libc_init_array+0x24>
 800a6c8:	4d0b      	ldr	r5, [pc, #44]	; (800a6f8 <__libc_init_array+0x40>)
 800a6ca:	2600      	movs	r6, #0
 800a6cc:	4c0b      	ldr	r4, [pc, #44]	; (800a6fc <__libc_init_array+0x44>)
 800a6ce:	f000 fcbb 	bl	800b048 <_init>
 800a6d2:	1b64      	subs	r4, r4, r5
 800a6d4:	10a4      	asrs	r4, r4, #2
 800a6d6:	42a6      	cmp	r6, r4
 800a6d8:	d105      	bne.n	800a6e6 <__libc_init_array+0x2e>
 800a6da:	bd70      	pop	{r4, r5, r6, pc}
 800a6dc:	f855 3b04 	ldr.w	r3, [r5], #4
 800a6e0:	3601      	adds	r6, #1
 800a6e2:	4798      	blx	r3
 800a6e4:	e7ee      	b.n	800a6c4 <__libc_init_array+0xc>
 800a6e6:	f855 3b04 	ldr.w	r3, [r5], #4
 800a6ea:	3601      	adds	r6, #1
 800a6ec:	4798      	blx	r3
 800a6ee:	e7f2      	b.n	800a6d6 <__libc_init_array+0x1e>
 800a6f0:	0800c45c 	.word	0x0800c45c
 800a6f4:	0800c45c 	.word	0x0800c45c
 800a6f8:	0800c45c 	.word	0x0800c45c
 800a6fc:	0800c460 	.word	0x0800c460

0800a700 <__retarget_lock_acquire_recursive>:
 800a700:	4770      	bx	lr

0800a702 <__retarget_lock_release_recursive>:
 800a702:	4770      	bx	lr

0800a704 <memcpy>:
 800a704:	440a      	add	r2, r1
 800a706:	1e43      	subs	r3, r0, #1
 800a708:	4291      	cmp	r1, r2
 800a70a:	d100      	bne.n	800a70e <memcpy+0xa>
 800a70c:	4770      	bx	lr
 800a70e:	b510      	push	{r4, lr}
 800a710:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a714:	4291      	cmp	r1, r2
 800a716:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a71a:	d1f9      	bne.n	800a710 <memcpy+0xc>
 800a71c:	bd10      	pop	{r4, pc}
	...

0800a720 <_free_r>:
 800a720:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a722:	2900      	cmp	r1, #0
 800a724:	d043      	beq.n	800a7ae <_free_r+0x8e>
 800a726:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a72a:	1f0c      	subs	r4, r1, #4
 800a72c:	9001      	str	r0, [sp, #4]
 800a72e:	2b00      	cmp	r3, #0
 800a730:	bfb8      	it	lt
 800a732:	18e4      	addlt	r4, r4, r3
 800a734:	f7ff fd52 	bl	800a1dc <__malloc_lock>
 800a738:	4a1e      	ldr	r2, [pc, #120]	; (800a7b4 <_free_r+0x94>)
 800a73a:	9801      	ldr	r0, [sp, #4]
 800a73c:	6813      	ldr	r3, [r2, #0]
 800a73e:	b933      	cbnz	r3, 800a74e <_free_r+0x2e>
 800a740:	6063      	str	r3, [r4, #4]
 800a742:	6014      	str	r4, [r2, #0]
 800a744:	b003      	add	sp, #12
 800a746:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a74a:	f7ff bd4d 	b.w	800a1e8 <__malloc_unlock>
 800a74e:	42a3      	cmp	r3, r4
 800a750:	d908      	bls.n	800a764 <_free_r+0x44>
 800a752:	6825      	ldr	r5, [r4, #0]
 800a754:	1961      	adds	r1, r4, r5
 800a756:	428b      	cmp	r3, r1
 800a758:	bf01      	itttt	eq
 800a75a:	6819      	ldreq	r1, [r3, #0]
 800a75c:	685b      	ldreq	r3, [r3, #4]
 800a75e:	1949      	addeq	r1, r1, r5
 800a760:	6021      	streq	r1, [r4, #0]
 800a762:	e7ed      	b.n	800a740 <_free_r+0x20>
 800a764:	461a      	mov	r2, r3
 800a766:	685b      	ldr	r3, [r3, #4]
 800a768:	b10b      	cbz	r3, 800a76e <_free_r+0x4e>
 800a76a:	42a3      	cmp	r3, r4
 800a76c:	d9fa      	bls.n	800a764 <_free_r+0x44>
 800a76e:	6811      	ldr	r1, [r2, #0]
 800a770:	1855      	adds	r5, r2, r1
 800a772:	42a5      	cmp	r5, r4
 800a774:	d10b      	bne.n	800a78e <_free_r+0x6e>
 800a776:	6824      	ldr	r4, [r4, #0]
 800a778:	4421      	add	r1, r4
 800a77a:	1854      	adds	r4, r2, r1
 800a77c:	6011      	str	r1, [r2, #0]
 800a77e:	42a3      	cmp	r3, r4
 800a780:	d1e0      	bne.n	800a744 <_free_r+0x24>
 800a782:	681c      	ldr	r4, [r3, #0]
 800a784:	685b      	ldr	r3, [r3, #4]
 800a786:	440c      	add	r4, r1
 800a788:	6053      	str	r3, [r2, #4]
 800a78a:	6014      	str	r4, [r2, #0]
 800a78c:	e7da      	b.n	800a744 <_free_r+0x24>
 800a78e:	d902      	bls.n	800a796 <_free_r+0x76>
 800a790:	230c      	movs	r3, #12
 800a792:	6003      	str	r3, [r0, #0]
 800a794:	e7d6      	b.n	800a744 <_free_r+0x24>
 800a796:	6825      	ldr	r5, [r4, #0]
 800a798:	1961      	adds	r1, r4, r5
 800a79a:	428b      	cmp	r3, r1
 800a79c:	bf02      	ittt	eq
 800a79e:	6819      	ldreq	r1, [r3, #0]
 800a7a0:	685b      	ldreq	r3, [r3, #4]
 800a7a2:	1949      	addeq	r1, r1, r5
 800a7a4:	6063      	str	r3, [r4, #4]
 800a7a6:	bf08      	it	eq
 800a7a8:	6021      	streq	r1, [r4, #0]
 800a7aa:	6054      	str	r4, [r2, #4]
 800a7ac:	e7ca      	b.n	800a744 <_free_r+0x24>
 800a7ae:	b003      	add	sp, #12
 800a7b0:	bd30      	pop	{r4, r5, pc}
 800a7b2:	bf00      	nop
 800a7b4:	20006a84 	.word	0x20006a84

0800a7b8 <__sfputc_r>:
 800a7b8:	6893      	ldr	r3, [r2, #8]
 800a7ba:	3b01      	subs	r3, #1
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	6093      	str	r3, [r2, #8]
 800a7c0:	b410      	push	{r4}
 800a7c2:	da08      	bge.n	800a7d6 <__sfputc_r+0x1e>
 800a7c4:	6994      	ldr	r4, [r2, #24]
 800a7c6:	42a3      	cmp	r3, r4
 800a7c8:	db01      	blt.n	800a7ce <__sfputc_r+0x16>
 800a7ca:	290a      	cmp	r1, #10
 800a7cc:	d103      	bne.n	800a7d6 <__sfputc_r+0x1e>
 800a7ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a7d2:	f7ff be78 	b.w	800a4c6 <__swbuf_r>
 800a7d6:	6813      	ldr	r3, [r2, #0]
 800a7d8:	1c58      	adds	r0, r3, #1
 800a7da:	6010      	str	r0, [r2, #0]
 800a7dc:	4608      	mov	r0, r1
 800a7de:	7019      	strb	r1, [r3, #0]
 800a7e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a7e4:	4770      	bx	lr

0800a7e6 <__sfputs_r>:
 800a7e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7e8:	4606      	mov	r6, r0
 800a7ea:	460f      	mov	r7, r1
 800a7ec:	4614      	mov	r4, r2
 800a7ee:	18d5      	adds	r5, r2, r3
 800a7f0:	42ac      	cmp	r4, r5
 800a7f2:	d101      	bne.n	800a7f8 <__sfputs_r+0x12>
 800a7f4:	2000      	movs	r0, #0
 800a7f6:	e007      	b.n	800a808 <__sfputs_r+0x22>
 800a7f8:	463a      	mov	r2, r7
 800a7fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7fe:	4630      	mov	r0, r6
 800a800:	f7ff ffda 	bl	800a7b8 <__sfputc_r>
 800a804:	1c43      	adds	r3, r0, #1
 800a806:	d1f3      	bne.n	800a7f0 <__sfputs_r+0xa>
 800a808:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a80c <_vfiprintf_r>:
 800a80c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a810:	460d      	mov	r5, r1
 800a812:	b09d      	sub	sp, #116	; 0x74
 800a814:	4614      	mov	r4, r2
 800a816:	4698      	mov	r8, r3
 800a818:	4606      	mov	r6, r0
 800a81a:	b118      	cbz	r0, 800a824 <_vfiprintf_r+0x18>
 800a81c:	6a03      	ldr	r3, [r0, #32]
 800a81e:	b90b      	cbnz	r3, 800a824 <_vfiprintf_r+0x18>
 800a820:	f7ff fd62 	bl	800a2e8 <__sinit>
 800a824:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a826:	07d9      	lsls	r1, r3, #31
 800a828:	d405      	bmi.n	800a836 <_vfiprintf_r+0x2a>
 800a82a:	89ab      	ldrh	r3, [r5, #12]
 800a82c:	059a      	lsls	r2, r3, #22
 800a82e:	d402      	bmi.n	800a836 <_vfiprintf_r+0x2a>
 800a830:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a832:	f7ff ff65 	bl	800a700 <__retarget_lock_acquire_recursive>
 800a836:	89ab      	ldrh	r3, [r5, #12]
 800a838:	071b      	lsls	r3, r3, #28
 800a83a:	d501      	bpl.n	800a840 <_vfiprintf_r+0x34>
 800a83c:	692b      	ldr	r3, [r5, #16]
 800a83e:	b99b      	cbnz	r3, 800a868 <_vfiprintf_r+0x5c>
 800a840:	4629      	mov	r1, r5
 800a842:	4630      	mov	r0, r6
 800a844:	f7ff fe7c 	bl	800a540 <__swsetup_r>
 800a848:	b170      	cbz	r0, 800a868 <_vfiprintf_r+0x5c>
 800a84a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a84c:	07dc      	lsls	r4, r3, #31
 800a84e:	d504      	bpl.n	800a85a <_vfiprintf_r+0x4e>
 800a850:	f04f 30ff 	mov.w	r0, #4294967295
 800a854:	b01d      	add	sp, #116	; 0x74
 800a856:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a85a:	89ab      	ldrh	r3, [r5, #12]
 800a85c:	0598      	lsls	r0, r3, #22
 800a85e:	d4f7      	bmi.n	800a850 <_vfiprintf_r+0x44>
 800a860:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a862:	f7ff ff4e 	bl	800a702 <__retarget_lock_release_recursive>
 800a866:	e7f3      	b.n	800a850 <_vfiprintf_r+0x44>
 800a868:	2300      	movs	r3, #0
 800a86a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a86e:	f04f 0901 	mov.w	r9, #1
 800a872:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 800aa2c <_vfiprintf_r+0x220>
 800a876:	9309      	str	r3, [sp, #36]	; 0x24
 800a878:	2320      	movs	r3, #32
 800a87a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a87e:	2330      	movs	r3, #48	; 0x30
 800a880:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a884:	4623      	mov	r3, r4
 800a886:	469a      	mov	sl, r3
 800a888:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a88c:	b10a      	cbz	r2, 800a892 <_vfiprintf_r+0x86>
 800a88e:	2a25      	cmp	r2, #37	; 0x25
 800a890:	d1f9      	bne.n	800a886 <_vfiprintf_r+0x7a>
 800a892:	ebba 0b04 	subs.w	fp, sl, r4
 800a896:	d00b      	beq.n	800a8b0 <_vfiprintf_r+0xa4>
 800a898:	465b      	mov	r3, fp
 800a89a:	4622      	mov	r2, r4
 800a89c:	4629      	mov	r1, r5
 800a89e:	4630      	mov	r0, r6
 800a8a0:	f7ff ffa1 	bl	800a7e6 <__sfputs_r>
 800a8a4:	3001      	adds	r0, #1
 800a8a6:	f000 80a9 	beq.w	800a9fc <_vfiprintf_r+0x1f0>
 800a8aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a8ac:	445a      	add	r2, fp
 800a8ae:	9209      	str	r2, [sp, #36]	; 0x24
 800a8b0:	f89a 3000 	ldrb.w	r3, [sl]
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	f000 80a1 	beq.w	800a9fc <_vfiprintf_r+0x1f0>
 800a8ba:	2300      	movs	r3, #0
 800a8bc:	f04f 32ff 	mov.w	r2, #4294967295
 800a8c0:	f10a 0a01 	add.w	sl, sl, #1
 800a8c4:	9304      	str	r3, [sp, #16]
 800a8c6:	9307      	str	r3, [sp, #28]
 800a8c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a8cc:	931a      	str	r3, [sp, #104]	; 0x68
 800a8ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a8d2:	4654      	mov	r4, sl
 800a8d4:	2205      	movs	r2, #5
 800a8d6:	4855      	ldr	r0, [pc, #340]	; (800aa2c <_vfiprintf_r+0x220>)
 800a8d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8dc:	f000 fba6 	bl	800b02c <memchr>
 800a8e0:	9a04      	ldr	r2, [sp, #16]
 800a8e2:	b9d8      	cbnz	r0, 800a91c <_vfiprintf_r+0x110>
 800a8e4:	06d1      	lsls	r1, r2, #27
 800a8e6:	bf44      	itt	mi
 800a8e8:	2320      	movmi	r3, #32
 800a8ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a8ee:	0713      	lsls	r3, r2, #28
 800a8f0:	bf44      	itt	mi
 800a8f2:	232b      	movmi	r3, #43	; 0x2b
 800a8f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a8f8:	f89a 3000 	ldrb.w	r3, [sl]
 800a8fc:	2b2a      	cmp	r3, #42	; 0x2a
 800a8fe:	d015      	beq.n	800a92c <_vfiprintf_r+0x120>
 800a900:	9a07      	ldr	r2, [sp, #28]
 800a902:	4654      	mov	r4, sl
 800a904:	2000      	movs	r0, #0
 800a906:	f04f 0c0a 	mov.w	ip, #10
 800a90a:	4621      	mov	r1, r4
 800a90c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a910:	3b30      	subs	r3, #48	; 0x30
 800a912:	2b09      	cmp	r3, #9
 800a914:	d94d      	bls.n	800a9b2 <_vfiprintf_r+0x1a6>
 800a916:	b1b0      	cbz	r0, 800a946 <_vfiprintf_r+0x13a>
 800a918:	9207      	str	r2, [sp, #28]
 800a91a:	e014      	b.n	800a946 <_vfiprintf_r+0x13a>
 800a91c:	eba0 0308 	sub.w	r3, r0, r8
 800a920:	46a2      	mov	sl, r4
 800a922:	fa09 f303 	lsl.w	r3, r9, r3
 800a926:	4313      	orrs	r3, r2
 800a928:	9304      	str	r3, [sp, #16]
 800a92a:	e7d2      	b.n	800a8d2 <_vfiprintf_r+0xc6>
 800a92c:	9b03      	ldr	r3, [sp, #12]
 800a92e:	1d19      	adds	r1, r3, #4
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	2b00      	cmp	r3, #0
 800a934:	9103      	str	r1, [sp, #12]
 800a936:	bfbb      	ittet	lt
 800a938:	425b      	neglt	r3, r3
 800a93a:	f042 0202 	orrlt.w	r2, r2, #2
 800a93e:	9307      	strge	r3, [sp, #28]
 800a940:	9307      	strlt	r3, [sp, #28]
 800a942:	bfb8      	it	lt
 800a944:	9204      	strlt	r2, [sp, #16]
 800a946:	7823      	ldrb	r3, [r4, #0]
 800a948:	2b2e      	cmp	r3, #46	; 0x2e
 800a94a:	d10c      	bne.n	800a966 <_vfiprintf_r+0x15a>
 800a94c:	7863      	ldrb	r3, [r4, #1]
 800a94e:	2b2a      	cmp	r3, #42	; 0x2a
 800a950:	d134      	bne.n	800a9bc <_vfiprintf_r+0x1b0>
 800a952:	9b03      	ldr	r3, [sp, #12]
 800a954:	3402      	adds	r4, #2
 800a956:	1d1a      	adds	r2, r3, #4
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	9203      	str	r2, [sp, #12]
 800a95e:	bfb8      	it	lt
 800a960:	f04f 33ff 	movlt.w	r3, #4294967295
 800a964:	9305      	str	r3, [sp, #20]
 800a966:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800aa3c <_vfiprintf_r+0x230>
 800a96a:	2203      	movs	r2, #3
 800a96c:	7821      	ldrb	r1, [r4, #0]
 800a96e:	4650      	mov	r0, sl
 800a970:	f000 fb5c 	bl	800b02c <memchr>
 800a974:	b138      	cbz	r0, 800a986 <_vfiprintf_r+0x17a>
 800a976:	eba0 000a 	sub.w	r0, r0, sl
 800a97a:	2240      	movs	r2, #64	; 0x40
 800a97c:	9b04      	ldr	r3, [sp, #16]
 800a97e:	3401      	adds	r4, #1
 800a980:	4082      	lsls	r2, r0
 800a982:	4313      	orrs	r3, r2
 800a984:	9304      	str	r3, [sp, #16]
 800a986:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a98a:	2206      	movs	r2, #6
 800a98c:	4828      	ldr	r0, [pc, #160]	; (800aa30 <_vfiprintf_r+0x224>)
 800a98e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a992:	f000 fb4b 	bl	800b02c <memchr>
 800a996:	2800      	cmp	r0, #0
 800a998:	d03f      	beq.n	800aa1a <_vfiprintf_r+0x20e>
 800a99a:	4b26      	ldr	r3, [pc, #152]	; (800aa34 <_vfiprintf_r+0x228>)
 800a99c:	bb1b      	cbnz	r3, 800a9e6 <_vfiprintf_r+0x1da>
 800a99e:	9b03      	ldr	r3, [sp, #12]
 800a9a0:	3307      	adds	r3, #7
 800a9a2:	f023 0307 	bic.w	r3, r3, #7
 800a9a6:	3308      	adds	r3, #8
 800a9a8:	9303      	str	r3, [sp, #12]
 800a9aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9ac:	443b      	add	r3, r7
 800a9ae:	9309      	str	r3, [sp, #36]	; 0x24
 800a9b0:	e768      	b.n	800a884 <_vfiprintf_r+0x78>
 800a9b2:	fb0c 3202 	mla	r2, ip, r2, r3
 800a9b6:	460c      	mov	r4, r1
 800a9b8:	2001      	movs	r0, #1
 800a9ba:	e7a6      	b.n	800a90a <_vfiprintf_r+0xfe>
 800a9bc:	2300      	movs	r3, #0
 800a9be:	3401      	adds	r4, #1
 800a9c0:	f04f 0c0a 	mov.w	ip, #10
 800a9c4:	4619      	mov	r1, r3
 800a9c6:	9305      	str	r3, [sp, #20]
 800a9c8:	4620      	mov	r0, r4
 800a9ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a9ce:	3a30      	subs	r2, #48	; 0x30
 800a9d0:	2a09      	cmp	r2, #9
 800a9d2:	d903      	bls.n	800a9dc <_vfiprintf_r+0x1d0>
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d0c6      	beq.n	800a966 <_vfiprintf_r+0x15a>
 800a9d8:	9105      	str	r1, [sp, #20]
 800a9da:	e7c4      	b.n	800a966 <_vfiprintf_r+0x15a>
 800a9dc:	fb0c 2101 	mla	r1, ip, r1, r2
 800a9e0:	4604      	mov	r4, r0
 800a9e2:	2301      	movs	r3, #1
 800a9e4:	e7f0      	b.n	800a9c8 <_vfiprintf_r+0x1bc>
 800a9e6:	ab03      	add	r3, sp, #12
 800a9e8:	462a      	mov	r2, r5
 800a9ea:	a904      	add	r1, sp, #16
 800a9ec:	4630      	mov	r0, r6
 800a9ee:	9300      	str	r3, [sp, #0]
 800a9f0:	4b11      	ldr	r3, [pc, #68]	; (800aa38 <_vfiprintf_r+0x22c>)
 800a9f2:	f3af 8000 	nop.w
 800a9f6:	4607      	mov	r7, r0
 800a9f8:	1c78      	adds	r0, r7, #1
 800a9fa:	d1d6      	bne.n	800a9aa <_vfiprintf_r+0x19e>
 800a9fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a9fe:	07d9      	lsls	r1, r3, #31
 800aa00:	d405      	bmi.n	800aa0e <_vfiprintf_r+0x202>
 800aa02:	89ab      	ldrh	r3, [r5, #12]
 800aa04:	059a      	lsls	r2, r3, #22
 800aa06:	d402      	bmi.n	800aa0e <_vfiprintf_r+0x202>
 800aa08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aa0a:	f7ff fe7a 	bl	800a702 <__retarget_lock_release_recursive>
 800aa0e:	89ab      	ldrh	r3, [r5, #12]
 800aa10:	065b      	lsls	r3, r3, #25
 800aa12:	f53f af1d 	bmi.w	800a850 <_vfiprintf_r+0x44>
 800aa16:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aa18:	e71c      	b.n	800a854 <_vfiprintf_r+0x48>
 800aa1a:	ab03      	add	r3, sp, #12
 800aa1c:	462a      	mov	r2, r5
 800aa1e:	a904      	add	r1, sp, #16
 800aa20:	4630      	mov	r0, r6
 800aa22:	9300      	str	r3, [sp, #0]
 800aa24:	4b04      	ldr	r3, [pc, #16]	; (800aa38 <_vfiprintf_r+0x22c>)
 800aa26:	f000 f87d 	bl	800ab24 <_printf_i>
 800aa2a:	e7e4      	b.n	800a9f6 <_vfiprintf_r+0x1ea>
 800aa2c:	0800c420 	.word	0x0800c420
 800aa30:	0800c42a 	.word	0x0800c42a
 800aa34:	00000000 	.word	0x00000000
 800aa38:	0800a7e7 	.word	0x0800a7e7
 800aa3c:	0800c426 	.word	0x0800c426

0800aa40 <_printf_common>:
 800aa40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa44:	4616      	mov	r6, r2
 800aa46:	4699      	mov	r9, r3
 800aa48:	688a      	ldr	r2, [r1, #8]
 800aa4a:	4607      	mov	r7, r0
 800aa4c:	690b      	ldr	r3, [r1, #16]
 800aa4e:	460c      	mov	r4, r1
 800aa50:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800aa54:	4293      	cmp	r3, r2
 800aa56:	bfb8      	it	lt
 800aa58:	4613      	movlt	r3, r2
 800aa5a:	6033      	str	r3, [r6, #0]
 800aa5c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800aa60:	b10a      	cbz	r2, 800aa66 <_printf_common+0x26>
 800aa62:	3301      	adds	r3, #1
 800aa64:	6033      	str	r3, [r6, #0]
 800aa66:	6823      	ldr	r3, [r4, #0]
 800aa68:	0699      	lsls	r1, r3, #26
 800aa6a:	bf42      	ittt	mi
 800aa6c:	6833      	ldrmi	r3, [r6, #0]
 800aa6e:	3302      	addmi	r3, #2
 800aa70:	6033      	strmi	r3, [r6, #0]
 800aa72:	6825      	ldr	r5, [r4, #0]
 800aa74:	f015 0506 	ands.w	r5, r5, #6
 800aa78:	d106      	bne.n	800aa88 <_printf_common+0x48>
 800aa7a:	f104 0a19 	add.w	sl, r4, #25
 800aa7e:	68e3      	ldr	r3, [r4, #12]
 800aa80:	6832      	ldr	r2, [r6, #0]
 800aa82:	1a9b      	subs	r3, r3, r2
 800aa84:	42ab      	cmp	r3, r5
 800aa86:	dc2b      	bgt.n	800aae0 <_printf_common+0xa0>
 800aa88:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800aa8c:	1e13      	subs	r3, r2, #0
 800aa8e:	6822      	ldr	r2, [r4, #0]
 800aa90:	bf18      	it	ne
 800aa92:	2301      	movne	r3, #1
 800aa94:	0692      	lsls	r2, r2, #26
 800aa96:	d430      	bmi.n	800aafa <_printf_common+0xba>
 800aa98:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800aa9c:	4649      	mov	r1, r9
 800aa9e:	4638      	mov	r0, r7
 800aaa0:	47c0      	blx	r8
 800aaa2:	3001      	adds	r0, #1
 800aaa4:	d023      	beq.n	800aaee <_printf_common+0xae>
 800aaa6:	6823      	ldr	r3, [r4, #0]
 800aaa8:	341a      	adds	r4, #26
 800aaaa:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800aaae:	f003 0306 	and.w	r3, r3, #6
 800aab2:	2b04      	cmp	r3, #4
 800aab4:	bf0a      	itet	eq
 800aab6:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800aaba:	2500      	movne	r5, #0
 800aabc:	6833      	ldreq	r3, [r6, #0]
 800aabe:	f04f 0600 	mov.w	r6, #0
 800aac2:	bf08      	it	eq
 800aac4:	1aed      	subeq	r5, r5, r3
 800aac6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800aaca:	bf08      	it	eq
 800aacc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aad0:	4293      	cmp	r3, r2
 800aad2:	bfc4      	itt	gt
 800aad4:	1a9b      	subgt	r3, r3, r2
 800aad6:	18ed      	addgt	r5, r5, r3
 800aad8:	42b5      	cmp	r5, r6
 800aada:	d11a      	bne.n	800ab12 <_printf_common+0xd2>
 800aadc:	2000      	movs	r0, #0
 800aade:	e008      	b.n	800aaf2 <_printf_common+0xb2>
 800aae0:	2301      	movs	r3, #1
 800aae2:	4652      	mov	r2, sl
 800aae4:	4649      	mov	r1, r9
 800aae6:	4638      	mov	r0, r7
 800aae8:	47c0      	blx	r8
 800aaea:	3001      	adds	r0, #1
 800aaec:	d103      	bne.n	800aaf6 <_printf_common+0xb6>
 800aaee:	f04f 30ff 	mov.w	r0, #4294967295
 800aaf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aaf6:	3501      	adds	r5, #1
 800aaf8:	e7c1      	b.n	800aa7e <_printf_common+0x3e>
 800aafa:	18e1      	adds	r1, r4, r3
 800aafc:	1c5a      	adds	r2, r3, #1
 800aafe:	2030      	movs	r0, #48	; 0x30
 800ab00:	3302      	adds	r3, #2
 800ab02:	4422      	add	r2, r4
 800ab04:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ab08:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ab0c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ab10:	e7c2      	b.n	800aa98 <_printf_common+0x58>
 800ab12:	2301      	movs	r3, #1
 800ab14:	4622      	mov	r2, r4
 800ab16:	4649      	mov	r1, r9
 800ab18:	4638      	mov	r0, r7
 800ab1a:	47c0      	blx	r8
 800ab1c:	3001      	adds	r0, #1
 800ab1e:	d0e6      	beq.n	800aaee <_printf_common+0xae>
 800ab20:	3601      	adds	r6, #1
 800ab22:	e7d9      	b.n	800aad8 <_printf_common+0x98>

0800ab24 <_printf_i>:
 800ab24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ab28:	7e0f      	ldrb	r7, [r1, #24]
 800ab2a:	4691      	mov	r9, r2
 800ab2c:	4680      	mov	r8, r0
 800ab2e:	460c      	mov	r4, r1
 800ab30:	2f78      	cmp	r7, #120	; 0x78
 800ab32:	469a      	mov	sl, r3
 800ab34:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ab36:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ab3a:	d807      	bhi.n	800ab4c <_printf_i+0x28>
 800ab3c:	2f62      	cmp	r7, #98	; 0x62
 800ab3e:	d80a      	bhi.n	800ab56 <_printf_i+0x32>
 800ab40:	2f00      	cmp	r7, #0
 800ab42:	f000 80d3 	beq.w	800acec <_printf_i+0x1c8>
 800ab46:	2f58      	cmp	r7, #88	; 0x58
 800ab48:	f000 80bf 	beq.w	800acca <_printf_i+0x1a6>
 800ab4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ab50:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ab54:	e03a      	b.n	800abcc <_printf_i+0xa8>
 800ab56:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ab5a:	2b15      	cmp	r3, #21
 800ab5c:	d8f6      	bhi.n	800ab4c <_printf_i+0x28>
 800ab5e:	a101      	add	r1, pc, #4	; (adr r1, 800ab64 <_printf_i+0x40>)
 800ab60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ab64:	0800abbd 	.word	0x0800abbd
 800ab68:	0800abd1 	.word	0x0800abd1
 800ab6c:	0800ab4d 	.word	0x0800ab4d
 800ab70:	0800ab4d 	.word	0x0800ab4d
 800ab74:	0800ab4d 	.word	0x0800ab4d
 800ab78:	0800ab4d 	.word	0x0800ab4d
 800ab7c:	0800abd1 	.word	0x0800abd1
 800ab80:	0800ab4d 	.word	0x0800ab4d
 800ab84:	0800ab4d 	.word	0x0800ab4d
 800ab88:	0800ab4d 	.word	0x0800ab4d
 800ab8c:	0800ab4d 	.word	0x0800ab4d
 800ab90:	0800acd3 	.word	0x0800acd3
 800ab94:	0800abfd 	.word	0x0800abfd
 800ab98:	0800ac8f 	.word	0x0800ac8f
 800ab9c:	0800ab4d 	.word	0x0800ab4d
 800aba0:	0800ab4d 	.word	0x0800ab4d
 800aba4:	0800acf5 	.word	0x0800acf5
 800aba8:	0800ab4d 	.word	0x0800ab4d
 800abac:	0800abfd 	.word	0x0800abfd
 800abb0:	0800ab4d 	.word	0x0800ab4d
 800abb4:	0800ab4d 	.word	0x0800ab4d
 800abb8:	0800ac97 	.word	0x0800ac97
 800abbc:	682b      	ldr	r3, [r5, #0]
 800abbe:	1d1a      	adds	r2, r3, #4
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	602a      	str	r2, [r5, #0]
 800abc4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800abc8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800abcc:	2301      	movs	r3, #1
 800abce:	e09e      	b.n	800ad0e <_printf_i+0x1ea>
 800abd0:	6820      	ldr	r0, [r4, #0]
 800abd2:	682b      	ldr	r3, [r5, #0]
 800abd4:	0607      	lsls	r7, r0, #24
 800abd6:	f103 0104 	add.w	r1, r3, #4
 800abda:	6029      	str	r1, [r5, #0]
 800abdc:	d501      	bpl.n	800abe2 <_printf_i+0xbe>
 800abde:	681e      	ldr	r6, [r3, #0]
 800abe0:	e003      	b.n	800abea <_printf_i+0xc6>
 800abe2:	0646      	lsls	r6, r0, #25
 800abe4:	d5fb      	bpl.n	800abde <_printf_i+0xba>
 800abe6:	f9b3 6000 	ldrsh.w	r6, [r3]
 800abea:	2e00      	cmp	r6, #0
 800abec:	da03      	bge.n	800abf6 <_printf_i+0xd2>
 800abee:	232d      	movs	r3, #45	; 0x2d
 800abf0:	4276      	negs	r6, r6
 800abf2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800abf6:	4859      	ldr	r0, [pc, #356]	; (800ad5c <_printf_i+0x238>)
 800abf8:	230a      	movs	r3, #10
 800abfa:	e012      	b.n	800ac22 <_printf_i+0xfe>
 800abfc:	682b      	ldr	r3, [r5, #0]
 800abfe:	6820      	ldr	r0, [r4, #0]
 800ac00:	1d19      	adds	r1, r3, #4
 800ac02:	6029      	str	r1, [r5, #0]
 800ac04:	0605      	lsls	r5, r0, #24
 800ac06:	d501      	bpl.n	800ac0c <_printf_i+0xe8>
 800ac08:	681e      	ldr	r6, [r3, #0]
 800ac0a:	e002      	b.n	800ac12 <_printf_i+0xee>
 800ac0c:	0641      	lsls	r1, r0, #25
 800ac0e:	d5fb      	bpl.n	800ac08 <_printf_i+0xe4>
 800ac10:	881e      	ldrh	r6, [r3, #0]
 800ac12:	2f6f      	cmp	r7, #111	; 0x6f
 800ac14:	4851      	ldr	r0, [pc, #324]	; (800ad5c <_printf_i+0x238>)
 800ac16:	bf0c      	ite	eq
 800ac18:	2308      	moveq	r3, #8
 800ac1a:	230a      	movne	r3, #10
 800ac1c:	2100      	movs	r1, #0
 800ac1e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ac22:	6865      	ldr	r5, [r4, #4]
 800ac24:	2d00      	cmp	r5, #0
 800ac26:	60a5      	str	r5, [r4, #8]
 800ac28:	bfa2      	ittt	ge
 800ac2a:	6821      	ldrge	r1, [r4, #0]
 800ac2c:	f021 0104 	bicge.w	r1, r1, #4
 800ac30:	6021      	strge	r1, [r4, #0]
 800ac32:	b90e      	cbnz	r6, 800ac38 <_printf_i+0x114>
 800ac34:	2d00      	cmp	r5, #0
 800ac36:	d04a      	beq.n	800acce <_printf_i+0x1aa>
 800ac38:	4615      	mov	r5, r2
 800ac3a:	fbb6 f1f3 	udiv	r1, r6, r3
 800ac3e:	fb03 6711 	mls	r7, r3, r1, r6
 800ac42:	5dc7      	ldrb	r7, [r0, r7]
 800ac44:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ac48:	4637      	mov	r7, r6
 800ac4a:	460e      	mov	r6, r1
 800ac4c:	42bb      	cmp	r3, r7
 800ac4e:	d9f4      	bls.n	800ac3a <_printf_i+0x116>
 800ac50:	2b08      	cmp	r3, #8
 800ac52:	d10b      	bne.n	800ac6c <_printf_i+0x148>
 800ac54:	6823      	ldr	r3, [r4, #0]
 800ac56:	07de      	lsls	r6, r3, #31
 800ac58:	d508      	bpl.n	800ac6c <_printf_i+0x148>
 800ac5a:	6923      	ldr	r3, [r4, #16]
 800ac5c:	6861      	ldr	r1, [r4, #4]
 800ac5e:	4299      	cmp	r1, r3
 800ac60:	bfde      	ittt	le
 800ac62:	2330      	movle	r3, #48	; 0x30
 800ac64:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ac68:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ac6c:	1b52      	subs	r2, r2, r5
 800ac6e:	6122      	str	r2, [r4, #16]
 800ac70:	464b      	mov	r3, r9
 800ac72:	aa03      	add	r2, sp, #12
 800ac74:	4621      	mov	r1, r4
 800ac76:	4640      	mov	r0, r8
 800ac78:	f8cd a000 	str.w	sl, [sp]
 800ac7c:	f7ff fee0 	bl	800aa40 <_printf_common>
 800ac80:	3001      	adds	r0, #1
 800ac82:	d149      	bne.n	800ad18 <_printf_i+0x1f4>
 800ac84:	f04f 30ff 	mov.w	r0, #4294967295
 800ac88:	b004      	add	sp, #16
 800ac8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac8e:	6823      	ldr	r3, [r4, #0]
 800ac90:	f043 0320 	orr.w	r3, r3, #32
 800ac94:	6023      	str	r3, [r4, #0]
 800ac96:	2778      	movs	r7, #120	; 0x78
 800ac98:	4831      	ldr	r0, [pc, #196]	; (800ad60 <_printf_i+0x23c>)
 800ac9a:	6823      	ldr	r3, [r4, #0]
 800ac9c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800aca0:	061f      	lsls	r7, r3, #24
 800aca2:	6829      	ldr	r1, [r5, #0]
 800aca4:	f851 6b04 	ldr.w	r6, [r1], #4
 800aca8:	d402      	bmi.n	800acb0 <_printf_i+0x18c>
 800acaa:	065f      	lsls	r7, r3, #25
 800acac:	bf48      	it	mi
 800acae:	b2b6      	uxthmi	r6, r6
 800acb0:	07df      	lsls	r7, r3, #31
 800acb2:	6029      	str	r1, [r5, #0]
 800acb4:	bf44      	itt	mi
 800acb6:	f043 0320 	orrmi.w	r3, r3, #32
 800acba:	6023      	strmi	r3, [r4, #0]
 800acbc:	b91e      	cbnz	r6, 800acc6 <_printf_i+0x1a2>
 800acbe:	6823      	ldr	r3, [r4, #0]
 800acc0:	f023 0320 	bic.w	r3, r3, #32
 800acc4:	6023      	str	r3, [r4, #0]
 800acc6:	2310      	movs	r3, #16
 800acc8:	e7a8      	b.n	800ac1c <_printf_i+0xf8>
 800acca:	4824      	ldr	r0, [pc, #144]	; (800ad5c <_printf_i+0x238>)
 800accc:	e7e5      	b.n	800ac9a <_printf_i+0x176>
 800acce:	4615      	mov	r5, r2
 800acd0:	e7be      	b.n	800ac50 <_printf_i+0x12c>
 800acd2:	682b      	ldr	r3, [r5, #0]
 800acd4:	6826      	ldr	r6, [r4, #0]
 800acd6:	1d18      	adds	r0, r3, #4
 800acd8:	6961      	ldr	r1, [r4, #20]
 800acda:	6028      	str	r0, [r5, #0]
 800acdc:	0635      	lsls	r5, r6, #24
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	d501      	bpl.n	800ace6 <_printf_i+0x1c2>
 800ace2:	6019      	str	r1, [r3, #0]
 800ace4:	e002      	b.n	800acec <_printf_i+0x1c8>
 800ace6:	0670      	lsls	r0, r6, #25
 800ace8:	d5fb      	bpl.n	800ace2 <_printf_i+0x1be>
 800acea:	8019      	strh	r1, [r3, #0]
 800acec:	2300      	movs	r3, #0
 800acee:	4615      	mov	r5, r2
 800acf0:	6123      	str	r3, [r4, #16]
 800acf2:	e7bd      	b.n	800ac70 <_printf_i+0x14c>
 800acf4:	682b      	ldr	r3, [r5, #0]
 800acf6:	2100      	movs	r1, #0
 800acf8:	1d1a      	adds	r2, r3, #4
 800acfa:	602a      	str	r2, [r5, #0]
 800acfc:	681d      	ldr	r5, [r3, #0]
 800acfe:	6862      	ldr	r2, [r4, #4]
 800ad00:	4628      	mov	r0, r5
 800ad02:	f000 f993 	bl	800b02c <memchr>
 800ad06:	b108      	cbz	r0, 800ad0c <_printf_i+0x1e8>
 800ad08:	1b40      	subs	r0, r0, r5
 800ad0a:	6060      	str	r0, [r4, #4]
 800ad0c:	6863      	ldr	r3, [r4, #4]
 800ad0e:	6123      	str	r3, [r4, #16]
 800ad10:	2300      	movs	r3, #0
 800ad12:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ad16:	e7ab      	b.n	800ac70 <_printf_i+0x14c>
 800ad18:	6923      	ldr	r3, [r4, #16]
 800ad1a:	462a      	mov	r2, r5
 800ad1c:	4649      	mov	r1, r9
 800ad1e:	4640      	mov	r0, r8
 800ad20:	47d0      	blx	sl
 800ad22:	3001      	adds	r0, #1
 800ad24:	d0ae      	beq.n	800ac84 <_printf_i+0x160>
 800ad26:	6823      	ldr	r3, [r4, #0]
 800ad28:	079b      	lsls	r3, r3, #30
 800ad2a:	d413      	bmi.n	800ad54 <_printf_i+0x230>
 800ad2c:	68e0      	ldr	r0, [r4, #12]
 800ad2e:	9b03      	ldr	r3, [sp, #12]
 800ad30:	4298      	cmp	r0, r3
 800ad32:	bfb8      	it	lt
 800ad34:	4618      	movlt	r0, r3
 800ad36:	e7a7      	b.n	800ac88 <_printf_i+0x164>
 800ad38:	2301      	movs	r3, #1
 800ad3a:	4632      	mov	r2, r6
 800ad3c:	4649      	mov	r1, r9
 800ad3e:	4640      	mov	r0, r8
 800ad40:	47d0      	blx	sl
 800ad42:	3001      	adds	r0, #1
 800ad44:	d09e      	beq.n	800ac84 <_printf_i+0x160>
 800ad46:	3501      	adds	r5, #1
 800ad48:	68e3      	ldr	r3, [r4, #12]
 800ad4a:	9903      	ldr	r1, [sp, #12]
 800ad4c:	1a5b      	subs	r3, r3, r1
 800ad4e:	42ab      	cmp	r3, r5
 800ad50:	dcf2      	bgt.n	800ad38 <_printf_i+0x214>
 800ad52:	e7eb      	b.n	800ad2c <_printf_i+0x208>
 800ad54:	2500      	movs	r5, #0
 800ad56:	f104 0619 	add.w	r6, r4, #25
 800ad5a:	e7f5      	b.n	800ad48 <_printf_i+0x224>
 800ad5c:	0800c431 	.word	0x0800c431
 800ad60:	0800c442 	.word	0x0800c442

0800ad64 <__sflush_r>:
 800ad64:	898a      	ldrh	r2, [r1, #12]
 800ad66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad6a:	4605      	mov	r5, r0
 800ad6c:	0710      	lsls	r0, r2, #28
 800ad6e:	460c      	mov	r4, r1
 800ad70:	d458      	bmi.n	800ae24 <__sflush_r+0xc0>
 800ad72:	684b      	ldr	r3, [r1, #4]
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	dc05      	bgt.n	800ad84 <__sflush_r+0x20>
 800ad78:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	dc02      	bgt.n	800ad84 <__sflush_r+0x20>
 800ad7e:	2000      	movs	r0, #0
 800ad80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad84:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ad86:	2e00      	cmp	r6, #0
 800ad88:	d0f9      	beq.n	800ad7e <__sflush_r+0x1a>
 800ad8a:	2300      	movs	r3, #0
 800ad8c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ad90:	682f      	ldr	r7, [r5, #0]
 800ad92:	6a21      	ldr	r1, [r4, #32]
 800ad94:	602b      	str	r3, [r5, #0]
 800ad96:	d032      	beq.n	800adfe <__sflush_r+0x9a>
 800ad98:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ad9a:	89a3      	ldrh	r3, [r4, #12]
 800ad9c:	075a      	lsls	r2, r3, #29
 800ad9e:	d505      	bpl.n	800adac <__sflush_r+0x48>
 800ada0:	6863      	ldr	r3, [r4, #4]
 800ada2:	1ac0      	subs	r0, r0, r3
 800ada4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ada6:	b10b      	cbz	r3, 800adac <__sflush_r+0x48>
 800ada8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800adaa:	1ac0      	subs	r0, r0, r3
 800adac:	2300      	movs	r3, #0
 800adae:	4602      	mov	r2, r0
 800adb0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800adb2:	4628      	mov	r0, r5
 800adb4:	6a21      	ldr	r1, [r4, #32]
 800adb6:	47b0      	blx	r6
 800adb8:	1c43      	adds	r3, r0, #1
 800adba:	89a3      	ldrh	r3, [r4, #12]
 800adbc:	d106      	bne.n	800adcc <__sflush_r+0x68>
 800adbe:	6829      	ldr	r1, [r5, #0]
 800adc0:	291d      	cmp	r1, #29
 800adc2:	d82b      	bhi.n	800ae1c <__sflush_r+0xb8>
 800adc4:	4a28      	ldr	r2, [pc, #160]	; (800ae68 <__sflush_r+0x104>)
 800adc6:	410a      	asrs	r2, r1
 800adc8:	07d6      	lsls	r6, r2, #31
 800adca:	d427      	bmi.n	800ae1c <__sflush_r+0xb8>
 800adcc:	2200      	movs	r2, #0
 800adce:	04d9      	lsls	r1, r3, #19
 800add0:	6062      	str	r2, [r4, #4]
 800add2:	6922      	ldr	r2, [r4, #16]
 800add4:	6022      	str	r2, [r4, #0]
 800add6:	d504      	bpl.n	800ade2 <__sflush_r+0x7e>
 800add8:	1c42      	adds	r2, r0, #1
 800adda:	d101      	bne.n	800ade0 <__sflush_r+0x7c>
 800addc:	682b      	ldr	r3, [r5, #0]
 800adde:	b903      	cbnz	r3, 800ade2 <__sflush_r+0x7e>
 800ade0:	6560      	str	r0, [r4, #84]	; 0x54
 800ade2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ade4:	602f      	str	r7, [r5, #0]
 800ade6:	2900      	cmp	r1, #0
 800ade8:	d0c9      	beq.n	800ad7e <__sflush_r+0x1a>
 800adea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800adee:	4299      	cmp	r1, r3
 800adf0:	d002      	beq.n	800adf8 <__sflush_r+0x94>
 800adf2:	4628      	mov	r0, r5
 800adf4:	f7ff fc94 	bl	800a720 <_free_r>
 800adf8:	2000      	movs	r0, #0
 800adfa:	6360      	str	r0, [r4, #52]	; 0x34
 800adfc:	e7c0      	b.n	800ad80 <__sflush_r+0x1c>
 800adfe:	2301      	movs	r3, #1
 800ae00:	4628      	mov	r0, r5
 800ae02:	47b0      	blx	r6
 800ae04:	1c41      	adds	r1, r0, #1
 800ae06:	d1c8      	bne.n	800ad9a <__sflush_r+0x36>
 800ae08:	682b      	ldr	r3, [r5, #0]
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d0c5      	beq.n	800ad9a <__sflush_r+0x36>
 800ae0e:	2b1d      	cmp	r3, #29
 800ae10:	d001      	beq.n	800ae16 <__sflush_r+0xb2>
 800ae12:	2b16      	cmp	r3, #22
 800ae14:	d101      	bne.n	800ae1a <__sflush_r+0xb6>
 800ae16:	602f      	str	r7, [r5, #0]
 800ae18:	e7b1      	b.n	800ad7e <__sflush_r+0x1a>
 800ae1a:	89a3      	ldrh	r3, [r4, #12]
 800ae1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae20:	81a3      	strh	r3, [r4, #12]
 800ae22:	e7ad      	b.n	800ad80 <__sflush_r+0x1c>
 800ae24:	690f      	ldr	r7, [r1, #16]
 800ae26:	2f00      	cmp	r7, #0
 800ae28:	d0a9      	beq.n	800ad7e <__sflush_r+0x1a>
 800ae2a:	0793      	lsls	r3, r2, #30
 800ae2c:	680e      	ldr	r6, [r1, #0]
 800ae2e:	600f      	str	r7, [r1, #0]
 800ae30:	bf0c      	ite	eq
 800ae32:	694b      	ldreq	r3, [r1, #20]
 800ae34:	2300      	movne	r3, #0
 800ae36:	eba6 0807 	sub.w	r8, r6, r7
 800ae3a:	608b      	str	r3, [r1, #8]
 800ae3c:	f1b8 0f00 	cmp.w	r8, #0
 800ae40:	dd9d      	ble.n	800ad7e <__sflush_r+0x1a>
 800ae42:	4643      	mov	r3, r8
 800ae44:	463a      	mov	r2, r7
 800ae46:	6a21      	ldr	r1, [r4, #32]
 800ae48:	4628      	mov	r0, r5
 800ae4a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ae4c:	47b0      	blx	r6
 800ae4e:	2800      	cmp	r0, #0
 800ae50:	dc06      	bgt.n	800ae60 <__sflush_r+0xfc>
 800ae52:	89a3      	ldrh	r3, [r4, #12]
 800ae54:	f04f 30ff 	mov.w	r0, #4294967295
 800ae58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae5c:	81a3      	strh	r3, [r4, #12]
 800ae5e:	e78f      	b.n	800ad80 <__sflush_r+0x1c>
 800ae60:	4407      	add	r7, r0
 800ae62:	eba8 0800 	sub.w	r8, r8, r0
 800ae66:	e7e9      	b.n	800ae3c <__sflush_r+0xd8>
 800ae68:	dfbffffe 	.word	0xdfbffffe

0800ae6c <_fflush_r>:
 800ae6c:	b538      	push	{r3, r4, r5, lr}
 800ae6e:	690b      	ldr	r3, [r1, #16]
 800ae70:	4605      	mov	r5, r0
 800ae72:	460c      	mov	r4, r1
 800ae74:	b913      	cbnz	r3, 800ae7c <_fflush_r+0x10>
 800ae76:	2500      	movs	r5, #0
 800ae78:	4628      	mov	r0, r5
 800ae7a:	bd38      	pop	{r3, r4, r5, pc}
 800ae7c:	b118      	cbz	r0, 800ae86 <_fflush_r+0x1a>
 800ae7e:	6a03      	ldr	r3, [r0, #32]
 800ae80:	b90b      	cbnz	r3, 800ae86 <_fflush_r+0x1a>
 800ae82:	f7ff fa31 	bl	800a2e8 <__sinit>
 800ae86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d0f3      	beq.n	800ae76 <_fflush_r+0xa>
 800ae8e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ae90:	07d0      	lsls	r0, r2, #31
 800ae92:	d404      	bmi.n	800ae9e <_fflush_r+0x32>
 800ae94:	0599      	lsls	r1, r3, #22
 800ae96:	d402      	bmi.n	800ae9e <_fflush_r+0x32>
 800ae98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ae9a:	f7ff fc31 	bl	800a700 <__retarget_lock_acquire_recursive>
 800ae9e:	4628      	mov	r0, r5
 800aea0:	4621      	mov	r1, r4
 800aea2:	f7ff ff5f 	bl	800ad64 <__sflush_r>
 800aea6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aea8:	4605      	mov	r5, r0
 800aeaa:	07da      	lsls	r2, r3, #31
 800aeac:	d4e4      	bmi.n	800ae78 <_fflush_r+0xc>
 800aeae:	89a3      	ldrh	r3, [r4, #12]
 800aeb0:	059b      	lsls	r3, r3, #22
 800aeb2:	d4e1      	bmi.n	800ae78 <_fflush_r+0xc>
 800aeb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aeb6:	f7ff fc24 	bl	800a702 <__retarget_lock_release_recursive>
 800aeba:	e7dd      	b.n	800ae78 <_fflush_r+0xc>

0800aebc <__swhatbuf_r>:
 800aebc:	b570      	push	{r4, r5, r6, lr}
 800aebe:	460c      	mov	r4, r1
 800aec0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aec4:	b096      	sub	sp, #88	; 0x58
 800aec6:	4615      	mov	r5, r2
 800aec8:	2900      	cmp	r1, #0
 800aeca:	461e      	mov	r6, r3
 800aecc:	da0c      	bge.n	800aee8 <__swhatbuf_r+0x2c>
 800aece:	89a3      	ldrh	r3, [r4, #12]
 800aed0:	2100      	movs	r1, #0
 800aed2:	f013 0f80 	tst.w	r3, #128	; 0x80
 800aed6:	bf0c      	ite	eq
 800aed8:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800aedc:	2340      	movne	r3, #64	; 0x40
 800aede:	2000      	movs	r0, #0
 800aee0:	6031      	str	r1, [r6, #0]
 800aee2:	602b      	str	r3, [r5, #0]
 800aee4:	b016      	add	sp, #88	; 0x58
 800aee6:	bd70      	pop	{r4, r5, r6, pc}
 800aee8:	466a      	mov	r2, sp
 800aeea:	f000 f87d 	bl	800afe8 <_fstat_r>
 800aeee:	2800      	cmp	r0, #0
 800aef0:	dbed      	blt.n	800aece <__swhatbuf_r+0x12>
 800aef2:	9901      	ldr	r1, [sp, #4]
 800aef4:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800aef8:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800aefc:	4259      	negs	r1, r3
 800aefe:	4159      	adcs	r1, r3
 800af00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800af04:	e7eb      	b.n	800aede <__swhatbuf_r+0x22>

0800af06 <__smakebuf_r>:
 800af06:	898b      	ldrh	r3, [r1, #12]
 800af08:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800af0a:	079d      	lsls	r5, r3, #30
 800af0c:	4606      	mov	r6, r0
 800af0e:	460c      	mov	r4, r1
 800af10:	d507      	bpl.n	800af22 <__smakebuf_r+0x1c>
 800af12:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800af16:	6023      	str	r3, [r4, #0]
 800af18:	6123      	str	r3, [r4, #16]
 800af1a:	2301      	movs	r3, #1
 800af1c:	6163      	str	r3, [r4, #20]
 800af1e:	b002      	add	sp, #8
 800af20:	bd70      	pop	{r4, r5, r6, pc}
 800af22:	ab01      	add	r3, sp, #4
 800af24:	466a      	mov	r2, sp
 800af26:	f7ff ffc9 	bl	800aebc <__swhatbuf_r>
 800af2a:	9900      	ldr	r1, [sp, #0]
 800af2c:	4605      	mov	r5, r0
 800af2e:	4630      	mov	r0, r6
 800af30:	f7ff f8d4 	bl	800a0dc <_malloc_r>
 800af34:	b948      	cbnz	r0, 800af4a <__smakebuf_r+0x44>
 800af36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af3a:	059a      	lsls	r2, r3, #22
 800af3c:	d4ef      	bmi.n	800af1e <__smakebuf_r+0x18>
 800af3e:	f023 0303 	bic.w	r3, r3, #3
 800af42:	f043 0302 	orr.w	r3, r3, #2
 800af46:	81a3      	strh	r3, [r4, #12]
 800af48:	e7e3      	b.n	800af12 <__smakebuf_r+0xc>
 800af4a:	89a3      	ldrh	r3, [r4, #12]
 800af4c:	6020      	str	r0, [r4, #0]
 800af4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af52:	6120      	str	r0, [r4, #16]
 800af54:	81a3      	strh	r3, [r4, #12]
 800af56:	9b00      	ldr	r3, [sp, #0]
 800af58:	6163      	str	r3, [r4, #20]
 800af5a:	9b01      	ldr	r3, [sp, #4]
 800af5c:	b15b      	cbz	r3, 800af76 <__smakebuf_r+0x70>
 800af5e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800af62:	4630      	mov	r0, r6
 800af64:	f000 f852 	bl	800b00c <_isatty_r>
 800af68:	b128      	cbz	r0, 800af76 <__smakebuf_r+0x70>
 800af6a:	89a3      	ldrh	r3, [r4, #12]
 800af6c:	f023 0303 	bic.w	r3, r3, #3
 800af70:	f043 0301 	orr.w	r3, r3, #1
 800af74:	81a3      	strh	r3, [r4, #12]
 800af76:	89a3      	ldrh	r3, [r4, #12]
 800af78:	431d      	orrs	r5, r3
 800af7a:	81a5      	strh	r5, [r4, #12]
 800af7c:	e7cf      	b.n	800af1e <__smakebuf_r+0x18>

0800af7e <_putc_r>:
 800af7e:	b570      	push	{r4, r5, r6, lr}
 800af80:	460d      	mov	r5, r1
 800af82:	4614      	mov	r4, r2
 800af84:	4606      	mov	r6, r0
 800af86:	b118      	cbz	r0, 800af90 <_putc_r+0x12>
 800af88:	6a03      	ldr	r3, [r0, #32]
 800af8a:	b90b      	cbnz	r3, 800af90 <_putc_r+0x12>
 800af8c:	f7ff f9ac 	bl	800a2e8 <__sinit>
 800af90:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800af92:	07d8      	lsls	r0, r3, #31
 800af94:	d405      	bmi.n	800afa2 <_putc_r+0x24>
 800af96:	89a3      	ldrh	r3, [r4, #12]
 800af98:	0599      	lsls	r1, r3, #22
 800af9a:	d402      	bmi.n	800afa2 <_putc_r+0x24>
 800af9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800af9e:	f7ff fbaf 	bl	800a700 <__retarget_lock_acquire_recursive>
 800afa2:	68a3      	ldr	r3, [r4, #8]
 800afa4:	3b01      	subs	r3, #1
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	60a3      	str	r3, [r4, #8]
 800afaa:	da05      	bge.n	800afb8 <_putc_r+0x3a>
 800afac:	69a2      	ldr	r2, [r4, #24]
 800afae:	4293      	cmp	r3, r2
 800afb0:	db12      	blt.n	800afd8 <_putc_r+0x5a>
 800afb2:	b2eb      	uxtb	r3, r5
 800afb4:	2b0a      	cmp	r3, #10
 800afb6:	d00f      	beq.n	800afd8 <_putc_r+0x5a>
 800afb8:	6823      	ldr	r3, [r4, #0]
 800afba:	1c5a      	adds	r2, r3, #1
 800afbc:	6022      	str	r2, [r4, #0]
 800afbe:	701d      	strb	r5, [r3, #0]
 800afc0:	b2ed      	uxtb	r5, r5
 800afc2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800afc4:	07da      	lsls	r2, r3, #31
 800afc6:	d405      	bmi.n	800afd4 <_putc_r+0x56>
 800afc8:	89a3      	ldrh	r3, [r4, #12]
 800afca:	059b      	lsls	r3, r3, #22
 800afcc:	d402      	bmi.n	800afd4 <_putc_r+0x56>
 800afce:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800afd0:	f7ff fb97 	bl	800a702 <__retarget_lock_release_recursive>
 800afd4:	4628      	mov	r0, r5
 800afd6:	bd70      	pop	{r4, r5, r6, pc}
 800afd8:	4629      	mov	r1, r5
 800afda:	4622      	mov	r2, r4
 800afdc:	4630      	mov	r0, r6
 800afde:	f7ff fa72 	bl	800a4c6 <__swbuf_r>
 800afe2:	4605      	mov	r5, r0
 800afe4:	e7ed      	b.n	800afc2 <_putc_r+0x44>
	...

0800afe8 <_fstat_r>:
 800afe8:	b538      	push	{r3, r4, r5, lr}
 800afea:	2300      	movs	r3, #0
 800afec:	4d06      	ldr	r5, [pc, #24]	; (800b008 <_fstat_r+0x20>)
 800afee:	4604      	mov	r4, r0
 800aff0:	4608      	mov	r0, r1
 800aff2:	4611      	mov	r1, r2
 800aff4:	602b      	str	r3, [r5, #0]
 800aff6:	f7fe fc1a 	bl	800982e <_fstat>
 800affa:	1c43      	adds	r3, r0, #1
 800affc:	d102      	bne.n	800b004 <_fstat_r+0x1c>
 800affe:	682b      	ldr	r3, [r5, #0]
 800b000:	b103      	cbz	r3, 800b004 <_fstat_r+0x1c>
 800b002:	6023      	str	r3, [r4, #0]
 800b004:	bd38      	pop	{r3, r4, r5, pc}
 800b006:	bf00      	nop
 800b008:	20006bc8 	.word	0x20006bc8

0800b00c <_isatty_r>:
 800b00c:	b538      	push	{r3, r4, r5, lr}
 800b00e:	2300      	movs	r3, #0
 800b010:	4d05      	ldr	r5, [pc, #20]	; (800b028 <_isatty_r+0x1c>)
 800b012:	4604      	mov	r4, r0
 800b014:	4608      	mov	r0, r1
 800b016:	602b      	str	r3, [r5, #0]
 800b018:	f7fe fc19 	bl	800984e <_isatty>
 800b01c:	1c43      	adds	r3, r0, #1
 800b01e:	d102      	bne.n	800b026 <_isatty_r+0x1a>
 800b020:	682b      	ldr	r3, [r5, #0]
 800b022:	b103      	cbz	r3, 800b026 <_isatty_r+0x1a>
 800b024:	6023      	str	r3, [r4, #0]
 800b026:	bd38      	pop	{r3, r4, r5, pc}
 800b028:	20006bc8 	.word	0x20006bc8

0800b02c <memchr>:
 800b02c:	b2c9      	uxtb	r1, r1
 800b02e:	4402      	add	r2, r0
 800b030:	b510      	push	{r4, lr}
 800b032:	4290      	cmp	r0, r2
 800b034:	4603      	mov	r3, r0
 800b036:	d101      	bne.n	800b03c <memchr+0x10>
 800b038:	2300      	movs	r3, #0
 800b03a:	e003      	b.n	800b044 <memchr+0x18>
 800b03c:	781c      	ldrb	r4, [r3, #0]
 800b03e:	3001      	adds	r0, #1
 800b040:	428c      	cmp	r4, r1
 800b042:	d1f6      	bne.n	800b032 <memchr+0x6>
 800b044:	4618      	mov	r0, r3
 800b046:	bd10      	pop	{r4, pc}

0800b048 <_init>:
 800b048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b04a:	bf00      	nop
 800b04c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b04e:	bc08      	pop	{r3}
 800b050:	469e      	mov	lr, r3
 800b052:	4770      	bx	lr

0800b054 <_fini>:
 800b054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b056:	bf00      	nop
 800b058:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b05a:	bc08      	pop	{r3}
 800b05c:	469e      	mov	lr, r3
 800b05e:	4770      	bx	lr
