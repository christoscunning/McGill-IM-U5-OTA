#
 # @file uart_streaming.bgs
 #
 ############################################################################################
 # (C) Copyright 2020 Silicon Labs, http://www.silabs.com
 ############################################################################################
 # This file is licensed under the Silicon Labs License Agreement. For details see the file:
 # http://developer.silabs.com/legal/version/v11/Silicon_Labs_Software_License_Agreement.txt
 # Before using this software for any purpose, you must agree to the terms of that agreement.
 ############################################################################################
 #

# The RFCOMM endpoint number
dim rfcomm_endpoint

# Variable to track which mode the BT122 UART is currently in.
# bgapi_mode_on = 1 => BGAPI mode
# bgapi_mode_on = 0 => DATA mode
dim bgapi_mode_on

# This procedure starts the RFCOMM server (on the Peripheral side) and opens the connection (on the Central side).
procedure starting_connection_establishment()
  call bt_gap_set_mode(1, 1, 0)
  call bt_rfcomm_start_server(2, 0)
end

# After reset and system initialization, the security manager will be set, and the first connection establishment will be attempted.
event system_initialized(addr)

  # setup UART. Flow control is optional.
  # endpoint = 0, rate = 115200, data_bits = 8, stop_bits = 1, parity = 0 (none), flow_ctrl = 0 (none)
  call hardware_set_uart_configuration(0, 115200, 8, 1, 0, 0)
  
  #Set user-friendly server name
  call system_set_local_name(24, "BT122 UART Streaming 10.0")
  
  # Configure Bluetooth Security Manager
  # No MITM required, no input/output -> Just Works pairing mode
  call sm_configure(2,3)
  # Enable bonding mode
  call sm_set_bondable_mode(1)
  #call sm_delete_bondings()
  # Minimum allowed encryption key size value for bonding - 16 bytes
  call sm_set_minimum_key_size(16)

  call starting_connection_establishment()
  
  # set uart in bgapi mode (1)
  call hardware_set_uart_bgapi_mode(1)
  bgapi_mode_on = 1
  
  # start with LED0 on (set PF3 low) to signal UART mode = BGAPI mode
  call hardware_write_gpio(2, $0008, $0000)
end



# After RFCOMM connection established, data stream from UART is routed to the corresponding endpoint.
event bt_rfcomm_opened(endpoint, address)

  # routing the stream: RFCOMM <-> UART
  call endpoint_set_streaming_destination(0, endpoint)
  call endpoint_set_streaming_destination(endpoint, 0)
  rfcomm_endpoint = endpoint
end


# just for testing / debugging
dim temp(10)

#This event indicates incoming data from an endpoint
# Only used for testing / debugging
event endpoint_data(endpoint, data_len, data_data)
  # call endpoint_send(0, 6, "endp:'")
  # temp(0:4) = "0000"
  # temp(0:4) = temp(0:4) + endpoint
  # call endpoint_send(0, 4, temp(0:4))
  # call endpoint_send(0, 1, "'")

  # if endpoint = rfcomm_endpoint
    # call endpoint_send(0, 6, "uart: ")
    # call endpoint_send(0, data_len, data_data(0:data_len))
  # end if

  #if endpoint = 0 then
    
    #echo to uart terminal
    #call endpoint_send(0, data_len, data_data(0:data_len))
    #call endpoint_send(rfcomm_endpoint, data_len, data_data(0:data_len))
        
  #end if
end


# If the connection has been terminated, re-connection process will start.
event endpoint_closed(endpoint)

  if (endpoint = rfcomm_endpoint)
    #trying to reconnect
    call starting_connection_establishment()

    rfcomm_endpoint = $ffff
  end if
end



# Processing of external interrupts provides UART mode switching.
event hardware_interrupt(interrupts, timestamp)

  # BUTTON1 => interrupt $0001 = pin PF2 = mask 0x0004
  if interrupts = $0001

    # Toggle UART mode (bgapi / data mode)
    
    if bgapi_mode_on = 0 then
      # entering BGAPI mode
      call hardware_set_uart_bgapi_mode(1)
      # turn on LED
      call hardware_write_gpio(2, $0008, $0000)
      # toggle variable
      bgapi_mode_on = 1
    else
      # else if bgapi_mode = 1
      # exit BGAPI mode
      call hardware_set_uart_bgapi_mode(0)
      # turn off LED
      call hardware_write_gpio(2, $0008, $0008)
      # toggle variable
      bgapi_mode_on = 0
    end if
  end if
end

#
 # @desc `dumo_hardware_bluetooth_controller_error` event handler.
 # @param status               Event error code.
 # @param error_data_dump_len  Length of optional additional detailed data.
 # @param error_data_dump_data Optional additional detailed data related to the error and its conditions.
 #
event hardware_bluetooth_controller_error(status, error_data_dump_len, error_data_dump_data)

  # External Bluetooth Controller is unresponsive. To recover restart (or power cycle) the BT122 module. #
  if status = $0507 then
    call system_reset(1)
  end if
end
